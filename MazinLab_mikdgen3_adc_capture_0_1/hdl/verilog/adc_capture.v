// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adc_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.130688,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=682,HLS_SYN_LUT=285,HLS_VERSION=2019_2_1}" *)

module adc_capture (
        ap_clk,
        ap_rst_n,
        istream_data_V_TDATA,
        istream_data_V_TVALID,
        istream_data_V_TREADY,
        qstream_data_V_TDATA,
        qstream_data_V_TVALID,
        qstream_data_V_TREADY,
        adcout_TDATA,
        adcout_TVALID,
        adcout_TREADY,
        adcout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ctrl_clk,
        ap_rst_n_ctrl_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] istream_data_V_TDATA;
input   istream_data_V_TVALID;
output   istream_data_V_TREADY;
input  [127:0] qstream_data_V_TDATA;
input   qstream_data_V_TVALID;
output   qstream_data_V_TREADY;
output  [255:0] adcout_TDATA;
output   adcout_TVALID;
input   adcout_TREADY;
output   adcout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ctrl_clk;
input   ap_rst_n_ctrl_clk;

reg istream_data_V_TREADY;
reg qstream_data_V_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] capturesize_V;
reg   [31:0] capturesize_V_0_data_reg;
reg    capturesize_V_0_vld_reg;
reg    capturesize_V_0_ack_out;
reg   [31:0] tocapture_V;
reg    istream_data_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    qstream_data_V_TDATA_blk_n;
reg    adcout_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln895_reg_423;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln895_reg_423_pp0_iter2_reg;
reg    ap_rst_n_ctrl_clk_inv;
wire   [15:0] trunc_ln321_fu_116_p1;
reg   [15:0] trunc_ln321_reg_343;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    regslice_both_adcout_data_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] trunc_ln321_reg_343_pp0_iter1_reg;
reg   [15:0] tmp_1_reg_348;
reg   [15:0] tmp_1_reg_348_pp0_iter1_reg;
reg   [15:0] tmp_2_reg_353;
reg   [15:0] tmp_2_reg_353_pp0_iter1_reg;
reg   [15:0] tmp_3_reg_358;
reg   [15:0] tmp_3_reg_358_pp0_iter1_reg;
reg   [15:0] tmp_4_reg_363;
reg   [15:0] tmp_4_reg_363_pp0_iter1_reg;
reg   [15:0] tmp_5_reg_368;
reg   [15:0] tmp_5_reg_368_pp0_iter1_reg;
reg   [15:0] tmp_6_reg_373;
reg   [15:0] tmp_6_reg_373_pp0_iter1_reg;
reg   [15:0] tmp_7_reg_378;
reg   [15:0] tmp_7_reg_378_pp0_iter1_reg;
wire   [15:0] trunc_ln321_1_fu_190_p1;
reg   [15:0] trunc_ln321_1_reg_383;
reg   [15:0] trunc_ln321_1_reg_383_pp0_iter1_reg;
reg   [15:0] tmp_9_reg_388;
reg   [15:0] tmp_9_reg_388_pp0_iter1_reg;
reg   [15:0] tmp_s_reg_393;
reg   [15:0] tmp_s_reg_393_pp0_iter1_reg;
reg   [15:0] tmp_8_reg_398;
reg   [15:0] tmp_8_reg_398_pp0_iter1_reg;
reg   [15:0] tmp_10_reg_403;
reg   [15:0] tmp_10_reg_403_pp0_iter1_reg;
reg   [15:0] tmp_11_reg_408;
reg   [15:0] tmp_11_reg_408_pp0_iter1_reg;
reg   [15:0] tmp_12_reg_413;
reg   [15:0] tmp_12_reg_413_pp0_iter1_reg;
reg   [15:0] tmp_13_reg_418;
reg   [15:0] tmp_13_reg_418_pp0_iter1_reg;
wire   [0:0] icmp_ln895_fu_268_p2;
wire   [31:0] select_ln96_fu_296_p3;
reg   [31:0] select_ln96_reg_427;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [26:0] tmp_fu_274_p4;
wire   [0:0] icmp_ln887_fu_284_p2;
wire   [31:0] add_ln214_fu_290_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_istream_data_V_U_apdone_blk;
wire   [127:0] istream_data_V_TDATA_int;
wire    istream_data_V_TVALID_int;
reg    istream_data_V_TREADY_int;
wire    regslice_both_istream_data_V_U_ack_in;
wire    regslice_both_qstream_data_V_U_apdone_blk;
wire   [127:0] qstream_data_V_TDATA_int;
wire    qstream_data_V_TVALID_int;
reg    qstream_data_V_TREADY_int;
wire    regslice_both_qstream_data_V_U_ack_in;
wire   [255:0] adcout_TDATA_int;
reg    adcout_TVALID_int;
wire    adcout_TREADY_int;
wire    regslice_both_adcout_data_V_U_vld_out;
wire    regslice_both_w1_adcout_last_U_apdone_blk;
wire    adcout_TLAST_int;
wire    regslice_both_w1_adcout_last_U_ack_in_dummy;
wire    regslice_both_w1_adcout_last_U_vld_out;
reg    ap_condition_221;

// power-on initialization
initial begin
#0 capturesize_V_0_data_reg = 32'd0;
#0 capturesize_V_0_vld_reg = 1'b0;
#0 tocapture_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

adc_capture_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
adc_capture_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ctrl_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .capturesize_V(capturesize_V),
    .clk(ap_clk),
    .rst(ap_rst_n_ctrl_clk_inv)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_istream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(istream_data_V_TDATA),
    .vld_in(istream_data_V_TVALID),
    .ack_in(regslice_both_istream_data_V_U_ack_in),
    .data_out(istream_data_V_TDATA_int),
    .vld_out(istream_data_V_TVALID_int),
    .ack_out(istream_data_V_TREADY_int),
    .apdone_blk(regslice_both_istream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_qstream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(qstream_data_V_TDATA),
    .vld_in(qstream_data_V_TVALID),
    .ack_in(regslice_both_qstream_data_V_U_ack_in),
    .data_out(qstream_data_V_TDATA_int),
    .vld_out(qstream_data_V_TVALID_int),
    .ack_out(qstream_data_V_TREADY_int),
    .apdone_blk(regslice_both_qstream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_adcout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(adcout_TDATA_int),
    .vld_in(adcout_TVALID_int),
    .ack_in(adcout_TREADY_int),
    .data_out(adcout_TDATA),
    .vld_out(regslice_both_adcout_data_V_U_vld_out),
    .ack_out(adcout_TREADY),
    .apdone_blk(regslice_both_adcout_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_adcout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(adcout_TLAST_int),
    .vld_in(adcout_TVALID_int),
    .ack_in(regslice_both_w1_adcout_last_U_ack_in_dummy),
    .data_out(adcout_TLAST),
    .vld_out(regslice_both_w1_adcout_last_U_vld_out),
    .ack_out(adcout_TREADY),
    .apdone_blk(regslice_both_w1_adcout_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln895_fu_268_p2 == 1'd1)) begin
            tocapture_V <= capturesize_V_0_data_reg;
        end else if ((icmp_ln895_fu_268_p2 == 1'd0)) begin
            tocapture_V <= select_ln96_fu_296_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((capturesize_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((capturesize_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (capturesize_V_0_vld_reg == 1'b1)))) begin
        capturesize_V_0_data_reg <= capturesize_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln895_reg_423 <= icmp_ln895_fu_268_p2;
        tmp_10_reg_403 <= {{qstream_data_V_TDATA_int[79:64]}};
        tmp_10_reg_403_pp0_iter1_reg <= tmp_10_reg_403;
        tmp_11_reg_408 <= {{qstream_data_V_TDATA_int[95:80]}};
        tmp_11_reg_408_pp0_iter1_reg <= tmp_11_reg_408;
        tmp_12_reg_413 <= {{qstream_data_V_TDATA_int[111:96]}};
        tmp_12_reg_413_pp0_iter1_reg <= tmp_12_reg_413;
        tmp_13_reg_418 <= {{qstream_data_V_TDATA_int[127:112]}};
        tmp_13_reg_418_pp0_iter1_reg <= tmp_13_reg_418;
        tmp_1_reg_348 <= {{istream_data_V_TDATA_int[31:16]}};
        tmp_1_reg_348_pp0_iter1_reg <= tmp_1_reg_348;
        tmp_2_reg_353 <= {{istream_data_V_TDATA_int[47:32]}};
        tmp_2_reg_353_pp0_iter1_reg <= tmp_2_reg_353;
        tmp_3_reg_358 <= {{istream_data_V_TDATA_int[63:48]}};
        tmp_3_reg_358_pp0_iter1_reg <= tmp_3_reg_358;
        tmp_4_reg_363 <= {{istream_data_V_TDATA_int[79:64]}};
        tmp_4_reg_363_pp0_iter1_reg <= tmp_4_reg_363;
        tmp_5_reg_368 <= {{istream_data_V_TDATA_int[95:80]}};
        tmp_5_reg_368_pp0_iter1_reg <= tmp_5_reg_368;
        tmp_6_reg_373 <= {{istream_data_V_TDATA_int[111:96]}};
        tmp_6_reg_373_pp0_iter1_reg <= tmp_6_reg_373;
        tmp_7_reg_378 <= {{istream_data_V_TDATA_int[127:112]}};
        tmp_7_reg_378_pp0_iter1_reg <= tmp_7_reg_378;
        tmp_8_reg_398 <= {{qstream_data_V_TDATA_int[63:48]}};
        tmp_8_reg_398_pp0_iter1_reg <= tmp_8_reg_398;
        tmp_9_reg_388 <= {{qstream_data_V_TDATA_int[31:16]}};
        tmp_9_reg_388_pp0_iter1_reg <= tmp_9_reg_388;
        tmp_s_reg_393 <= {{qstream_data_V_TDATA_int[47:32]}};
        tmp_s_reg_393_pp0_iter1_reg <= tmp_s_reg_393;
        trunc_ln321_1_reg_383 <= trunc_ln321_1_fu_190_p1;
        trunc_ln321_1_reg_383_pp0_iter1_reg <= trunc_ln321_1_reg_383;
        trunc_ln321_reg_343 <= trunc_ln321_fu_116_p1;
        trunc_ln321_reg_343_pp0_iter1_reg <= trunc_ln321_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln895_reg_423_pp0_iter2_reg <= icmp_ln895_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln96_reg_427 <= select_ln96_fu_296_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln895_reg_423_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln895_reg_423 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        adcout_TDATA_blk_n = adcout_TREADY_int;
    end else begin
        adcout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln895_reg_423 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adcout_TVALID_int = 1'b1;
    end else begin
        adcout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        capturesize_V_0_ack_out = 1'b1;
    end else begin
        capturesize_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        istream_data_V_TDATA_blk_n = istream_data_V_TVALID_int;
    end else begin
        istream_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((istream_data_V_TVALID == 1'b1) & (regslice_both_istream_data_V_U_ack_in == 1'b1))) begin
        istream_data_V_TREADY = 1'b1;
    end else begin
        istream_data_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        istream_data_V_TREADY_int = 1'b1;
    end else begin
        istream_data_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qstream_data_V_TDATA_blk_n = qstream_data_V_TVALID_int;
    end else begin
        qstream_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_qstream_data_V_U_ack_in == 1'b1) & (qstream_data_V_TVALID == 1'b1))) begin
        qstream_data_V_TREADY = 1'b1;
    end else begin
        qstream_data_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qstream_data_V_TREADY_int = 1'b1;
    end else begin
        qstream_data_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign adcout_TDATA_int = {{{{{{{{{{{{{{{{tmp_13_reg_418_pp0_iter1_reg}, {tmp_7_reg_378_pp0_iter1_reg}}, {tmp_12_reg_413_pp0_iter1_reg}}, {tmp_6_reg_373_pp0_iter1_reg}}, {tmp_11_reg_408_pp0_iter1_reg}}, {tmp_5_reg_368_pp0_iter1_reg}}, {tmp_10_reg_403_pp0_iter1_reg}}, {tmp_4_reg_363_pp0_iter1_reg}}, {tmp_8_reg_398_pp0_iter1_reg}}, {tmp_3_reg_358_pp0_iter1_reg}}, {tmp_s_reg_393_pp0_iter1_reg}}, {tmp_2_reg_353_pp0_iter1_reg}}, {tmp_9_reg_388_pp0_iter1_reg}}, {tmp_1_reg_348_pp0_iter1_reg}}, {trunc_ln321_1_reg_383_pp0_iter1_reg}}, {trunc_ln321_reg_343_pp0_iter1_reg}};

assign adcout_TLAST_int = ((select_ln96_reg_427 == 32'd0) ? 1'b1 : 1'b0);

assign adcout_TVALID = regslice_both_adcout_data_V_U_vld_out;

assign add_ln214_fu_290_p2 = ($signed(tocapture_V) + $signed(32'd4294967264));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (regslice_both_adcout_data_V_U_apdone_blk == 1'b1)) | ((1'b1 == 1'b1) & ((qstream_data_V_TVALID_int == 1'b0) | (istream_data_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_adcout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == 1'b1) & ((qstream_data_V_TVALID_int == 1'b0) | (istream_data_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_adcout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == 1'b1) & ((qstream_data_V_TVALID_int == 1'b0) | (istream_data_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((qstream_data_V_TVALID_int == 1'b0) | (istream_data_V_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln895_reg_423 == 1'd0) & (1'b0 == adcout_TREADY_int));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln895_reg_423_pp0_iter2_reg == 1'd0) & (1'b0 == adcout_TREADY_int));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (regslice_both_adcout_data_V_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_condition_221 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_ctrl_clk_inv = ~ap_rst_n_ctrl_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln887_fu_284_p2 = ((tmp_fu_274_p4 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_268_p2 = ((tocapture_V == 32'd0) ? 1'b1 : 1'b0);

assign select_ln96_fu_296_p3 = ((icmp_ln887_fu_284_p2[0:0] === 1'b1) ? 32'd0 : add_ln214_fu_290_p2);

assign tmp_fu_274_p4 = {{tocapture_V[31:5]}};

assign trunc_ln321_1_fu_190_p1 = qstream_data_V_TDATA_int[15:0];

assign trunc_ln321_fu_116_p1 = istream_data_V_TDATA_int[15:0];

endmodule //adc_capture
