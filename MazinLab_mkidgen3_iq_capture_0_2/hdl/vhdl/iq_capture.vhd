-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iq_capture is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    resstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    resstream_TVALID : IN STD_LOGIC;
    resstream_TREADY : OUT STD_LOGIC;
    resstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    resstream_TLAST : IN STD_LOGIC;
    ddsstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    ddsstream_TVALID : IN STD_LOGIC;
    ddsstream_TREADY : OUT STD_LOGIC;
    ddsstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    ddsstream_TLAST : IN STD_LOGIC;
    lpstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    lpstream_TVALID : IN STD_LOGIC;
    lpstream_TREADY : OUT STD_LOGIC;
    lpstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    lpstream_TLAST : IN STD_LOGIC;
    iqout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    iqout_TVALID : OUT STD_LOGIC;
    iqout_TREADY : IN STD_LOGIC;
    iqout_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    iqout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ctrl_clk : IN STD_LOGIC;
    ap_rst_n_ctrl_clk : IN STD_LOGIC );
end;


architecture behav of iq_capture is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iq_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.910000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=806,HLS_SYN_LUT=1237,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_2F : STD_LOGIC_VECTOR (9 downto 0) := "0000101111";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_3F : STD_LOGIC_VECTOR (9 downto 0) := "0000111111";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv10_4F : STD_LOGIC_VECTOR (9 downto 0) := "0001001111";
    constant ap_const_lv10_50 : STD_LOGIC_VECTOR (9 downto 0) := "0001010000";
    constant ap_const_lv10_5F : STD_LOGIC_VECTOR (9 downto 0) := "0001011111";
    constant ap_const_lv10_60 : STD_LOGIC_VECTOR (9 downto 0) := "0001100000";
    constant ap_const_lv10_6F : STD_LOGIC_VECTOR (9 downto 0) := "0001101111";
    constant ap_const_lv10_70 : STD_LOGIC_VECTOR (9 downto 0) := "0001110000";
    constant ap_const_lv10_7F : STD_LOGIC_VECTOR (9 downto 0) := "0001111111";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv10_8F : STD_LOGIC_VECTOR (9 downto 0) := "0010001111";
    constant ap_const_lv10_90 : STD_LOGIC_VECTOR (9 downto 0) := "0010010000";
    constant ap_const_lv10_9F : STD_LOGIC_VECTOR (9 downto 0) := "0010011111";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv10_AF : STD_LOGIC_VECTOR (9 downto 0) := "0010101111";
    constant ap_const_lv10_B0 : STD_LOGIC_VECTOR (9 downto 0) := "0010110000";
    constant ap_const_lv10_BF : STD_LOGIC_VECTOR (9 downto 0) := "0010111111";
    constant ap_const_lv10_C0 : STD_LOGIC_VECTOR (9 downto 0) := "0011000000";
    constant ap_const_lv10_CF : STD_LOGIC_VECTOR (9 downto 0) := "0011001111";
    constant ap_const_lv10_D0 : STD_LOGIC_VECTOR (9 downto 0) := "0011010000";
    constant ap_const_lv10_DF : STD_LOGIC_VECTOR (9 downto 0) := "0011011111";
    constant ap_const_lv10_E0 : STD_LOGIC_VECTOR (9 downto 0) := "0011100000";
    constant ap_const_lv10_EF : STD_LOGIC_VECTOR (9 downto 0) := "0011101111";
    constant ap_const_lv10_F0 : STD_LOGIC_VECTOR (9 downto 0) := "0011110000";
    constant ap_const_lv10_FF : STD_LOGIC_VECTOR (9 downto 0) := "0011111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal keep_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal keep_V_ce0 : STD_LOGIC;
    signal keep_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal capturesize_V : STD_LOGIC_VECTOR (31 downto 0);
    signal capturesize_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal capturesize_V_0_vld_reg : STD_LOGIC := '0';
    signal capturesize_V_0_ack_out : STD_LOGIC;
    signal streamselect_V : STD_LOGIC_VECTOR (1 downto 0);
    signal streamselect_V_0_data_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal streamselect_V_0_vld_reg : STD_LOGIC := '0';
    signal streamselect_V_0_ack_out : STD_LOGIC;
    signal streamid_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tocapture_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal resstream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ddsstream_TDATA_blk_n : STD_LOGIC;
    signal lpstream_TDATA_blk_n : STD_LOGIC;
    signal iqout_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln83_reg_1584 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln83_reg_1584_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_ctrl_clk_inv : STD_LOGIC;
    signal select_ln65_2_fu_778_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_1484 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal regslice_both_iqout_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln65_2_reg_1484_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_802_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_1489_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_8_fu_826_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_8_reg_1494 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_8_reg_1494_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_11_fu_850_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_11_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_11_reg_1499_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_fu_874_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_reg_1504_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_17_fu_898_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_17_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_17_reg_1509_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_20_fu_922_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_20_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_20_reg_1514_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_23_fu_946_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_23_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_23_reg_1519_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_26_fu_970_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_26_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_26_reg_1524_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_29_fu_994_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_29_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_29_reg_1529_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_32_fu_1018_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_32_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_32_reg_1534_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_35_fu_1042_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_35_reg_1539 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_35_reg_1539_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_fu_1066_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_reg_1544 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_reg_1544_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_41_fu_1090_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_41_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_41_reg_1549_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_44_fu_1114_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_44_reg_1554 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_44_reg_1554_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_47_fu_1138_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_47_reg_1559 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_47_reg_1559_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_50_fu_1162_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_50_reg_1564 : STD_LOGIC_VECTOR (7 downto 0);
    signal keep_V_load_reg_1574 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_fu_1183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln81_reg_1579 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln83_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_fu_1232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln85_reg_1588 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln209_fu_1246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln209_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_1170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_streamid_V_load : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln65_2_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_400_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_562_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln65_1_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_724_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln65_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_756_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_770_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_390_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_552_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_794_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_380_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_542_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_704_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_810_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_7_fu_818_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_370_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_532_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_694_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_9_fu_834_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_842_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_360_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_522_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_684_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_12_fu_858_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_13_fu_866_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_350_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_512_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_15_fu_882_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_16_fu_890_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_340_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_502_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_664_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_18_fu_906_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_19_fu_914_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_492_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_654_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_21_fu_930_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_22_fu_938_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_320_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_482_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_644_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_24_fu_954_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_25_fu_962_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_310_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_472_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_634_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_27_fu_978_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_28_fu_986_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_300_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_462_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_624_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_30_fu_1002_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_31_fu_1010_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_290_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_452_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_614_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_33_fu_1026_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_34_fu_1034_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_280_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_442_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_604_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_36_fu_1050_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_37_fu_1058_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_270_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_432_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_594_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_39_fu_1074_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_40_fu_1082_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_422_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_584_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_42_fu_1098_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_43_fu_1106_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_1_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_2_fu_580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_45_fu_1122_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_46_fu_1130_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_48_fu_1146_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_49_fu_1154_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_bytes_keep_fu_1175_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln83_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln214_fu_1226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln895_1_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_1254_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal keepval_V_fu_1260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln248_fu_1272_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_1_fu_1288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_1276_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_1_fu_1296_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_10_fu_1312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_1_fu_1300_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_2_fu_1320_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_3_fu_1336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_2_fu_1324_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_3_fu_1344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_4_fu_1360_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_3_fu_1348_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_4_fu_1368_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_5_fu_1384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_4_fu_1372_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_5_fu_1392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_6_fu_1408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_5_fu_1396_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_6_fu_1416_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_7_fu_1432_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_6_fu_1420_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_7_fu_1440_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_resstream_data_V_U_apdone_blk : STD_LOGIC;
    signal resstream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal resstream_TVALID_int : STD_LOGIC;
    signal resstream_TREADY_int : STD_LOGIC;
    signal regslice_both_resstream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_resstream_user_V_U_apdone_blk : STD_LOGIC;
    signal resstream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_resstream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_resstream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_resstream_last_U_apdone_blk : STD_LOGIC;
    signal resstream_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_resstream_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_resstream_last_U_ack_in : STD_LOGIC;
    signal regslice_both_ddsstream_data_V_U_apdone_blk : STD_LOGIC;
    signal ddsstream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal ddsstream_TVALID_int : STD_LOGIC;
    signal ddsstream_TREADY_int : STD_LOGIC;
    signal regslice_both_ddsstream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_ddsstream_user_V_U_apdone_blk : STD_LOGIC;
    signal ddsstream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_ddsstream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ddsstream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_ddsstream_last_U_apdone_blk : STD_LOGIC;
    signal ddsstream_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_ddsstream_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_ddsstream_last_U_ack_in : STD_LOGIC;
    signal regslice_both_lpstream_data_V_U_apdone_blk : STD_LOGIC;
    signal lpstream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal lpstream_TVALID_int : STD_LOGIC;
    signal lpstream_TREADY_int : STD_LOGIC;
    signal regslice_both_lpstream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_lpstream_user_V_U_apdone_blk : STD_LOGIC;
    signal lpstream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_lpstream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_lpstream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_lpstream_last_U_apdone_blk : STD_LOGIC;
    signal lpstream_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_lpstream_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_lpstream_last_U_ack_in : STD_LOGIC;
    signal iqout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal iqout_TVALID_int : STD_LOGIC;
    signal iqout_TREADY_int : STD_LOGIC;
    signal regslice_both_iqout_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iqout_keep_V_U_apdone_blk : STD_LOGIC;
    signal iqout_TKEEP_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_iqout_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_iqout_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_apdone_blk : STD_LOGIC;
    signal iqout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_iqout_last_U_vld_out : STD_LOGIC;
    signal ap_condition_276 : BOOLEAN;

    component iq_capture_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        keep_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        keep_V_ce0 : IN STD_LOGIC;
        keep_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        capturesize_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        streamselect_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    iq_capture_control_s_axi_U : component iq_capture_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ctrl_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        keep_V_address0 => keep_V_address0,
        keep_V_ce0 => keep_V_ce0,
        keep_V_q0 => keep_V_q0,
        capturesize_V => capturesize_V,
        streamselect_V => streamselect_V,
        clk => ap_clk,
        rst => ap_rst_n_ctrl_clk_inv);

    regslice_both_resstream_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => resstream_TDATA,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_resstream_data_V_U_ack_in,
        data_out => resstream_TDATA_int,
        vld_out => resstream_TVALID_int,
        ack_out => resstream_TREADY_int,
        apdone_blk => regslice_both_resstream_data_V_U_apdone_blk);

    regslice_both_resstream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => resstream_TUSER,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_resstream_user_V_U_ack_in,
        data_out => resstream_TUSER_int,
        vld_out => regslice_both_resstream_user_V_U_vld_out,
        ack_out => resstream_TREADY_int,
        apdone_blk => regslice_both_resstream_user_V_U_apdone_blk);

    regslice_both_w1_resstream_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => resstream_TLAST,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_w1_resstream_last_U_ack_in,
        data_out => resstream_TLAST_int,
        vld_out => regslice_both_w1_resstream_last_U_vld_out,
        ack_out => resstream_TREADY_int,
        apdone_blk => regslice_both_w1_resstream_last_U_apdone_blk);

    regslice_both_ddsstream_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ddsstream_TDATA,
        vld_in => ddsstream_TVALID,
        ack_in => regslice_both_ddsstream_data_V_U_ack_in,
        data_out => ddsstream_TDATA_int,
        vld_out => ddsstream_TVALID_int,
        ack_out => ddsstream_TREADY_int,
        apdone_blk => regslice_both_ddsstream_data_V_U_apdone_blk);

    regslice_both_ddsstream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ddsstream_TUSER,
        vld_in => ddsstream_TVALID,
        ack_in => regslice_both_ddsstream_user_V_U_ack_in,
        data_out => ddsstream_TUSER_int,
        vld_out => regslice_both_ddsstream_user_V_U_vld_out,
        ack_out => ddsstream_TREADY_int,
        apdone_blk => regslice_both_ddsstream_user_V_U_apdone_blk);

    regslice_both_w1_ddsstream_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ddsstream_TLAST,
        vld_in => ddsstream_TVALID,
        ack_in => regslice_both_w1_ddsstream_last_U_ack_in,
        data_out => ddsstream_TLAST_int,
        vld_out => regslice_both_w1_ddsstream_last_U_vld_out,
        ack_out => ddsstream_TREADY_int,
        apdone_blk => regslice_both_w1_ddsstream_last_U_apdone_blk);

    regslice_both_lpstream_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => lpstream_TDATA,
        vld_in => lpstream_TVALID,
        ack_in => regslice_both_lpstream_data_V_U_ack_in,
        data_out => lpstream_TDATA_int,
        vld_out => lpstream_TVALID_int,
        ack_out => lpstream_TREADY_int,
        apdone_blk => regslice_both_lpstream_data_V_U_apdone_blk);

    regslice_both_lpstream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => lpstream_TUSER,
        vld_in => lpstream_TVALID,
        ack_in => regslice_both_lpstream_user_V_U_ack_in,
        data_out => lpstream_TUSER_int,
        vld_out => regslice_both_lpstream_user_V_U_vld_out,
        ack_out => lpstream_TREADY_int,
        apdone_blk => regslice_both_lpstream_user_V_U_apdone_blk);

    regslice_both_w1_lpstream_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => lpstream_TLAST,
        vld_in => lpstream_TVALID,
        ack_in => regslice_both_w1_lpstream_last_U_ack_in,
        data_out => lpstream_TLAST_int,
        vld_out => regslice_both_w1_lpstream_last_U_vld_out,
        ack_out => lpstream_TREADY_int,
        apdone_blk => regslice_both_w1_lpstream_last_U_apdone_blk);

    regslice_both_iqout_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TDATA_int,
        vld_in => iqout_TVALID_int,
        ack_in => iqout_TREADY_int,
        data_out => iqout_TDATA,
        vld_out => regslice_both_iqout_data_V_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_data_V_U_apdone_blk);

    regslice_both_iqout_keep_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TKEEP_int,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_iqout_keep_V_U_ack_in_dummy,
        data_out => iqout_TKEEP,
        vld_out => regslice_both_iqout_keep_V_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_iqout_keep_V_U_apdone_blk);

    regslice_both_w1_iqout_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iqout_TLAST_int,
        vld_in => iqout_TVALID_int,
        ack_in => regslice_both_w1_iqout_last_U_ack_in_dummy,
        data_out => iqout_TLAST,
        vld_out => regslice_both_w1_iqout_last_U_vld_out,
        ack_out => iqout_TREADY,
        apdone_blk => regslice_both_w1_iqout_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    capturesize_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    streamselect_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    tocapture_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_276)) then
                if ((ap_const_lv1_1 = and_ln83_fu_1202_p2)) then 
                    tocapture_V <= select_ln85_fu_1232_p3;
                elsif ((ap_const_lv1_0 = and_ln83_fu_1202_p2)) then 
                    tocapture_V <= capturesize_V_0_data_reg;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln83_reg_1584 <= and_ln83_fu_1202_p2;
                keep_V_load_reg_1574 <= keep_V_q0;
                select_ln65_11_reg_1499 <= select_ln65_11_fu_850_p3;
                select_ln65_11_reg_1499_pp0_iter1_reg <= select_ln65_11_reg_1499;
                select_ln65_14_reg_1504 <= select_ln65_14_fu_874_p3;
                select_ln65_14_reg_1504_pp0_iter1_reg <= select_ln65_14_reg_1504;
                select_ln65_17_reg_1509 <= select_ln65_17_fu_898_p3;
                select_ln65_17_reg_1509_pp0_iter1_reg <= select_ln65_17_reg_1509;
                select_ln65_20_reg_1514 <= select_ln65_20_fu_922_p3;
                select_ln65_20_reg_1514_pp0_iter1_reg <= select_ln65_20_reg_1514;
                select_ln65_23_reg_1519 <= select_ln65_23_fu_946_p3;
                select_ln65_23_reg_1519_pp0_iter1_reg <= select_ln65_23_reg_1519;
                select_ln65_26_reg_1524 <= select_ln65_26_fu_970_p3;
                select_ln65_26_reg_1524_pp0_iter1_reg <= select_ln65_26_reg_1524;
                select_ln65_29_reg_1529 <= select_ln65_29_fu_994_p3;
                select_ln65_29_reg_1529_pp0_iter1_reg <= select_ln65_29_reg_1529;
                select_ln65_2_reg_1484 <= select_ln65_2_fu_778_p3;
                select_ln65_2_reg_1484_pp0_iter1_reg <= select_ln65_2_reg_1484;
                select_ln65_32_reg_1534 <= select_ln65_32_fu_1018_p3;
                select_ln65_32_reg_1534_pp0_iter1_reg <= select_ln65_32_reg_1534;
                select_ln65_35_reg_1539 <= select_ln65_35_fu_1042_p3;
                select_ln65_35_reg_1539_pp0_iter1_reg <= select_ln65_35_reg_1539;
                select_ln65_38_reg_1544 <= select_ln65_38_fu_1066_p3;
                select_ln65_38_reg_1544_pp0_iter1_reg <= select_ln65_38_reg_1544;
                select_ln65_41_reg_1549 <= select_ln65_41_fu_1090_p3;
                select_ln65_41_reg_1549_pp0_iter1_reg <= select_ln65_41_reg_1549;
                select_ln65_44_reg_1554 <= select_ln65_44_fu_1114_p3;
                select_ln65_44_reg_1554_pp0_iter1_reg <= select_ln65_44_reg_1554;
                select_ln65_47_reg_1559 <= select_ln65_47_fu_1138_p3;
                select_ln65_47_reg_1559_pp0_iter1_reg <= select_ln65_47_reg_1559;
                select_ln65_50_reg_1564 <= select_ln65_50_fu_1162_p3;
                select_ln65_5_reg_1489 <= select_ln65_5_fu_802_p3;
                select_ln65_5_reg_1489_pp0_iter1_reg <= select_ln65_5_reg_1489;
                select_ln65_8_reg_1494 <= select_ln65_8_fu_826_p3;
                select_ln65_8_reg_1494_pp0_iter1_reg <= select_ln65_8_reg_1494;
                    zext_ln81_reg_1579(9 downto 2) <= zext_ln81_fu_1183_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln83_reg_1584_pp0_iter2_reg <= and_ln83_reg_1584;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((capturesize_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((capturesize_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (capturesize_V_0_vld_reg = ap_const_logic_1)))) then
                capturesize_V_0_data_reg <= capturesize_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln83_fu_1202_p2))) then
                select_ln85_reg_1588 <= select_ln85_fu_1232_p3;
                trunc_ln209_reg_1594 <= trunc_ln209_fu_1246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln83_fu_1202_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                streamid_V <= streamselect_V_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((streamselect_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((streamselect_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (streamselect_V_0_vld_reg = ap_const_logic_1)))) then
                streamselect_V_0_data_reg <= streamselect_V;
            end if;
        end if;
    end process;
    zext_ln81_reg_1579(1 downto 0) <= "00";
    zext_ln81_reg_1579(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln83_fu_1202_p2 <= (icmp_ln879_fu_1197_p2 and icmp_ln83_fu_1191_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, regslice_both_iqout_data_V_U_apdone_blk, resstream_TVALID_int, ddsstream_TVALID_int, lpstream_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_1 = ap_const_logic_1) and ((lpstream_TVALID_int = ap_const_logic_0) or (ddsstream_TVALID_int = ap_const_logic_0) or (resstream_TVALID_int = ap_const_logic_0))) or ((regslice_both_iqout_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state3_io, regslice_both_iqout_data_V_U_apdone_blk, ap_block_state4_io, resstream_TVALID_int, ddsstream_TVALID_int, lpstream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_const_logic_1) and ((lpstream_TVALID_int = ap_const_logic_0) or (ddsstream_TVALID_int = ap_const_logic_0) or (resstream_TVALID_int = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (regslice_both_iqout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state3_io, regslice_both_iqout_data_V_U_apdone_blk, ap_block_state4_io, resstream_TVALID_int, ddsstream_TVALID_int, lpstream_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_const_logic_1) and ((lpstream_TVALID_int = ap_const_logic_0) or (ddsstream_TVALID_int = ap_const_logic_0) or (resstream_TVALID_int = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (regslice_both_iqout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(resstream_TVALID_int, ddsstream_TVALID_int, lpstream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((lpstream_TVALID_int = ap_const_logic_0) or (ddsstream_TVALID_int = ap_const_logic_0) or (resstream_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(and_ln83_reg_1584, iqout_TREADY_int)
    begin
                ap_block_state3_io <= ((iqout_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln83_reg_1584));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(and_ln83_reg_1584_pp0_iter2_reg, iqout_TREADY_int)
    begin
                ap_block_state4_io <= ((iqout_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln83_reg_1584_pp0_iter2_reg));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(regslice_both_iqout_data_V_U_apdone_blk)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (regslice_both_iqout_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_276_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_276 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_ctrl_clk_inv_assign_proc : process(ap_rst_n_ctrl_clk)
    begin
                ap_rst_n_ctrl_clk_inv <= not(ap_rst_n_ctrl_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_streamid_V_load_assign_proc : process(streamselect_V_0_data_reg, streamid_V, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, and_ln83_fu_1202_p2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_0 = and_ln83_fu_1202_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_sig_allocacmp_streamid_V_load <= streamselect_V_0_data_reg;
        else 
            ap_sig_allocacmp_streamid_V_load <= streamid_V;
        end if; 
    end process;


    capturesize_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            capturesize_V_0_ack_out <= ap_const_logic_1;
        else 
            capturesize_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    ddsstream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ddsstream_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ddsstream_TDATA_blk_n <= ddsstream_TVALID_int;
        else 
            ddsstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ddsstream_TREADY_assign_proc : process(ddsstream_TVALID, regslice_both_ddsstream_data_V_U_ack_in)
    begin
        if (((ddsstream_TVALID = ap_const_logic_1) and (regslice_both_ddsstream_data_V_U_ack_in = ap_const_logic_1))) then 
            ddsstream_TREADY <= ap_const_logic_1;
        else 
            ddsstream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    ddsstream_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ddsstream_TREADY_int <= ap_const_logic_1;
        else 
            ddsstream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln65_1_fu_744_p2 <= "1" when (ap_sig_allocacmp_streamid_V_load = ap_const_lv2_1) else "0";
    icmp_ln65_2_fu_750_p2 <= "1" when (ap_sig_allocacmp_streamid_V_load = ap_const_lv2_0) else "0";
    icmp_ln65_fu_738_p2 <= "1" when (ap_sig_allocacmp_streamid_V_load = ap_const_lv2_2) else "0";
    icmp_ln83_fu_1191_p2 <= "0" when (tocapture_V = ap_const_lv32_0) else "1";
    icmp_ln879_fu_1197_p2 <= "1" when (select_ln65_50_reg_1564 = ap_const_lv8_0) else "0";
    icmp_ln895_1_fu_1250_p2 <= "1" when (unsigned(zext_ln81_reg_1579) > unsigned(select_ln85_reg_1588)) else "0";
    icmp_ln895_fu_1220_p2 <= "1" when (unsigned(zext_ln81_fu_1183_p1) > unsigned(tocapture_V)) else "0";

    iqout_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln83_reg_1584, ap_enable_reg_pp0_iter3, and_ln83_reg_1584_pp0_iter2_reg, iqout_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln83_reg_1584_pp0_iter2_reg)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln83_reg_1584)))) then 
            iqout_TDATA_blk_n <= iqout_TREADY_int;
        else 
            iqout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_TDATA_int <= (((((((((((((((select_ln65_2_reg_1484_pp0_iter1_reg & select_ln65_5_reg_1489_pp0_iter1_reg) & select_ln65_8_reg_1494_pp0_iter1_reg) & select_ln65_11_reg_1499_pp0_iter1_reg) & select_ln65_14_reg_1504_pp0_iter1_reg) & select_ln65_17_reg_1509_pp0_iter1_reg) & select_ln65_20_reg_1514_pp0_iter1_reg) & select_ln65_23_reg_1519_pp0_iter1_reg) & select_ln65_26_reg_1524_pp0_iter1_reg) & select_ln65_29_reg_1529_pp0_iter1_reg) & select_ln65_32_reg_1534_pp0_iter1_reg) & select_ln65_35_reg_1539_pp0_iter1_reg) & select_ln65_38_reg_1544_pp0_iter1_reg) & select_ln65_41_reg_1549_pp0_iter1_reg) & select_ln65_44_reg_1554_pp0_iter1_reg) & select_ln65_47_reg_1559_pp0_iter1_reg);
    
    iqout_TKEEP_int_proc : process(p_Result_2_6_fu_1420_p5, zext_ln248_7_fu_1440_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 11 or i < 7) then
                iqout_TKEEP_int(i) <= p_Result_2_6_fu_1420_p5(i);
            elsif (11 - i >= 5) then
                iqout_TKEEP_int(i) <= '0';
            else
                iqout_TKEEP_int(i) <= zext_ln248_7_fu_1440_p1(11 - i);
            end if;
        end loop;
    end process;

    iqout_TLAST_int <= '1' when (select_ln85_reg_1588 = ap_const_lv32_0) else '0';
    iqout_TVALID <= regslice_both_iqout_data_V_U_vld_out;

    iqout_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln83_reg_1584, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln83_reg_1584))) then 
            iqout_TVALID_int <= ap_const_logic_1;
        else 
            iqout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    keep_V_address0 <= zext_ln544_fu_1170_p1(8 - 1 downto 0);

    keep_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            keep_V_ce0 <= ap_const_logic_1;
        else 
            keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    keepval_V_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln86_fu_1254_p3),32));

    lpstream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, lpstream_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lpstream_TDATA_blk_n <= lpstream_TVALID_int;
        else 
            lpstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lpstream_TREADY_assign_proc : process(lpstream_TVALID, regslice_both_lpstream_data_V_U_ack_in)
    begin
        if (((lpstream_TVALID = ap_const_logic_1) and (regslice_both_lpstream_data_V_U_ack_in = ap_const_logic_1))) then 
            lpstream_TREADY <= ap_const_logic_1;
        else 
            lpstream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    lpstream_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lpstream_TREADY_int <= ap_const_logic_1;
        else 
            lpstream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    n_bytes_keep_fu_1175_p3 <= (keep_V_q0 & ap_const_lv2_0);
    or_ln65_fu_764_p2 <= (icmp_ln65_2_fu_750_p2 or icmp_ln65_1_fu_744_p2);
    p_Result_1_fu_1288_p3 <= keepval_V_fu_1260_p1(1 downto 1);
    
    p_Result_2_1_fu_1300_p5_proc : process(p_Result_2_fu_1276_p5, zext_ln248_1_fu_1296_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 5 or i < 1) then
                p_Result_2_1_fu_1300_p5(i) <= p_Result_2_fu_1276_p5(i);
            elsif (5 - i >= 5) then
                p_Result_2_1_fu_1300_p5(i) <= '0';
            else
                p_Result_2_1_fu_1300_p5(i) <= zext_ln248_1_fu_1296_p1(5 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_2_fu_1324_p5_proc : process(p_Result_2_1_fu_1300_p5, zext_ln248_2_fu_1320_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 6 or i < 2) then
                p_Result_2_2_fu_1324_p5(i) <= p_Result_2_1_fu_1300_p5(i);
            elsif (6 - i >= 5) then
                p_Result_2_2_fu_1324_p5(i) <= '0';
            else
                p_Result_2_2_fu_1324_p5(i) <= zext_ln248_2_fu_1320_p1(6 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_3_fu_1348_p5_proc : process(p_Result_2_2_fu_1324_p5, zext_ln248_3_fu_1344_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 7 or i < 3) then
                p_Result_2_3_fu_1348_p5(i) <= p_Result_2_2_fu_1324_p5(i);
            elsif (7 - i >= 5) then
                p_Result_2_3_fu_1348_p5(i) <= '0';
            else
                p_Result_2_3_fu_1348_p5(i) <= zext_ln248_3_fu_1344_p1(7 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_4_fu_1372_p5_proc : process(p_Result_2_3_fu_1348_p5, zext_ln248_4_fu_1368_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 8 or i < 4) then
                p_Result_2_4_fu_1372_p5(i) <= p_Result_2_3_fu_1348_p5(i);
            elsif (8 - i >= 5) then
                p_Result_2_4_fu_1372_p5(i) <= '0';
            else
                p_Result_2_4_fu_1372_p5(i) <= zext_ln248_4_fu_1368_p1(8 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_5_fu_1396_p5_proc : process(p_Result_2_4_fu_1372_p5, zext_ln248_5_fu_1392_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 9 or i < 5) then
                p_Result_2_5_fu_1396_p5(i) <= p_Result_2_4_fu_1372_p5(i);
            elsif (9 - i >= 5) then
                p_Result_2_5_fu_1396_p5(i) <= '0';
            else
                p_Result_2_5_fu_1396_p5(i) <= zext_ln248_5_fu_1392_p1(9 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_6_fu_1420_p5_proc : process(p_Result_2_5_fu_1396_p5, zext_ln248_6_fu_1416_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 10 or i < 6) then
                p_Result_2_6_fu_1420_p5(i) <= p_Result_2_5_fu_1396_p5(i);
            elsif (10 - i >= 5) then
                p_Result_2_6_fu_1420_p5(i) <= '0';
            else
                p_Result_2_6_fu_1420_p5(i) <= zext_ln248_6_fu_1416_p1(10 - i);
            end if;
        end loop;
    end process;

    
    p_Result_2_fu_1276_p5_proc : process(zext_ln248_fu_1272_p1)
    begin
        for i in 32 - 1 downto 0 loop
            if (i > 4 or i < 0) then
                p_Result_2_fu_1276_p5(i) <= ap_const_lv32_0(i);
            elsif (4 - i >= 5) then
                p_Result_2_fu_1276_p5(i) <= '0';
            else
                p_Result_2_fu_1276_p5(i) <= zext_ln248_fu_1272_p1(4 - i);
            end if;
        end loop;
    end process;

    p_Result_3_fu_1336_p3 <= keepval_V_fu_1260_p1(3 downto 3);
    p_Result_4_fu_1360_p3 <= keepval_V_fu_1260_p1(4 downto 4);
    p_Result_5_fu_1384_p3 <= keepval_V_fu_1260_p1(5 downto 5);
    p_Result_6_fu_1408_p3 <= keepval_V_fu_1260_p1(6 downto 6);
    p_Result_7_fu_1432_p3 <= keepval_V_fu_1260_p1(7 downto 7);
    p_Result_s_10_fu_1312_p3 <= keepval_V_fu_1260_p1(2 downto 2);
    p_Result_s_fu_1264_p3 <= keepval_V_fu_1260_p1(0 downto 0);

    resstream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, resstream_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            resstream_TDATA_blk_n <= resstream_TVALID_int;
        else 
            resstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    resstream_TREADY_assign_proc : process(resstream_TVALID, regslice_both_resstream_data_V_U_ack_in)
    begin
        if (((resstream_TVALID = ap_const_logic_1) and (regslice_both_resstream_data_V_U_ack_in = ap_const_logic_1))) then 
            resstream_TREADY <= ap_const_logic_1;
        else 
            resstream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    resstream_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            resstream_TREADY_int <= ap_const_logic_1;
        else 
            resstream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln65_10_fu_842_p3 <= 
        tmp_41_fu_694_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_11_fu_370_p4;
    select_ln65_11_fu_850_p3 <= 
        select_ln65_9_fu_834_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_10_fu_842_p3;
    select_ln65_12_fu_858_p3 <= 
        tmp_10_fu_360_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_25_fu_522_p4;
    select_ln65_13_fu_866_p3 <= 
        tmp_40_fu_684_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_10_fu_360_p4;
    select_ln65_14_fu_874_p3 <= 
        select_ln65_12_fu_858_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_13_fu_866_p3;
    select_ln65_15_fu_882_p3 <= 
        tmp_s_fu_350_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_24_fu_512_p4;
    select_ln65_16_fu_890_p3 <= 
        tmp_39_fu_674_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_s_fu_350_p4;
    select_ln65_17_fu_898_p3 <= 
        select_ln65_15_fu_882_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_16_fu_890_p3;
    select_ln65_18_fu_906_p3 <= 
        tmp_9_fu_340_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_23_fu_502_p4;
    select_ln65_19_fu_914_p3 <= 
        tmp_38_fu_664_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_9_fu_340_p4;
    select_ln65_1_fu_770_p3 <= 
        tmp_44_fu_724_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_14_fu_400_p4;
    select_ln65_20_fu_922_p3 <= 
        select_ln65_18_fu_906_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_19_fu_914_p3;
    select_ln65_21_fu_930_p3 <= 
        tmp_8_fu_330_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_22_fu_492_p4;
    select_ln65_22_fu_938_p3 <= 
        tmp_37_fu_654_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_8_fu_330_p4;
    select_ln65_23_fu_946_p3 <= 
        select_ln65_21_fu_930_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_22_fu_938_p3;
    select_ln65_24_fu_954_p3 <= 
        tmp_7_fu_320_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_21_fu_482_p4;
    select_ln65_25_fu_962_p3 <= 
        tmp_36_fu_644_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_7_fu_320_p4;
    select_ln65_26_fu_970_p3 <= 
        select_ln65_24_fu_954_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_25_fu_962_p3;
    select_ln65_27_fu_978_p3 <= 
        tmp_6_fu_310_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_20_fu_472_p4;
    select_ln65_28_fu_986_p3 <= 
        tmp_35_fu_634_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_6_fu_310_p4;
    select_ln65_29_fu_994_p3 <= 
        select_ln65_27_fu_978_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_28_fu_986_p3;
    select_ln65_2_fu_778_p3 <= 
        select_ln65_fu_756_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_1_fu_770_p3;
    select_ln65_30_fu_1002_p3 <= 
        tmp_5_fu_300_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_19_fu_462_p4;
    select_ln65_31_fu_1010_p3 <= 
        tmp_34_fu_624_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_5_fu_300_p4;
    select_ln65_32_fu_1018_p3 <= 
        select_ln65_30_fu_1002_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_31_fu_1010_p3;
    select_ln65_33_fu_1026_p3 <= 
        tmp_4_fu_290_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_18_fu_452_p4;
    select_ln65_34_fu_1034_p3 <= 
        tmp_33_fu_614_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_4_fu_290_p4;
    select_ln65_35_fu_1042_p3 <= 
        select_ln65_33_fu_1026_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_34_fu_1034_p3;
    select_ln65_36_fu_1050_p3 <= 
        tmp_3_fu_280_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_17_fu_442_p4;
    select_ln65_37_fu_1058_p3 <= 
        tmp_32_fu_604_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_3_fu_280_p4;
    select_ln65_38_fu_1066_p3 <= 
        select_ln65_36_fu_1050_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_37_fu_1058_p3;
    select_ln65_39_fu_1074_p3 <= 
        tmp_2_fu_270_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_16_fu_432_p4;
    select_ln65_3_fu_786_p3 <= 
        tmp_13_fu_390_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_28_fu_552_p4;
    select_ln65_40_fu_1082_p3 <= 
        tmp_31_fu_594_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_2_fu_270_p4;
    select_ln65_41_fu_1090_p3 <= 
        select_ln65_39_fu_1074_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_40_fu_1082_p3;
    select_ln65_42_fu_1098_p3 <= 
        tmp_1_fu_260_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_15_fu_422_p4;
    select_ln65_43_fu_1106_p3 <= 
        tmp_30_fu_584_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_1_fu_260_p4;
    select_ln65_44_fu_1114_p3 <= 
        select_ln65_42_fu_1098_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_43_fu_1106_p3;
    select_ln65_45_fu_1122_p3 <= 
        trunc_ln321_fu_256_p1 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        trunc_ln321_1_fu_418_p1;
    select_ln65_46_fu_1130_p3 <= 
        trunc_ln321_2_fu_580_p1 when (icmp_ln65_fu_738_p2(0) = '1') else 
        trunc_ln321_fu_256_p1;
    select_ln65_47_fu_1138_p3 <= 
        select_ln65_45_fu_1122_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_46_fu_1130_p3;
    select_ln65_48_fu_1146_p3 <= 
        lpstream_TUSER_int when (icmp_ln65_fu_738_p2(0) = '1') else 
        resstream_TUSER_int;
    select_ln65_49_fu_1154_p3 <= 
        ddsstream_TUSER_int when (icmp_ln65_1_fu_744_p2(0) = '1') else 
        select_ln65_48_fu_1146_p3;
    select_ln65_4_fu_794_p3 <= 
        tmp_43_fu_714_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_13_fu_390_p4;
    select_ln65_50_fu_1162_p3 <= 
        resstream_TUSER_int when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        select_ln65_49_fu_1154_p3;
    select_ln65_5_fu_802_p3 <= 
        select_ln65_3_fu_786_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_4_fu_794_p3;
    select_ln65_6_fu_810_p3 <= 
        tmp_12_fu_380_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_27_fu_542_p4;
    select_ln65_7_fu_818_p3 <= 
        tmp_42_fu_704_p4 when (icmp_ln65_fu_738_p2(0) = '1') else 
        tmp_12_fu_380_p4;
    select_ln65_8_fu_826_p3 <= 
        select_ln65_6_fu_810_p3 when (or_ln65_fu_764_p2(0) = '1') else 
        select_ln65_7_fu_818_p3;
    select_ln65_9_fu_834_p3 <= 
        tmp_11_fu_370_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_26_fu_532_p4;
    select_ln65_fu_756_p3 <= 
        tmp_14_fu_400_p4 when (icmp_ln65_2_fu_750_p2(0) = '1') else 
        tmp_29_fu_562_p4;
    select_ln85_fu_1232_p3 <= 
        ap_const_lv32_0 when (icmp_ln895_fu_1220_p2(0) = '1') else 
        sub_ln214_fu_1226_p2;
    select_ln86_fu_1254_p3 <= 
        trunc_ln209_reg_1594 when (icmp_ln895_1_fu_1250_p2(0) = '1') else 
        keep_V_load_reg_1574;

    streamselect_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            streamselect_V_0_ack_out <= ap_const_logic_1;
        else 
            streamselect_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln214_fu_1226_p2 <= std_logic_vector(unsigned(tocapture_V) - unsigned(zext_ln81_fu_1183_p1));
    tmp_10_fu_360_p4 <= resstream_TDATA_int(191 downto 176);
    tmp_11_fu_370_p4 <= resstream_TDATA_int(207 downto 192);
    tmp_12_fu_380_p4 <= resstream_TDATA_int(223 downto 208);
    tmp_13_fu_390_p4 <= resstream_TDATA_int(239 downto 224);
    tmp_14_fu_400_p4 <= resstream_TDATA_int(255 downto 240);
    tmp_15_fu_422_p4 <= ddsstream_TDATA_int(31 downto 16);
    tmp_16_fu_432_p4 <= ddsstream_TDATA_int(47 downto 32);
    tmp_17_fu_442_p4 <= ddsstream_TDATA_int(63 downto 48);
    tmp_18_fu_452_p4 <= ddsstream_TDATA_int(79 downto 64);
    tmp_19_fu_462_p4 <= ddsstream_TDATA_int(95 downto 80);
    tmp_1_fu_260_p4 <= resstream_TDATA_int(31 downto 16);
    tmp_20_fu_472_p4 <= ddsstream_TDATA_int(111 downto 96);
    tmp_21_fu_482_p4 <= ddsstream_TDATA_int(127 downto 112);
    tmp_22_fu_492_p4 <= ddsstream_TDATA_int(143 downto 128);
    tmp_23_fu_502_p4 <= ddsstream_TDATA_int(159 downto 144);
    tmp_24_fu_512_p4 <= ddsstream_TDATA_int(175 downto 160);
    tmp_25_fu_522_p4 <= ddsstream_TDATA_int(191 downto 176);
    tmp_26_fu_532_p4 <= ddsstream_TDATA_int(207 downto 192);
    tmp_27_fu_542_p4 <= ddsstream_TDATA_int(223 downto 208);
    tmp_28_fu_552_p4 <= ddsstream_TDATA_int(239 downto 224);
    tmp_29_fu_562_p4 <= ddsstream_TDATA_int(255 downto 240);
    tmp_2_fu_270_p4 <= resstream_TDATA_int(47 downto 32);
    tmp_30_fu_584_p4 <= lpstream_TDATA_int(31 downto 16);
    tmp_31_fu_594_p4 <= lpstream_TDATA_int(47 downto 32);
    tmp_32_fu_604_p4 <= lpstream_TDATA_int(63 downto 48);
    tmp_33_fu_614_p4 <= lpstream_TDATA_int(79 downto 64);
    tmp_34_fu_624_p4 <= lpstream_TDATA_int(95 downto 80);
    tmp_35_fu_634_p4 <= lpstream_TDATA_int(111 downto 96);
    tmp_36_fu_644_p4 <= lpstream_TDATA_int(127 downto 112);
    tmp_37_fu_654_p4 <= lpstream_TDATA_int(143 downto 128);
    tmp_38_fu_664_p4 <= lpstream_TDATA_int(159 downto 144);
    tmp_39_fu_674_p4 <= lpstream_TDATA_int(175 downto 160);
    tmp_3_fu_280_p4 <= resstream_TDATA_int(63 downto 48);
    tmp_40_fu_684_p4 <= lpstream_TDATA_int(191 downto 176);
    tmp_41_fu_694_p4 <= lpstream_TDATA_int(207 downto 192);
    tmp_42_fu_704_p4 <= lpstream_TDATA_int(223 downto 208);
    tmp_43_fu_714_p4 <= lpstream_TDATA_int(239 downto 224);
    tmp_44_fu_724_p4 <= lpstream_TDATA_int(255 downto 240);
    tmp_4_fu_290_p4 <= resstream_TDATA_int(79 downto 64);
    tmp_5_fu_300_p4 <= resstream_TDATA_int(95 downto 80);
    tmp_6_fu_310_p4 <= resstream_TDATA_int(111 downto 96);
    tmp_7_fu_320_p4 <= resstream_TDATA_int(127 downto 112);
    tmp_8_fu_330_p4 <= resstream_TDATA_int(143 downto 128);
    tmp_9_fu_340_p4 <= resstream_TDATA_int(159 downto 144);
    tmp_s_fu_350_p4 <= resstream_TDATA_int(175 downto 160);
    trunc_ln209_fu_1246_p1 <= select_ln85_fu_1232_p3(8 - 1 downto 0);
    trunc_ln321_1_fu_418_p1 <= ddsstream_TDATA_int(16 - 1 downto 0);
    trunc_ln321_2_fu_580_p1 <= lpstream_TDATA_int(16 - 1 downto 0);
    trunc_ln321_fu_256_p1 <= resstream_TDATA_int(16 - 1 downto 0);
    zext_ln248_1_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_1288_p3),5));
    zext_ln248_2_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_10_fu_1312_p3),5));
    zext_ln248_3_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_1336_p3),5));
    zext_ln248_4_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_1360_p3),5));
    zext_ln248_5_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_1384_p3),5));
    zext_ln248_6_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_fu_1408_p3),5));
    zext_ln248_7_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_1432_p3),5));
    zext_ln248_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1264_p3),5));
    zext_ln544_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_50_fu_1162_p3),64));
    zext_ln81_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_bytes_keep_fu_1175_p3),32));
end behav;
