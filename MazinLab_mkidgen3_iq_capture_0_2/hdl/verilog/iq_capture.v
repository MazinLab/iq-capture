// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iq_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.910000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=806,HLS_SYN_LUT=1237,HLS_VERSION=2019_2_1}" *)

module iq_capture (
        ap_clk,
        ap_rst_n,
        resstream_TDATA,
        resstream_TVALID,
        resstream_TREADY,
        resstream_TUSER,
        resstream_TLAST,
        ddsstream_TDATA,
        ddsstream_TVALID,
        ddsstream_TREADY,
        ddsstream_TUSER,
        ddsstream_TLAST,
        lpstream_TDATA,
        lpstream_TVALID,
        lpstream_TREADY,
        lpstream_TUSER,
        lpstream_TLAST,
        iqout_TDATA,
        iqout_TVALID,
        iqout_TREADY,
        iqout_TKEEP,
        iqout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ctrl_clk,
        ap_rst_n_ctrl_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst_n;
input  [255:0] resstream_TDATA;
input   resstream_TVALID;
output   resstream_TREADY;
input  [7:0] resstream_TUSER;
input   resstream_TLAST;
input  [255:0] ddsstream_TDATA;
input   ddsstream_TVALID;
output   ddsstream_TREADY;
input  [7:0] ddsstream_TUSER;
input   ddsstream_TLAST;
input  [255:0] lpstream_TDATA;
input   lpstream_TVALID;
output   lpstream_TREADY;
input  [7:0] lpstream_TUSER;
input   lpstream_TLAST;
output  [255:0] iqout_TDATA;
output   iqout_TVALID;
input   iqout_TREADY;
output  [31:0] iqout_TKEEP;
output   iqout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ctrl_clk;
input   ap_rst_n_ctrl_clk;

reg resstream_TREADY;
reg ddsstream_TREADY;
reg lpstream_TREADY;

 reg    ap_rst_n_inv;
wire   [7:0] keep_V_address0;
reg    keep_V_ce0;
wire   [7:0] keep_V_q0;
wire   [31:0] capturesize_V;
reg   [31:0] capturesize_V_0_data_reg;
reg    capturesize_V_0_vld_reg;
reg    capturesize_V_0_ack_out;
wire   [1:0] streamselect_V;
reg   [1:0] streamselect_V_0_data_reg;
reg    streamselect_V_0_vld_reg;
reg    streamselect_V_0_ack_out;
reg   [1:0] streamid_V;
reg   [31:0] tocapture_V;
reg    resstream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    ddsstream_TDATA_blk_n;
reg    lpstream_TDATA_blk_n;
reg    iqout_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln83_reg_1584;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln83_reg_1584_pp0_iter2_reg;
reg    ap_rst_n_ctrl_clk_inv;
wire   [15:0] select_ln65_2_fu_778_p3;
reg   [15:0] select_ln65_2_reg_1484;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    regslice_both_iqout_data_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] select_ln65_2_reg_1484_pp0_iter1_reg;
wire   [15:0] select_ln65_5_fu_802_p3;
reg   [15:0] select_ln65_5_reg_1489;
reg   [15:0] select_ln65_5_reg_1489_pp0_iter1_reg;
wire   [15:0] select_ln65_8_fu_826_p3;
reg   [15:0] select_ln65_8_reg_1494;
reg   [15:0] select_ln65_8_reg_1494_pp0_iter1_reg;
wire   [15:0] select_ln65_11_fu_850_p3;
reg   [15:0] select_ln65_11_reg_1499;
reg   [15:0] select_ln65_11_reg_1499_pp0_iter1_reg;
wire   [15:0] select_ln65_14_fu_874_p3;
reg   [15:0] select_ln65_14_reg_1504;
reg   [15:0] select_ln65_14_reg_1504_pp0_iter1_reg;
wire   [15:0] select_ln65_17_fu_898_p3;
reg   [15:0] select_ln65_17_reg_1509;
reg   [15:0] select_ln65_17_reg_1509_pp0_iter1_reg;
wire   [15:0] select_ln65_20_fu_922_p3;
reg   [15:0] select_ln65_20_reg_1514;
reg   [15:0] select_ln65_20_reg_1514_pp0_iter1_reg;
wire   [15:0] select_ln65_23_fu_946_p3;
reg   [15:0] select_ln65_23_reg_1519;
reg   [15:0] select_ln65_23_reg_1519_pp0_iter1_reg;
wire   [15:0] select_ln65_26_fu_970_p3;
reg   [15:0] select_ln65_26_reg_1524;
reg   [15:0] select_ln65_26_reg_1524_pp0_iter1_reg;
wire   [15:0] select_ln65_29_fu_994_p3;
reg   [15:0] select_ln65_29_reg_1529;
reg   [15:0] select_ln65_29_reg_1529_pp0_iter1_reg;
wire   [15:0] select_ln65_32_fu_1018_p3;
reg   [15:0] select_ln65_32_reg_1534;
reg   [15:0] select_ln65_32_reg_1534_pp0_iter1_reg;
wire   [15:0] select_ln65_35_fu_1042_p3;
reg   [15:0] select_ln65_35_reg_1539;
reg   [15:0] select_ln65_35_reg_1539_pp0_iter1_reg;
wire   [15:0] select_ln65_38_fu_1066_p3;
reg   [15:0] select_ln65_38_reg_1544;
reg   [15:0] select_ln65_38_reg_1544_pp0_iter1_reg;
wire   [15:0] select_ln65_41_fu_1090_p3;
reg   [15:0] select_ln65_41_reg_1549;
reg   [15:0] select_ln65_41_reg_1549_pp0_iter1_reg;
wire   [15:0] select_ln65_44_fu_1114_p3;
reg   [15:0] select_ln65_44_reg_1554;
reg   [15:0] select_ln65_44_reg_1554_pp0_iter1_reg;
wire   [15:0] select_ln65_47_fu_1138_p3;
reg   [15:0] select_ln65_47_reg_1559;
reg   [15:0] select_ln65_47_reg_1559_pp0_iter1_reg;
wire   [7:0] select_ln65_50_fu_1162_p3;
reg   [7:0] select_ln65_50_reg_1564;
reg   [7:0] keep_V_load_reg_1574;
wire   [31:0] zext_ln81_fu_1183_p1;
reg   [31:0] zext_ln81_reg_1579;
wire   [0:0] and_ln83_fu_1202_p2;
wire   [31:0] select_ln85_fu_1232_p3;
reg   [31:0] select_ln85_reg_1588;
wire   [7:0] trunc_ln209_fu_1246_p1;
reg   [7:0] trunc_ln209_reg_1594;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_1170_p1;
reg   [1:0] ap_sig_allocacmp_streamid_V_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln65_2_fu_750_p2;
wire   [15:0] tmp_14_fu_400_p4;
wire   [15:0] tmp_29_fu_562_p4;
wire   [0:0] icmp_ln65_1_fu_744_p2;
wire   [0:0] icmp_ln65_fu_738_p2;
wire   [15:0] tmp_44_fu_724_p4;
wire   [0:0] or_ln65_fu_764_p2;
wire   [15:0] select_ln65_fu_756_p3;
wire   [15:0] select_ln65_1_fu_770_p3;
wire   [15:0] tmp_13_fu_390_p4;
wire   [15:0] tmp_28_fu_552_p4;
wire   [15:0] tmp_43_fu_714_p4;
wire   [15:0] select_ln65_3_fu_786_p3;
wire   [15:0] select_ln65_4_fu_794_p3;
wire   [15:0] tmp_12_fu_380_p4;
wire   [15:0] tmp_27_fu_542_p4;
wire   [15:0] tmp_42_fu_704_p4;
wire   [15:0] select_ln65_6_fu_810_p3;
wire   [15:0] select_ln65_7_fu_818_p3;
wire   [15:0] tmp_11_fu_370_p4;
wire   [15:0] tmp_26_fu_532_p4;
wire   [15:0] tmp_41_fu_694_p4;
wire   [15:0] select_ln65_9_fu_834_p3;
wire   [15:0] select_ln65_10_fu_842_p3;
wire   [15:0] tmp_10_fu_360_p4;
wire   [15:0] tmp_25_fu_522_p4;
wire   [15:0] tmp_40_fu_684_p4;
wire   [15:0] select_ln65_12_fu_858_p3;
wire   [15:0] select_ln65_13_fu_866_p3;
wire   [15:0] tmp_s_fu_350_p4;
wire   [15:0] tmp_24_fu_512_p4;
wire   [15:0] tmp_39_fu_674_p4;
wire   [15:0] select_ln65_15_fu_882_p3;
wire   [15:0] select_ln65_16_fu_890_p3;
wire   [15:0] tmp_9_fu_340_p4;
wire   [15:0] tmp_23_fu_502_p4;
wire   [15:0] tmp_38_fu_664_p4;
wire   [15:0] select_ln65_18_fu_906_p3;
wire   [15:0] select_ln65_19_fu_914_p3;
wire   [15:0] tmp_8_fu_330_p4;
wire   [15:0] tmp_22_fu_492_p4;
wire   [15:0] tmp_37_fu_654_p4;
wire   [15:0] select_ln65_21_fu_930_p3;
wire   [15:0] select_ln65_22_fu_938_p3;
wire   [15:0] tmp_7_fu_320_p4;
wire   [15:0] tmp_21_fu_482_p4;
wire   [15:0] tmp_36_fu_644_p4;
wire   [15:0] select_ln65_24_fu_954_p3;
wire   [15:0] select_ln65_25_fu_962_p3;
wire   [15:0] tmp_6_fu_310_p4;
wire   [15:0] tmp_20_fu_472_p4;
wire   [15:0] tmp_35_fu_634_p4;
wire   [15:0] select_ln65_27_fu_978_p3;
wire   [15:0] select_ln65_28_fu_986_p3;
wire   [15:0] tmp_5_fu_300_p4;
wire   [15:0] tmp_19_fu_462_p4;
wire   [15:0] tmp_34_fu_624_p4;
wire   [15:0] select_ln65_30_fu_1002_p3;
wire   [15:0] select_ln65_31_fu_1010_p3;
wire   [15:0] tmp_4_fu_290_p4;
wire   [15:0] tmp_18_fu_452_p4;
wire   [15:0] tmp_33_fu_614_p4;
wire   [15:0] select_ln65_33_fu_1026_p3;
wire   [15:0] select_ln65_34_fu_1034_p3;
wire   [15:0] tmp_3_fu_280_p4;
wire   [15:0] tmp_17_fu_442_p4;
wire   [15:0] tmp_32_fu_604_p4;
wire   [15:0] select_ln65_36_fu_1050_p3;
wire   [15:0] select_ln65_37_fu_1058_p3;
wire   [15:0] tmp_2_fu_270_p4;
wire   [15:0] tmp_16_fu_432_p4;
wire   [15:0] tmp_31_fu_594_p4;
wire   [15:0] select_ln65_39_fu_1074_p3;
wire   [15:0] select_ln65_40_fu_1082_p3;
wire   [15:0] tmp_1_fu_260_p4;
wire   [15:0] tmp_15_fu_422_p4;
wire   [15:0] tmp_30_fu_584_p4;
wire   [15:0] select_ln65_42_fu_1098_p3;
wire   [15:0] select_ln65_43_fu_1106_p3;
wire   [15:0] trunc_ln321_fu_256_p1;
wire   [15:0] trunc_ln321_1_fu_418_p1;
wire   [15:0] trunc_ln321_2_fu_580_p1;
wire   [15:0] select_ln65_45_fu_1122_p3;
wire   [15:0] select_ln65_46_fu_1130_p3;
wire   [7:0] select_ln65_48_fu_1146_p3;
wire   [7:0] select_ln65_49_fu_1154_p3;
wire   [9:0] n_bytes_keep_fu_1175_p3;
wire   [0:0] icmp_ln83_fu_1191_p2;
wire   [0:0] icmp_ln879_fu_1197_p2;
wire   [0:0] icmp_ln895_fu_1220_p2;
wire   [31:0] sub_ln214_fu_1226_p2;
wire   [0:0] icmp_ln895_1_fu_1250_p2;
wire   [7:0] select_ln86_fu_1254_p3;
wire   [31:0] keepval_V_fu_1260_p1;
wire   [0:0] p_Result_s_fu_1264_p3;
wire   [4:0] zext_ln248_fu_1272_p1;
wire   [0:0] p_Result_1_fu_1288_p3;
reg   [31:0] p_Result_2_fu_1276_p5;
wire   [4:0] zext_ln248_1_fu_1296_p1;
wire   [0:0] p_Result_s_10_fu_1312_p3;
reg   [31:0] p_Result_2_1_fu_1300_p5;
wire   [4:0] zext_ln248_2_fu_1320_p1;
wire   [0:0] p_Result_3_fu_1336_p3;
reg   [31:0] p_Result_2_2_fu_1324_p5;
wire   [4:0] zext_ln248_3_fu_1344_p1;
wire   [0:0] p_Result_4_fu_1360_p3;
reg   [31:0] p_Result_2_3_fu_1348_p5;
wire   [4:0] zext_ln248_4_fu_1368_p1;
wire   [0:0] p_Result_5_fu_1384_p3;
reg   [31:0] p_Result_2_4_fu_1372_p5;
wire   [4:0] zext_ln248_5_fu_1392_p1;
wire   [0:0] p_Result_6_fu_1408_p3;
reg   [31:0] p_Result_2_5_fu_1396_p5;
wire   [4:0] zext_ln248_6_fu_1416_p1;
wire   [0:0] p_Result_7_fu_1432_p3;
reg   [31:0] p_Result_2_6_fu_1420_p5;
wire   [4:0] zext_ln248_7_fu_1440_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_resstream_data_V_U_apdone_blk;
wire   [255:0] resstream_TDATA_int;
wire    resstream_TVALID_int;
reg    resstream_TREADY_int;
wire    regslice_both_resstream_data_V_U_ack_in;
wire    regslice_both_resstream_user_V_U_apdone_blk;
wire   [7:0] resstream_TUSER_int;
wire    regslice_both_resstream_user_V_U_vld_out;
wire    regslice_both_resstream_user_V_U_ack_in;
wire    regslice_both_w1_resstream_last_U_apdone_blk;
wire    resstream_TLAST_int;
wire    regslice_both_w1_resstream_last_U_vld_out;
wire    regslice_both_w1_resstream_last_U_ack_in;
wire    regslice_both_ddsstream_data_V_U_apdone_blk;
wire   [255:0] ddsstream_TDATA_int;
wire    ddsstream_TVALID_int;
reg    ddsstream_TREADY_int;
wire    regslice_both_ddsstream_data_V_U_ack_in;
wire    regslice_both_ddsstream_user_V_U_apdone_blk;
wire   [7:0] ddsstream_TUSER_int;
wire    regslice_both_ddsstream_user_V_U_vld_out;
wire    regslice_both_ddsstream_user_V_U_ack_in;
wire    regslice_both_w1_ddsstream_last_U_apdone_blk;
wire    ddsstream_TLAST_int;
wire    regslice_both_w1_ddsstream_last_U_vld_out;
wire    regslice_both_w1_ddsstream_last_U_ack_in;
wire    regslice_both_lpstream_data_V_U_apdone_blk;
wire   [255:0] lpstream_TDATA_int;
wire    lpstream_TVALID_int;
reg    lpstream_TREADY_int;
wire    regslice_both_lpstream_data_V_U_ack_in;
wire    regslice_both_lpstream_user_V_U_apdone_blk;
wire   [7:0] lpstream_TUSER_int;
wire    regslice_both_lpstream_user_V_U_vld_out;
wire    regslice_both_lpstream_user_V_U_ack_in;
wire    regslice_both_w1_lpstream_last_U_apdone_blk;
wire    lpstream_TLAST_int;
wire    regslice_both_w1_lpstream_last_U_vld_out;
wire    regslice_both_w1_lpstream_last_U_ack_in;
wire   [255:0] iqout_TDATA_int;
reg    iqout_TVALID_int;
wire    iqout_TREADY_int;
wire    regslice_both_iqout_data_V_U_vld_out;
wire    regslice_both_iqout_keep_V_U_apdone_blk;
reg   [31:0] iqout_TKEEP_int;
wire    regslice_both_iqout_keep_V_U_ack_in_dummy;
wire    regslice_both_iqout_keep_V_U_vld_out;
wire    regslice_both_w1_iqout_last_U_apdone_blk;
wire    iqout_TLAST_int;
wire    regslice_both_w1_iqout_last_U_ack_in_dummy;
wire    regslice_both_w1_iqout_last_U_vld_out;
reg    ap_condition_276;

// power-on initialization
initial begin
#0 capturesize_V_0_data_reg = 32'd0;
#0 capturesize_V_0_vld_reg = 1'b0;
#0 streamselect_V_0_data_reg = 2'd0;
#0 streamselect_V_0_vld_reg = 1'b0;
#0 streamid_V = 2'd0;
#0 tocapture_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

iq_capture_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
iq_capture_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ctrl_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .keep_V_address0(keep_V_address0),
    .keep_V_ce0(keep_V_ce0),
    .keep_V_q0(keep_V_q0),
    .capturesize_V(capturesize_V),
    .streamselect_V(streamselect_V),
    .clk(ap_clk),
    .rst(ap_rst_n_ctrl_clk_inv)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_resstream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TDATA),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_data_V_U_ack_in),
    .data_out(resstream_TDATA_int),
    .vld_out(resstream_TVALID_int),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_resstream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_resstream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TUSER),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_user_V_U_ack_in),
    .data_out(resstream_TUSER_int),
    .vld_out(regslice_both_resstream_user_V_U_vld_out),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_resstream_user_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_resstream_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TLAST),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_w1_resstream_last_U_ack_in),
    .data_out(resstream_TLAST_int),
    .vld_out(regslice_both_w1_resstream_last_U_vld_out),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_w1_resstream_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_ddsstream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ddsstream_TDATA),
    .vld_in(ddsstream_TVALID),
    .ack_in(regslice_both_ddsstream_data_V_U_ack_in),
    .data_out(ddsstream_TDATA_int),
    .vld_out(ddsstream_TVALID_int),
    .ack_out(ddsstream_TREADY_int),
    .apdone_blk(regslice_both_ddsstream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_ddsstream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ddsstream_TUSER),
    .vld_in(ddsstream_TVALID),
    .ack_in(regslice_both_ddsstream_user_V_U_ack_in),
    .data_out(ddsstream_TUSER_int),
    .vld_out(regslice_both_ddsstream_user_V_U_vld_out),
    .ack_out(ddsstream_TREADY_int),
    .apdone_blk(regslice_both_ddsstream_user_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_ddsstream_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ddsstream_TLAST),
    .vld_in(ddsstream_TVALID),
    .ack_in(regslice_both_w1_ddsstream_last_U_ack_in),
    .data_out(ddsstream_TLAST_int),
    .vld_out(regslice_both_w1_ddsstream_last_U_vld_out),
    .ack_out(ddsstream_TREADY_int),
    .apdone_blk(regslice_both_w1_ddsstream_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_lpstream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(lpstream_TDATA),
    .vld_in(lpstream_TVALID),
    .ack_in(regslice_both_lpstream_data_V_U_ack_in),
    .data_out(lpstream_TDATA_int),
    .vld_out(lpstream_TVALID_int),
    .ack_out(lpstream_TREADY_int),
    .apdone_blk(regslice_both_lpstream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_lpstream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(lpstream_TUSER),
    .vld_in(lpstream_TVALID),
    .ack_in(regslice_both_lpstream_user_V_U_ack_in),
    .data_out(lpstream_TUSER_int),
    .vld_out(regslice_both_lpstream_user_V_U_vld_out),
    .ack_out(lpstream_TREADY_int),
    .apdone_blk(regslice_both_lpstream_user_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_lpstream_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(lpstream_TLAST),
    .vld_in(lpstream_TVALID),
    .ack_in(regslice_both_w1_lpstream_last_U_ack_in),
    .data_out(lpstream_TLAST_int),
    .vld_out(regslice_both_w1_lpstream_last_U_vld_out),
    .ack_out(lpstream_TREADY_int),
    .apdone_blk(regslice_both_w1_lpstream_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_iqout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TDATA_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(iqout_TREADY_int),
    .data_out(iqout_TDATA),
    .vld_out(regslice_both_iqout_data_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_iqout_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TKEEP_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_iqout_keep_V_U_ack_in_dummy),
    .data_out(iqout_TKEEP),
    .vld_out(regslice_both_iqout_keep_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_keep_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iqout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TLAST_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_w1_iqout_last_U_ack_in_dummy),
    .data_out(iqout_TLAST),
    .vld_out(regslice_both_w1_iqout_last_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_w1_iqout_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_276)) begin
        if ((1'd1 == and_ln83_fu_1202_p2)) begin
            tocapture_V <= select_ln85_fu_1232_p3;
        end else if ((1'd0 == and_ln83_fu_1202_p2)) begin
            tocapture_V <= capturesize_V_0_data_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln83_reg_1584 <= and_ln83_fu_1202_p2;
        keep_V_load_reg_1574 <= keep_V_q0;
        select_ln65_11_reg_1499 <= select_ln65_11_fu_850_p3;
        select_ln65_11_reg_1499_pp0_iter1_reg <= select_ln65_11_reg_1499;
        select_ln65_14_reg_1504 <= select_ln65_14_fu_874_p3;
        select_ln65_14_reg_1504_pp0_iter1_reg <= select_ln65_14_reg_1504;
        select_ln65_17_reg_1509 <= select_ln65_17_fu_898_p3;
        select_ln65_17_reg_1509_pp0_iter1_reg <= select_ln65_17_reg_1509;
        select_ln65_20_reg_1514 <= select_ln65_20_fu_922_p3;
        select_ln65_20_reg_1514_pp0_iter1_reg <= select_ln65_20_reg_1514;
        select_ln65_23_reg_1519 <= select_ln65_23_fu_946_p3;
        select_ln65_23_reg_1519_pp0_iter1_reg <= select_ln65_23_reg_1519;
        select_ln65_26_reg_1524 <= select_ln65_26_fu_970_p3;
        select_ln65_26_reg_1524_pp0_iter1_reg <= select_ln65_26_reg_1524;
        select_ln65_29_reg_1529 <= select_ln65_29_fu_994_p3;
        select_ln65_29_reg_1529_pp0_iter1_reg <= select_ln65_29_reg_1529;
        select_ln65_2_reg_1484 <= select_ln65_2_fu_778_p3;
        select_ln65_2_reg_1484_pp0_iter1_reg <= select_ln65_2_reg_1484;
        select_ln65_32_reg_1534 <= select_ln65_32_fu_1018_p3;
        select_ln65_32_reg_1534_pp0_iter1_reg <= select_ln65_32_reg_1534;
        select_ln65_35_reg_1539 <= select_ln65_35_fu_1042_p3;
        select_ln65_35_reg_1539_pp0_iter1_reg <= select_ln65_35_reg_1539;
        select_ln65_38_reg_1544 <= select_ln65_38_fu_1066_p3;
        select_ln65_38_reg_1544_pp0_iter1_reg <= select_ln65_38_reg_1544;
        select_ln65_41_reg_1549 <= select_ln65_41_fu_1090_p3;
        select_ln65_41_reg_1549_pp0_iter1_reg <= select_ln65_41_reg_1549;
        select_ln65_44_reg_1554 <= select_ln65_44_fu_1114_p3;
        select_ln65_44_reg_1554_pp0_iter1_reg <= select_ln65_44_reg_1554;
        select_ln65_47_reg_1559 <= select_ln65_47_fu_1138_p3;
        select_ln65_47_reg_1559_pp0_iter1_reg <= select_ln65_47_reg_1559;
        select_ln65_50_reg_1564 <= select_ln65_50_fu_1162_p3;
        select_ln65_5_reg_1489 <= select_ln65_5_fu_802_p3;
        select_ln65_5_reg_1489_pp0_iter1_reg <= select_ln65_5_reg_1489;
        select_ln65_8_reg_1494 <= select_ln65_8_fu_826_p3;
        select_ln65_8_reg_1494_pp0_iter1_reg <= select_ln65_8_reg_1494;
        zext_ln81_reg_1579[9 : 2] <= zext_ln81_fu_1183_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln83_reg_1584_pp0_iter2_reg <= and_ln83_reg_1584;
    end
end

always @ (posedge ap_clk) begin
    if ((((capturesize_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((capturesize_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (capturesize_V_0_vld_reg == 1'b1)))) begin
        capturesize_V_0_data_reg <= capturesize_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln83_fu_1202_p2))) begin
        select_ln85_reg_1588 <= select_ln85_fu_1232_p3;
        trunc_ln209_reg_1594 <= trunc_ln209_fu_1246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln83_fu_1202_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        streamid_V <= streamselect_V_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((streamselect_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((streamselect_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (streamselect_V_0_vld_reg == 1'b1)))) begin
        streamselect_V_0_data_reg <= streamselect_V;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd0 == and_ln83_fu_1202_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_streamid_V_load = streamselect_V_0_data_reg;
    end else begin
        ap_sig_allocacmp_streamid_V_load = streamid_V;
    end
end

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        capturesize_V_0_ack_out = 1'b1;
    end else begin
        capturesize_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ddsstream_TDATA_blk_n = ddsstream_TVALID_int;
    end else begin
        ddsstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ddsstream_TVALID == 1'b1) & (regslice_both_ddsstream_data_V_U_ack_in == 1'b1))) begin
        ddsstream_TREADY = 1'b1;
    end else begin
        ddsstream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ddsstream_TREADY_int = 1'b1;
    end else begin
        ddsstream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln83_reg_1584_pp0_iter2_reg)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln83_reg_1584)))) begin
        iqout_TDATA_blk_n = iqout_TREADY_int;
    end else begin
        iqout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln83_reg_1584))) begin
        iqout_TVALID_int = 1'b1;
    end else begin
        iqout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keep_V_ce0 = 1'b1;
    end else begin
        keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lpstream_TDATA_blk_n = lpstream_TVALID_int;
    end else begin
        lpstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((lpstream_TVALID == 1'b1) & (regslice_both_lpstream_data_V_U_ack_in == 1'b1))) begin
        lpstream_TREADY = 1'b1;
    end else begin
        lpstream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lpstream_TREADY_int = 1'b1;
    end else begin
        lpstream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TDATA_blk_n = resstream_TVALID_int;
    end else begin
        resstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((resstream_TVALID == 1'b1) & (regslice_both_resstream_data_V_U_ack_in == 1'b1))) begin
        resstream_TREADY = 1'b1;
    end else begin
        resstream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        resstream_TREADY_int = 1'b1;
    end else begin
        resstream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        streamselect_V_0_ack_out = 1'b1;
    end else begin
        streamselect_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln83_fu_1202_p2 = (icmp_ln879_fu_1197_p2 & icmp_ln83_fu_1191_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == 1'b1) & ((lpstream_TVALID_int == 1'b0) | (ddsstream_TVALID_int == 1'b0) | (resstream_TVALID_int == 1'b0))) | ((regslice_both_iqout_data_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == 1'b1) & ((lpstream_TVALID_int == 1'b0) | (ddsstream_TVALID_int == 1'b0) | (resstream_TVALID_int == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_iqout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == 1'b1) & ((lpstream_TVALID_int == 1'b0) | (ddsstream_TVALID_int == 1'b0) | (resstream_TVALID_int == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_iqout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((lpstream_TVALID_int == 1'b0) | (ddsstream_TVALID_int == 1'b0) | (resstream_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((iqout_TREADY_int == 1'b0) & (1'd1 == and_ln83_reg_1584));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((iqout_TREADY_int == 1'b0) & (1'd1 == and_ln83_reg_1584_pp0_iter2_reg));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (regslice_both_iqout_data_V_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_condition_276 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_ctrl_clk_inv = ~ap_rst_n_ctrl_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln65_1_fu_744_p2 = ((ap_sig_allocacmp_streamid_V_load == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_750_p2 = ((ap_sig_allocacmp_streamid_V_load == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_738_p2 = ((ap_sig_allocacmp_streamid_V_load == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_1191_p2 = ((tocapture_V != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1197_p2 = ((select_ln65_50_reg_1564 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_1250_p2 = ((zext_ln81_reg_1579 > select_ln85_reg_1588) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_1220_p2 = ((zext_ln81_fu_1183_p1 > tocapture_V) ? 1'b1 : 1'b0);

assign iqout_TDATA_int = {{{{{{{{{{{{{{{{select_ln65_2_reg_1484_pp0_iter1_reg}, {select_ln65_5_reg_1489_pp0_iter1_reg}}, {select_ln65_8_reg_1494_pp0_iter1_reg}}, {select_ln65_11_reg_1499_pp0_iter1_reg}}, {select_ln65_14_reg_1504_pp0_iter1_reg}}, {select_ln65_17_reg_1509_pp0_iter1_reg}}, {select_ln65_20_reg_1514_pp0_iter1_reg}}, {select_ln65_23_reg_1519_pp0_iter1_reg}}, {select_ln65_26_reg_1524_pp0_iter1_reg}}, {select_ln65_29_reg_1529_pp0_iter1_reg}}, {select_ln65_32_reg_1534_pp0_iter1_reg}}, {select_ln65_35_reg_1539_pp0_iter1_reg}}, {select_ln65_38_reg_1544_pp0_iter1_reg}}, {select_ln65_41_reg_1549_pp0_iter1_reg}}, {select_ln65_44_reg_1554_pp0_iter1_reg}}, {select_ln65_47_reg_1559_pp0_iter1_reg}};

integer ap_tvar_int_0;

always @ (p_Result_2_6_fu_1420_p5 or zext_ln248_7_fu_1440_p1) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 | ap_tvar_int_0 < 7) begin
            iqout_TKEEP_int[ap_tvar_int_0] = p_Result_2_6_fu_1420_p5[ap_tvar_int_0];
        end else if (11 - ap_tvar_int_0 >= 5) begin
            iqout_TKEEP_int[ap_tvar_int_0] = 1'b0;
        end else begin
            iqout_TKEEP_int[ap_tvar_int_0] = zext_ln248_7_fu_1440_p1[11 - ap_tvar_int_0];
        end
    end
end

assign iqout_TLAST_int = ((select_ln85_reg_1588 == 32'd0) ? 1'b1 : 1'b0);

assign iqout_TVALID = regslice_both_iqout_data_V_U_vld_out;

assign keep_V_address0 = zext_ln544_fu_1170_p1;

assign keepval_V_fu_1260_p1 = select_ln86_fu_1254_p3;

assign n_bytes_keep_fu_1175_p3 = {{keep_V_q0}, {2'd0}};

assign or_ln65_fu_764_p2 = (icmp_ln65_2_fu_750_p2 | icmp_ln65_1_fu_744_p2);

assign p_Result_1_fu_1288_p3 = keepval_V_fu_1260_p1[32'd1];

integer ap_tvar_int_1;

always @ (p_Result_2_fu_1276_p5 or zext_ln248_1_fu_1296_p1) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 5 | ap_tvar_int_1 < 1) begin
            p_Result_2_1_fu_1300_p5[ap_tvar_int_1] = p_Result_2_fu_1276_p5[ap_tvar_int_1];
        end else if (5 - ap_tvar_int_1 >= 5) begin
            p_Result_2_1_fu_1300_p5[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_2_1_fu_1300_p5[ap_tvar_int_1] = zext_ln248_1_fu_1296_p1[5 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Result_2_1_fu_1300_p5 or zext_ln248_2_fu_1320_p1) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 6 | ap_tvar_int_2 < 2) begin
            p_Result_2_2_fu_1324_p5[ap_tvar_int_2] = p_Result_2_1_fu_1300_p5[ap_tvar_int_2];
        end else if (6 - ap_tvar_int_2 >= 5) begin
            p_Result_2_2_fu_1324_p5[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_2_2_fu_1324_p5[ap_tvar_int_2] = zext_ln248_2_fu_1320_p1[6 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_Result_2_2_fu_1324_p5 or zext_ln248_3_fu_1344_p1) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 7 | ap_tvar_int_3 < 3) begin
            p_Result_2_3_fu_1348_p5[ap_tvar_int_3] = p_Result_2_2_fu_1324_p5[ap_tvar_int_3];
        end else if (7 - ap_tvar_int_3 >= 5) begin
            p_Result_2_3_fu_1348_p5[ap_tvar_int_3] = 1'b0;
        end else begin
            p_Result_2_3_fu_1348_p5[ap_tvar_int_3] = zext_ln248_3_fu_1344_p1[7 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (p_Result_2_3_fu_1348_p5 or zext_ln248_4_fu_1368_p1) begin
    for (ap_tvar_int_4 = 32 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 8 | ap_tvar_int_4 < 4) begin
            p_Result_2_4_fu_1372_p5[ap_tvar_int_4] = p_Result_2_3_fu_1348_p5[ap_tvar_int_4];
        end else if (8 - ap_tvar_int_4 >= 5) begin
            p_Result_2_4_fu_1372_p5[ap_tvar_int_4] = 1'b0;
        end else begin
            p_Result_2_4_fu_1372_p5[ap_tvar_int_4] = zext_ln248_4_fu_1368_p1[8 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (p_Result_2_4_fu_1372_p5 or zext_ln248_5_fu_1392_p1) begin
    for (ap_tvar_int_5 = 32 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 9 | ap_tvar_int_5 < 5) begin
            p_Result_2_5_fu_1396_p5[ap_tvar_int_5] = p_Result_2_4_fu_1372_p5[ap_tvar_int_5];
        end else if (9 - ap_tvar_int_5 >= 5) begin
            p_Result_2_5_fu_1396_p5[ap_tvar_int_5] = 1'b0;
        end else begin
            p_Result_2_5_fu_1396_p5[ap_tvar_int_5] = zext_ln248_5_fu_1392_p1[9 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (p_Result_2_5_fu_1396_p5 or zext_ln248_6_fu_1416_p1) begin
    for (ap_tvar_int_6 = 32 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 10 | ap_tvar_int_6 < 6) begin
            p_Result_2_6_fu_1420_p5[ap_tvar_int_6] = p_Result_2_5_fu_1396_p5[ap_tvar_int_6];
        end else if (10 - ap_tvar_int_6 >= 5) begin
            p_Result_2_6_fu_1420_p5[ap_tvar_int_6] = 1'b0;
        end else begin
            p_Result_2_6_fu_1420_p5[ap_tvar_int_6] = zext_ln248_6_fu_1416_p1[10 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (zext_ln248_fu_1272_p1) begin
    for (ap_tvar_int_7 = 32 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 4 | ap_tvar_int_7 < 0) begin
            p_Result_2_fu_1276_p5[ap_tvar_int_7] = ap_const_lv32_0[ap_tvar_int_7];
        end else if (4 - ap_tvar_int_7 >= 5) begin
            p_Result_2_fu_1276_p5[ap_tvar_int_7] = 1'b0;
        end else begin
            p_Result_2_fu_1276_p5[ap_tvar_int_7] = zext_ln248_fu_1272_p1[4 - ap_tvar_int_7];
        end
    end
end

assign p_Result_3_fu_1336_p3 = keepval_V_fu_1260_p1[32'd3];

assign p_Result_4_fu_1360_p3 = keepval_V_fu_1260_p1[32'd4];

assign p_Result_5_fu_1384_p3 = keepval_V_fu_1260_p1[32'd5];

assign p_Result_6_fu_1408_p3 = keepval_V_fu_1260_p1[32'd6];

assign p_Result_7_fu_1432_p3 = keepval_V_fu_1260_p1[32'd7];

assign p_Result_s_10_fu_1312_p3 = keepval_V_fu_1260_p1[32'd2];

assign p_Result_s_fu_1264_p3 = keepval_V_fu_1260_p1[32'd0];

assign select_ln65_10_fu_842_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_41_fu_694_p4 : tmp_11_fu_370_p4);

assign select_ln65_11_fu_850_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_9_fu_834_p3 : select_ln65_10_fu_842_p3);

assign select_ln65_12_fu_858_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_10_fu_360_p4 : tmp_25_fu_522_p4);

assign select_ln65_13_fu_866_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_40_fu_684_p4 : tmp_10_fu_360_p4);

assign select_ln65_14_fu_874_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_12_fu_858_p3 : select_ln65_13_fu_866_p3);

assign select_ln65_15_fu_882_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_s_fu_350_p4 : tmp_24_fu_512_p4);

assign select_ln65_16_fu_890_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_39_fu_674_p4 : tmp_s_fu_350_p4);

assign select_ln65_17_fu_898_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_15_fu_882_p3 : select_ln65_16_fu_890_p3);

assign select_ln65_18_fu_906_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_9_fu_340_p4 : tmp_23_fu_502_p4);

assign select_ln65_19_fu_914_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_38_fu_664_p4 : tmp_9_fu_340_p4);

assign select_ln65_1_fu_770_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_44_fu_724_p4 : tmp_14_fu_400_p4);

assign select_ln65_20_fu_922_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_18_fu_906_p3 : select_ln65_19_fu_914_p3);

assign select_ln65_21_fu_930_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_8_fu_330_p4 : tmp_22_fu_492_p4);

assign select_ln65_22_fu_938_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_37_fu_654_p4 : tmp_8_fu_330_p4);

assign select_ln65_23_fu_946_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_21_fu_930_p3 : select_ln65_22_fu_938_p3);

assign select_ln65_24_fu_954_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_7_fu_320_p4 : tmp_21_fu_482_p4);

assign select_ln65_25_fu_962_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_36_fu_644_p4 : tmp_7_fu_320_p4);

assign select_ln65_26_fu_970_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_24_fu_954_p3 : select_ln65_25_fu_962_p3);

assign select_ln65_27_fu_978_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_6_fu_310_p4 : tmp_20_fu_472_p4);

assign select_ln65_28_fu_986_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_35_fu_634_p4 : tmp_6_fu_310_p4);

assign select_ln65_29_fu_994_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_27_fu_978_p3 : select_ln65_28_fu_986_p3);

assign select_ln65_2_fu_778_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_fu_756_p3 : select_ln65_1_fu_770_p3);

assign select_ln65_30_fu_1002_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_5_fu_300_p4 : tmp_19_fu_462_p4);

assign select_ln65_31_fu_1010_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_34_fu_624_p4 : tmp_5_fu_300_p4);

assign select_ln65_32_fu_1018_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_30_fu_1002_p3 : select_ln65_31_fu_1010_p3);

assign select_ln65_33_fu_1026_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_4_fu_290_p4 : tmp_18_fu_452_p4);

assign select_ln65_34_fu_1034_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_33_fu_614_p4 : tmp_4_fu_290_p4);

assign select_ln65_35_fu_1042_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_33_fu_1026_p3 : select_ln65_34_fu_1034_p3);

assign select_ln65_36_fu_1050_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_3_fu_280_p4 : tmp_17_fu_442_p4);

assign select_ln65_37_fu_1058_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_32_fu_604_p4 : tmp_3_fu_280_p4);

assign select_ln65_38_fu_1066_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_36_fu_1050_p3 : select_ln65_37_fu_1058_p3);

assign select_ln65_39_fu_1074_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_2_fu_270_p4 : tmp_16_fu_432_p4);

assign select_ln65_3_fu_786_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_13_fu_390_p4 : tmp_28_fu_552_p4);

assign select_ln65_40_fu_1082_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_31_fu_594_p4 : tmp_2_fu_270_p4);

assign select_ln65_41_fu_1090_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_39_fu_1074_p3 : select_ln65_40_fu_1082_p3);

assign select_ln65_42_fu_1098_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_1_fu_260_p4 : tmp_15_fu_422_p4);

assign select_ln65_43_fu_1106_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_30_fu_584_p4 : tmp_1_fu_260_p4);

assign select_ln65_44_fu_1114_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_42_fu_1098_p3 : select_ln65_43_fu_1106_p3);

assign select_ln65_45_fu_1122_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? trunc_ln321_fu_256_p1 : trunc_ln321_1_fu_418_p1);

assign select_ln65_46_fu_1130_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? trunc_ln321_2_fu_580_p1 : trunc_ln321_fu_256_p1);

assign select_ln65_47_fu_1138_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_45_fu_1122_p3 : select_ln65_46_fu_1130_p3);

assign select_ln65_48_fu_1146_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? lpstream_TUSER_int : resstream_TUSER_int);

assign select_ln65_49_fu_1154_p3 = ((icmp_ln65_1_fu_744_p2[0:0] === 1'b1) ? ddsstream_TUSER_int : select_ln65_48_fu_1146_p3);

assign select_ln65_4_fu_794_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_43_fu_714_p4 : tmp_13_fu_390_p4);

assign select_ln65_50_fu_1162_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? resstream_TUSER_int : select_ln65_49_fu_1154_p3);

assign select_ln65_5_fu_802_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_3_fu_786_p3 : select_ln65_4_fu_794_p3);

assign select_ln65_6_fu_810_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_12_fu_380_p4 : tmp_27_fu_542_p4);

assign select_ln65_7_fu_818_p3 = ((icmp_ln65_fu_738_p2[0:0] === 1'b1) ? tmp_42_fu_704_p4 : tmp_12_fu_380_p4);

assign select_ln65_8_fu_826_p3 = ((or_ln65_fu_764_p2[0:0] === 1'b1) ? select_ln65_6_fu_810_p3 : select_ln65_7_fu_818_p3);

assign select_ln65_9_fu_834_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_11_fu_370_p4 : tmp_26_fu_532_p4);

assign select_ln65_fu_756_p3 = ((icmp_ln65_2_fu_750_p2[0:0] === 1'b1) ? tmp_14_fu_400_p4 : tmp_29_fu_562_p4);

assign select_ln85_fu_1232_p3 = ((icmp_ln895_fu_1220_p2[0:0] === 1'b1) ? 32'd0 : sub_ln214_fu_1226_p2);

assign select_ln86_fu_1254_p3 = ((icmp_ln895_1_fu_1250_p2[0:0] === 1'b1) ? trunc_ln209_reg_1594 : keep_V_load_reg_1574);

assign sub_ln214_fu_1226_p2 = (tocapture_V - zext_ln81_fu_1183_p1);

assign tmp_10_fu_360_p4 = {{resstream_TDATA_int[191:176]}};

assign tmp_11_fu_370_p4 = {{resstream_TDATA_int[207:192]}};

assign tmp_12_fu_380_p4 = {{resstream_TDATA_int[223:208]}};

assign tmp_13_fu_390_p4 = {{resstream_TDATA_int[239:224]}};

assign tmp_14_fu_400_p4 = {{resstream_TDATA_int[255:240]}};

assign tmp_15_fu_422_p4 = {{ddsstream_TDATA_int[31:16]}};

assign tmp_16_fu_432_p4 = {{ddsstream_TDATA_int[47:32]}};

assign tmp_17_fu_442_p4 = {{ddsstream_TDATA_int[63:48]}};

assign tmp_18_fu_452_p4 = {{ddsstream_TDATA_int[79:64]}};

assign tmp_19_fu_462_p4 = {{ddsstream_TDATA_int[95:80]}};

assign tmp_1_fu_260_p4 = {{resstream_TDATA_int[31:16]}};

assign tmp_20_fu_472_p4 = {{ddsstream_TDATA_int[111:96]}};

assign tmp_21_fu_482_p4 = {{ddsstream_TDATA_int[127:112]}};

assign tmp_22_fu_492_p4 = {{ddsstream_TDATA_int[143:128]}};

assign tmp_23_fu_502_p4 = {{ddsstream_TDATA_int[159:144]}};

assign tmp_24_fu_512_p4 = {{ddsstream_TDATA_int[175:160]}};

assign tmp_25_fu_522_p4 = {{ddsstream_TDATA_int[191:176]}};

assign tmp_26_fu_532_p4 = {{ddsstream_TDATA_int[207:192]}};

assign tmp_27_fu_542_p4 = {{ddsstream_TDATA_int[223:208]}};

assign tmp_28_fu_552_p4 = {{ddsstream_TDATA_int[239:224]}};

assign tmp_29_fu_562_p4 = {{ddsstream_TDATA_int[255:240]}};

assign tmp_2_fu_270_p4 = {{resstream_TDATA_int[47:32]}};

assign tmp_30_fu_584_p4 = {{lpstream_TDATA_int[31:16]}};

assign tmp_31_fu_594_p4 = {{lpstream_TDATA_int[47:32]}};

assign tmp_32_fu_604_p4 = {{lpstream_TDATA_int[63:48]}};

assign tmp_33_fu_614_p4 = {{lpstream_TDATA_int[79:64]}};

assign tmp_34_fu_624_p4 = {{lpstream_TDATA_int[95:80]}};

assign tmp_35_fu_634_p4 = {{lpstream_TDATA_int[111:96]}};

assign tmp_36_fu_644_p4 = {{lpstream_TDATA_int[127:112]}};

assign tmp_37_fu_654_p4 = {{lpstream_TDATA_int[143:128]}};

assign tmp_38_fu_664_p4 = {{lpstream_TDATA_int[159:144]}};

assign tmp_39_fu_674_p4 = {{lpstream_TDATA_int[175:160]}};

assign tmp_3_fu_280_p4 = {{resstream_TDATA_int[63:48]}};

assign tmp_40_fu_684_p4 = {{lpstream_TDATA_int[191:176]}};

assign tmp_41_fu_694_p4 = {{lpstream_TDATA_int[207:192]}};

assign tmp_42_fu_704_p4 = {{lpstream_TDATA_int[223:208]}};

assign tmp_43_fu_714_p4 = {{lpstream_TDATA_int[239:224]}};

assign tmp_44_fu_724_p4 = {{lpstream_TDATA_int[255:240]}};

assign tmp_4_fu_290_p4 = {{resstream_TDATA_int[79:64]}};

assign tmp_5_fu_300_p4 = {{resstream_TDATA_int[95:80]}};

assign tmp_6_fu_310_p4 = {{resstream_TDATA_int[111:96]}};

assign tmp_7_fu_320_p4 = {{resstream_TDATA_int[127:112]}};

assign tmp_8_fu_330_p4 = {{resstream_TDATA_int[143:128]}};

assign tmp_9_fu_340_p4 = {{resstream_TDATA_int[159:144]}};

assign tmp_s_fu_350_p4 = {{resstream_TDATA_int[175:160]}};

assign trunc_ln209_fu_1246_p1 = select_ln85_fu_1232_p3[7:0];

assign trunc_ln321_1_fu_418_p1 = ddsstream_TDATA_int[15:0];

assign trunc_ln321_2_fu_580_p1 = lpstream_TDATA_int[15:0];

assign trunc_ln321_fu_256_p1 = resstream_TDATA_int[15:0];

assign zext_ln248_1_fu_1296_p1 = p_Result_1_fu_1288_p3;

assign zext_ln248_2_fu_1320_p1 = p_Result_s_10_fu_1312_p3;

assign zext_ln248_3_fu_1344_p1 = p_Result_3_fu_1336_p3;

assign zext_ln248_4_fu_1368_p1 = p_Result_4_fu_1360_p3;

assign zext_ln248_5_fu_1392_p1 = p_Result_5_fu_1384_p3;

assign zext_ln248_6_fu_1416_p1 = p_Result_6_fu_1408_p3;

assign zext_ln248_7_fu_1440_p1 = p_Result_7_fu_1432_p3;

assign zext_ln248_fu_1272_p1 = p_Result_s_fu_1264_p3;

assign zext_ln544_fu_1170_p1 = select_ln65_50_fu_1162_p3;

assign zext_ln81_fu_1183_p1 = n_bytes_keep_fu_1175_p3;

always @ (posedge ap_clk) begin
    zext_ln81_reg_1579[1:0] <= 2'b00;
    zext_ln81_reg_1579[31:10] <= 22'b0000000000000000000000;
end

endmodule //iq_capture
