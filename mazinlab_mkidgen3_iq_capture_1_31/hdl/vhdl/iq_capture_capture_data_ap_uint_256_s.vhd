-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iq_capture_capture_data_ap_uint_256_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fetched16_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fetched16_empty_n : IN STD_LOGIC;
    fetched16_read : OUT STD_LOGIC;
    fetched_keep18_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    fetched_keep18_empty_n : IN STD_LOGIC;
    fetched_keep18_read : OUT STD_LOGIC;
    capturesize_dout : IN STD_LOGIC_VECTOR (34 downto 0);
    capturesize_empty_n : IN STD_LOGIC;
    capturesize_read : OUT STD_LOGIC;
    toout17_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    toout17_full_n : IN STD_LOGIC;
    toout17_write : OUT STD_LOGIC );
end;


architecture behav of iq_capture_capture_data_ap_uint_256_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal capturesize_blk_n : STD_LOGIC;
    signal p_capturesize_V_reg_49 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_idle : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write : STD_LOGIC;
    signal grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component iq_capture_capture_data_ap_uint_256_Pipeline_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fetched16_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fetched16_empty_n : IN STD_LOGIC;
        fetched16_read : OUT STD_LOGIC;
        fetched_keep18_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        fetched_keep18_empty_n : IN STD_LOGIC;
        fetched_keep18_read : OUT STD_LOGIC;
        toout17_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        toout17_full_n : IN STD_LOGIC;
        toout17_write : OUT STD_LOGIC;
        p_capturesize_V : IN STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38 : component iq_capture_capture_data_ap_uint_256_Pipeline_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start,
        ap_done => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done,
        ap_idle => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_idle,
        ap_ready => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready,
        fetched16_dout => fetched16_dout,
        fetched16_empty_n => fetched16_empty_n,
        fetched16_read => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read,
        fetched_keep18_dout => fetched_keep18_dout,
        fetched_keep18_empty_n => fetched_keep18_empty_n,
        fetched_keep18_read => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read,
        toout17_din => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din,
        toout17_full_n => toout17_full_n,
        toout17_write => grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write,
        p_capturesize_V => p_capturesize_V_reg_49);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_capturesize_V_reg_49 <= capturesize_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, capturesize_empty_n, grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (capturesize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, capturesize_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (capturesize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done)
    begin
        if ((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, capturesize_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (capturesize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    capturesize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, capturesize_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_blk_n <= capturesize_empty_n;
        else 
            capturesize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    capturesize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, capturesize_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (capturesize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_read <= ap_const_logic_1;
        else 
            capturesize_read <= ap_const_logic_0;
        end if; 
    end process;


    fetched16_read_assign_proc : process(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fetched16_read <= grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read;
        else 
            fetched16_read <= ap_const_logic_0;
        end if; 
    end process;


    fetched_keep18_read_assign_proc : process(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fetched_keep18_read <= grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read;
        else 
            fetched_keep18_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start <= grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg;
    toout17_din <= grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din;

    toout17_write_assign_proc : process(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            toout17_write <= grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write;
        else 
            toout17_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
