// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_capture_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        resstream_TDATA,
        resstream_TVALID,
        resstream_TREADY,
        resstream_TKEEP,
        resstream_TSTRB,
        resstream_TUSER,
        resstream_TLAST,
        capturesize,
        keep,
        fetched16_din,
        fetched16_full_n,
        fetched16_write,
        fetched_keep18_din,
        fetched_keep18_full_n,
        fetched_keep18_write,
        total_capturesize_c_din,
        total_capturesize_c_full_n,
        total_capturesize_c_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] resstream_TDATA;
input   resstream_TVALID;
output   resstream_TREADY;
input  [31:0] resstream_TKEEP;
input  [31:0] resstream_TSTRB;
input  [7:0] resstream_TUSER;
input  [0:0] resstream_TLAST;
input  [34:0] capturesize;
input  [255:0] keep;
output  [255:0] fetched16_din;
input   fetched16_full_n;
output   fetched16_write;
output  [0:0] fetched_keep18_din;
input   fetched_keep18_full_n;
output   fetched_keep18_write;
output  [34:0] total_capturesize_c_din;
input   total_capturesize_c_full_n;
output   total_capturesize_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fetched16_write;
reg fetched_keep18_write;
reg total_capturesize_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    total_capturesize_c_blk_n;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_idle;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_ready;
wire   [255:0] grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_din;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_write;
wire   [0:0] grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_din;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_write;
wire    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_resstream_TREADY;
reg    grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_resstream_V_data_V_U_apdone_blk;
wire   [255:0] resstream_TDATA_int_regslice;
wire    resstream_TVALID_int_regslice;
reg    resstream_TREADY_int_regslice;
wire    regslice_both_resstream_V_data_V_U_ack_in;
wire    regslice_both_resstream_V_keep_V_U_apdone_blk;
wire   [31:0] resstream_TKEEP_int_regslice;
wire    regslice_both_resstream_V_keep_V_U_vld_out;
wire    regslice_both_resstream_V_keep_V_U_ack_in;
wire    regslice_both_resstream_V_strb_V_U_apdone_blk;
wire   [31:0] resstream_TSTRB_int_regslice;
wire    regslice_both_resstream_V_strb_V_U_vld_out;
wire    regslice_both_resstream_V_strb_V_U_ack_in;
wire    regslice_both_resstream_V_user_V_U_apdone_blk;
wire   [7:0] resstream_TUSER_int_regslice;
wire    regslice_both_resstream_V_user_V_U_vld_out;
wire    regslice_both_resstream_V_user_V_U_ack_in;
wire    regslice_both_resstream_V_last_V_U_apdone_blk;
wire   [0:0] resstream_TLAST_int_regslice;
wire    regslice_both_resstream_V_last_V_U_vld_out;
wire    regslice_both_resstream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg = 1'b0;
end

iq_capture_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start),
    .ap_done(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done),
    .ap_idle(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_idle),
    .ap_ready(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_ready),
    .resstream_TVALID(resstream_TVALID_int_regslice),
    .fetched16_din(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_din),
    .fetched16_full_n(fetched16_full_n),
    .fetched16_write(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_write),
    .fetched_keep18_din(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_din),
    .fetched_keep18_full_n(fetched_keep18_full_n),
    .fetched_keep18_write(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_write),
    .capturesize(capturesize),
    .resstream_TDATA(resstream_TDATA_int_regslice),
    .resstream_TREADY(grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_resstream_TREADY),
    .resstream_TKEEP(resstream_TKEEP_int_regslice),
    .resstream_TSTRB(resstream_TSTRB_int_regslice),
    .resstream_TUSER(resstream_TUSER_int_regslice),
    .resstream_TLAST(resstream_TLAST_int_regslice),
    .keep(keep)
);

iq_capture_regslice_both #(
    .DataWidth( 256 ))
regslice_both_resstream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TDATA),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_data_V_U_ack_in),
    .data_out(resstream_TDATA_int_regslice),
    .vld_out(resstream_TVALID_int_regslice),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_data_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 32 ))
regslice_both_resstream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TKEEP),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_keep_V_U_ack_in),
    .data_out(resstream_TKEEP_int_regslice),
    .vld_out(regslice_both_resstream_V_keep_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_keep_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 32 ))
regslice_both_resstream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TSTRB),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_strb_V_U_ack_in),
    .data_out(resstream_TSTRB_int_regslice),
    .vld_out(regslice_both_resstream_V_strb_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_strb_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 8 ))
regslice_both_resstream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TUSER),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_user_V_U_ack_in),
    .data_out(resstream_TUSER_int_regslice),
    .vld_out(regslice_both_resstream_V_user_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_user_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 1 ))
regslice_both_resstream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TLAST),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_last_V_U_ack_in),
    .data_out(resstream_TLAST_int_regslice),
    .vld_out(regslice_both_resstream_V_last_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_ready == 1'b1)) begin
            grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (total_capturesize_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fetched16_write = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_write;
    end else begin
        fetched16_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fetched_keep18_write = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_write;
    end else begin
        fetched_keep18_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resstream_TREADY_int_regslice = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_resstream_TREADY;
    end else begin
        resstream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_capturesize_c_blk_n = total_capturesize_c_full_n;
    end else begin
        total_capturesize_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (total_capturesize_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_capturesize_c_write = 1'b1;
    end else begin
        total_capturesize_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (total_capturesize_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (total_capturesize_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign fetched16_din = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched16_din;

assign fetched_keep18_din = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_fetched_keep18_din;

assign grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start = grp_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read_fu_76_ap_start_reg;

assign resstream_TREADY = regslice_both_resstream_V_data_V_U_ack_in;

assign start_out = real_start;

assign total_capturesize_c_din = capturesize;

endmodule //iq_capture_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_s
