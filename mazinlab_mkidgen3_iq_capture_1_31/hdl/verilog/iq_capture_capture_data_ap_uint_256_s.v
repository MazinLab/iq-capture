// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_capture_capture_data_ap_uint_256_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fetched16_dout,
        fetched16_empty_n,
        fetched16_read,
        fetched_keep18_dout,
        fetched_keep18_empty_n,
        fetched_keep18_read,
        capturesize_dout,
        capturesize_empty_n,
        capturesize_read,
        toout17_din,
        toout17_full_n,
        toout17_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] fetched16_dout;
input   fetched16_empty_n;
output   fetched16_read;
input  [0:0] fetched_keep18_dout;
input   fetched_keep18_empty_n;
output   fetched_keep18_read;
input  [34:0] capturesize_dout;
input   capturesize_empty_n;
output   capturesize_read;
output  [255:0] toout17_din;
input   toout17_full_n;
output   toout17_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fetched16_read;
reg fetched_keep18_read;
reg capturesize_read;
reg toout17_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    capturesize_blk_n;
reg   [34:0] p_capturesize_V_reg_49;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_idle;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read;
wire   [255:0] grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din;
wire    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write;
reg    grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg = 1'b0;
end

iq_capture_capture_data_ap_uint_256_Pipeline_forward grp_capture_data_ap_uint_256_Pipeline_forward_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start),
    .ap_done(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done),
    .ap_idle(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_idle),
    .ap_ready(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready),
    .fetched16_dout(fetched16_dout),
    .fetched16_empty_n(fetched16_empty_n),
    .fetched16_read(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read),
    .fetched_keep18_dout(fetched_keep18_dout),
    .fetched_keep18_empty_n(fetched_keep18_empty_n),
    .fetched_keep18_read(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read),
    .toout17_din(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din),
    .toout17_full_n(toout17_full_n),
    .toout17_write(grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write),
    .p_capturesize_V(p_capturesize_V_reg_49)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_ready == 1'b1)) begin
            grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_capturesize_V_reg_49 <= capturesize_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (capturesize_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        capturesize_blk_n = capturesize_empty_n;
    end else begin
        capturesize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (capturesize_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        capturesize_read = 1'b1;
    end else begin
        capturesize_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fetched16_read = grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched16_read;
    end else begin
        fetched16_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fetched_keep18_read = grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_fetched_keep18_read;
    end else begin
        fetched_keep18_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        toout17_write = grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_write;
    end else begin
        toout17_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (capturesize_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (capturesize_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start = grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_ap_start_reg;

assign toout17_din = grp_capture_data_ap_uint_256_Pipeline_forward_fu_38_toout17_din;

endmodule //iq_capture_capture_data_ap_uint_256_s
