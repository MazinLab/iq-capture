-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iq_capture is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    resstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    resstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    resstream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    resstream_TVALID : IN STD_LOGIC;
    resstream_TREADY : OUT STD_LOGIC );
end;


architecture behav of iq_capture is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iq_capture_iq_capture,hls_ip_2020_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.327140,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3366,HLS_SYN_LUT=2955,HLS_VERSION=2020_1_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal keep : STD_LOGIC_VECTOR (255 downto 0);
    signal total_capturesize : STD_LOGIC_VECTOR (63 downto 0);
    signal capturesize : STD_LOGIC_VECTOR (31 downto 0);
    signal iqout : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_start : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_full_n : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_done : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_continue : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_idle : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_ready : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_out : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_write : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_din : STD_LOGIC_VECTOR (255 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_write : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_din : STD_LOGIC_VECTOR (0 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_write : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_resstream_TREADY : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_write : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_write : STD_LOGIC;
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_write : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_ap_start : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_ap_done : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_ap_continue : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_ap_idle : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_ap_ready : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_fetched_read : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_fetched_keep_read : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_toout_din : STD_LOGIC_VECTOR (255 downto 0);
    signal capture_data_ap_uint_256_U0_toout_write : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_total_capturesize_read : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_ap_start : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_ap_done : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_ap_continue : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_ap_idle : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_ap_ready : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_toout_read : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_capturesize_read : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_iqout_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal fetched_full_n : STD_LOGIC;
    signal fetched_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fetched_empty_n : STD_LOGIC;
    signal fetched_keep_full_n : STD_LOGIC;
    signal fetched_keep_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal fetched_keep_empty_n : STD_LOGIC;
    signal total_capturesize_c_full_n : STD_LOGIC;
    signal total_capturesize_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal total_capturesize_c_empty_n : STD_LOGIC;
    signal capturesize_c_full_n : STD_LOGIC;
    signal capturesize_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal capturesize_c_empty_n : STD_LOGIC;
    signal iqout_c_full_n : STD_LOGIC;
    signal iqout_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal iqout_c_empty_n : STD_LOGIC;
    signal toout_full_n : STD_LOGIC;
    signal toout_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal toout_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_capture_data_ap_uint_256_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_capture_data_ap_uint_256_U0_full_n : STD_LOGIC;
    signal start_for_capture_data_ap_uint_256_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_capture_data_ap_uint_256_U0_empty_n : STD_LOGIC;
    signal start_for_put_data_csize_ap_uint_256_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_put_data_csize_ap_uint_256_U0_full_n : STD_LOGIC;
    signal start_for_put_data_csize_ap_uint_256_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_put_data_csize_ap_uint_256_U0_empty_n : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_start_full_n : STD_LOGIC;
    signal capture_data_ap_uint_256_U0_start_write : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_start_full_n : STD_LOGIC;
    signal put_data_csize_ap_uint_256_U0_start_write : STD_LOGIC;

    component iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fetched_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fetched_full_n : IN STD_LOGIC;
        fetched_write : OUT STD_LOGIC;
        fetched_keep_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        fetched_keep_full_n : IN STD_LOGIC;
        fetched_keep_write : OUT STD_LOGIC;
        resstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        resstream_TVALID : IN STD_LOGIC;
        resstream_TREADY : OUT STD_LOGIC;
        resstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
        resstream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        total_capturesize : IN STD_LOGIC_VECTOR (63 downto 0);
        keep : IN STD_LOGIC_VECTOR (255 downto 0);
        capturesize : IN STD_LOGIC_VECTOR (31 downto 0);
        iqout : IN STD_LOGIC_VECTOR (63 downto 0);
        total_capturesize_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        total_capturesize_out_full_n : IN STD_LOGIC;
        total_capturesize_out_write : OUT STD_LOGIC;
        capturesize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        capturesize_out_full_n : IN STD_LOGIC;
        capturesize_out_write : OUT STD_LOGIC;
        iqout_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        iqout_out_full_n : IN STD_LOGIC;
        iqout_out_write : OUT STD_LOGIC );
    end component;


    component iq_capture_capture_data_ap_uint_256_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fetched_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fetched_empty_n : IN STD_LOGIC;
        fetched_read : OUT STD_LOGIC;
        fetched_keep_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        fetched_keep_empty_n : IN STD_LOGIC;
        fetched_keep_read : OUT STD_LOGIC;
        toout_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        toout_full_n : IN STD_LOGIC;
        toout_write : OUT STD_LOGIC;
        total_capturesize_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        total_capturesize_empty_n : IN STD_LOGIC;
        total_capturesize_read : OUT STD_LOGIC );
    end component;


    component iq_capture_put_data_csize_ap_uint_256_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        toout_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        toout_empty_n : IN STD_LOGIC;
        toout_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        capturesize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        capturesize_empty_n : IN STD_LOGIC;
        capturesize_read : OUT STD_LOGIC;
        iqout_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        iqout_empty_n : IN STD_LOGIC;
        iqout_read : OUT STD_LOGIC );
    end component;


    component iq_capture_fifo_w256_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_start_for_capture_data_ap_uint_256_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_start_for_put_data_csize_ap_uint_256_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component iq_capture_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        keep : OUT STD_LOGIC_VECTOR (255 downto 0);
        total_capturesize : OUT STD_LOGIC_VECTOR (63 downto 0);
        capturesize : OUT STD_LOGIC_VECTOR (31 downto 0);
        iqout : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component iq_capture_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component iq_capture_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        keep => keep,
        total_capturesize => total_capturesize,
        capturesize => capturesize,
        iqout => iqout,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component iq_capture_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 1,
        NUM_WRITE_OUTSTANDING => 2,
        MAX_READ_BURST_LENGTH => 2,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWADDR,
        I_AWID => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWID,
        I_AWLEN => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWQOS,
        I_AWPROT => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWPROT,
        I_AWUSER => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWUSER,
        I_AWBURST => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWBURST,
        I_AWREGION => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWREGION,
        I_WVALID => put_data_csize_ap_uint_256_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => put_data_csize_ap_uint_256_U0_m_axi_gmem_WDATA,
        I_WID => put_data_csize_ap_uint_256_U0_m_axi_gmem_WID,
        I_WUSER => put_data_csize_ap_uint_256_U0_m_axi_gmem_WUSER,
        I_WLAST => put_data_csize_ap_uint_256_U0_m_axi_gmem_WLAST,
        I_WSTRB => put_data_csize_ap_uint_256_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => put_data_csize_ap_uint_256_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0 : component iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_start,
        start_full_n => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_full_n,
        ap_done => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_done,
        ap_continue => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_continue,
        ap_idle => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_idle,
        ap_ready => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_ready,
        start_out => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_out,
        start_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_write,
        fetched_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_din,
        fetched_full_n => fetched_full_n,
        fetched_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_write,
        fetched_keep_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_din,
        fetched_keep_full_n => fetched_keep_full_n,
        fetched_keep_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_write,
        resstream_TDATA => resstream_TDATA,
        resstream_TVALID => resstream_TVALID,
        resstream_TREADY => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_resstream_TREADY,
        resstream_TUSER => resstream_TUSER,
        resstream_TLAST => resstream_TLAST,
        total_capturesize => total_capturesize,
        keep => keep,
        capturesize => capturesize,
        iqout => iqout,
        total_capturesize_out_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_din,
        total_capturesize_out_full_n => total_capturesize_c_full_n,
        total_capturesize_out_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_write,
        capturesize_out_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_din,
        capturesize_out_full_n => capturesize_c_full_n,
        capturesize_out_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_write,
        iqout_out_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_din,
        iqout_out_full_n => iqout_c_full_n,
        iqout_out_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_write);

    capture_data_ap_uint_256_U0 : component iq_capture_capture_data_ap_uint_256_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => capture_data_ap_uint_256_U0_ap_start,
        ap_done => capture_data_ap_uint_256_U0_ap_done,
        ap_continue => capture_data_ap_uint_256_U0_ap_continue,
        ap_idle => capture_data_ap_uint_256_U0_ap_idle,
        ap_ready => capture_data_ap_uint_256_U0_ap_ready,
        fetched_dout => fetched_dout,
        fetched_empty_n => fetched_empty_n,
        fetched_read => capture_data_ap_uint_256_U0_fetched_read,
        fetched_keep_dout => fetched_keep_dout,
        fetched_keep_empty_n => fetched_keep_empty_n,
        fetched_keep_read => capture_data_ap_uint_256_U0_fetched_keep_read,
        toout_din => capture_data_ap_uint_256_U0_toout_din,
        toout_full_n => toout_full_n,
        toout_write => capture_data_ap_uint_256_U0_toout_write,
        total_capturesize_dout => total_capturesize_c_dout,
        total_capturesize_empty_n => total_capturesize_c_empty_n,
        total_capturesize_read => capture_data_ap_uint_256_U0_total_capturesize_read);

    put_data_csize_ap_uint_256_U0 : component iq_capture_put_data_csize_ap_uint_256_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => put_data_csize_ap_uint_256_U0_ap_start,
        ap_done => put_data_csize_ap_uint_256_U0_ap_done,
        ap_continue => put_data_csize_ap_uint_256_U0_ap_continue,
        ap_idle => put_data_csize_ap_uint_256_U0_ap_idle,
        ap_ready => put_data_csize_ap_uint_256_U0_ap_ready,
        toout_dout => toout_dout,
        toout_empty_n => toout_empty_n,
        toout_read => put_data_csize_ap_uint_256_U0_toout_read,
        m_axi_gmem_AWVALID => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => put_data_csize_ap_uint_256_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => put_data_csize_ap_uint_256_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => put_data_csize_ap_uint_256_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => put_data_csize_ap_uint_256_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => put_data_csize_ap_uint_256_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => put_data_csize_ap_uint_256_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => put_data_csize_ap_uint_256_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => put_data_csize_ap_uint_256_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => put_data_csize_ap_uint_256_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => put_data_csize_ap_uint_256_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        capturesize_dout => capturesize_c_dout,
        capturesize_empty_n => capturesize_c_empty_n,
        capturesize_read => put_data_csize_ap_uint_256_U0_capturesize_read,
        iqout_dout => iqout_c_dout,
        iqout_empty_n => iqout_c_empty_n,
        iqout_read => put_data_csize_ap_uint_256_U0_iqout_read);

    fetched_U : component iq_capture_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_din,
        if_full_n => fetched_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_write,
        if_dout => fetched_dout,
        if_empty_n => fetched_empty_n,
        if_read => capture_data_ap_uint_256_U0_fetched_read);

    fetched_keep_U : component iq_capture_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_din,
        if_full_n => fetched_keep_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_fetched_keep_write,
        if_dout => fetched_keep_dout,
        if_empty_n => fetched_keep_empty_n,
        if_read => capture_data_ap_uint_256_U0_fetched_keep_read);

    total_capturesize_c_U : component iq_capture_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_din,
        if_full_n => total_capturesize_c_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_total_capturesize_out_write,
        if_dout => total_capturesize_c_dout,
        if_empty_n => total_capturesize_c_empty_n,
        if_read => capture_data_ap_uint_256_U0_total_capturesize_read);

    capturesize_c_U : component iq_capture_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_din,
        if_full_n => capturesize_c_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_capturesize_out_write,
        if_dout => capturesize_c_dout,
        if_empty_n => capturesize_c_empty_n,
        if_read => put_data_csize_ap_uint_256_U0_capturesize_read);

    iqout_c_U : component iq_capture_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_din,
        if_full_n => iqout_c_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_iqout_out_write,
        if_dout => iqout_c_dout,
        if_empty_n => iqout_c_empty_n,
        if_read => put_data_csize_ap_uint_256_U0_iqout_read);

    toout_U : component iq_capture_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => capture_data_ap_uint_256_U0_toout_din,
        if_full_n => toout_full_n,
        if_write => capture_data_ap_uint_256_U0_toout_write,
        if_dout => toout_dout,
        if_empty_n => toout_empty_n,
        if_read => put_data_csize_ap_uint_256_U0_toout_read);

    start_for_capture_data_ap_uint_256_U0_U : component iq_capture_start_for_capture_data_ap_uint_256_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_capture_data_ap_uint_256_U0_din,
        if_full_n => start_for_capture_data_ap_uint_256_U0_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_write,
        if_dout => start_for_capture_data_ap_uint_256_U0_dout,
        if_empty_n => start_for_capture_data_ap_uint_256_U0_empty_n,
        if_read => capture_data_ap_uint_256_U0_ap_ready);

    start_for_put_data_csize_ap_uint_256_U0_U : component iq_capture_start_for_put_data_csize_ap_uint_256_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_put_data_csize_ap_uint_256_U0_din,
        if_full_n => start_for_put_data_csize_ap_uint_256_U0_full_n,
        if_write => fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_write,
        if_dout => start_for_put_data_csize_ap_uint_256_U0_dout,
        if_empty_n => start_for_put_data_csize_ap_uint_256_U0_empty_n,
        if_read => put_data_csize_ap_uint_256_U0_ap_ready);




    ap_done <= put_data_csize_ap_uint_256_U0_ap_done;
    ap_idle <= (put_data_csize_ap_uint_256_U0_ap_idle and fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_idle and capture_data_ap_uint_256_U0_ap_idle);
    ap_ready <= fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= put_data_csize_ap_uint_256_U0_ap_done;
    ap_sync_ready <= fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_ready;
    capture_data_ap_uint_256_U0_ap_continue <= ap_const_logic_1;
    capture_data_ap_uint_256_U0_ap_start <= start_for_capture_data_ap_uint_256_U0_empty_n;
    capture_data_ap_uint_256_U0_start_full_n <= ap_const_logic_1;
    capture_data_ap_uint_256_U0_start_write <= ap_const_logic_0;
    fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_continue <= ap_const_logic_1;
    fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_ap_start <= ap_start;
    fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_start_full_n <= (start_for_put_data_csize_ap_uint_256_U0_full_n and start_for_capture_data_ap_uint_256_U0_full_n);
    put_data_csize_ap_uint_256_U0_ap_continue <= ap_const_logic_1;
    put_data_csize_ap_uint_256_U0_ap_start <= start_for_put_data_csize_ap_uint_256_U0_empty_n;
    put_data_csize_ap_uint_256_U0_start_full_n <= ap_const_logic_1;
    put_data_csize_ap_uint_256_U0_start_write <= ap_const_logic_0;
    resstream_TREADY <= fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9_U0_resstream_TREADY;
    start_for_capture_data_ap_uint_256_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_put_data_csize_ap_uint_256_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
