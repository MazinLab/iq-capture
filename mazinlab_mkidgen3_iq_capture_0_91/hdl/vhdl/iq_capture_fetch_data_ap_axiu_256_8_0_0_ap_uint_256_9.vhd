-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fetched_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fetched_full_n : IN STD_LOGIC;
    fetched_write : OUT STD_LOGIC;
    fetched_keep_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    fetched_keep_full_n : IN STD_LOGIC;
    fetched_keep_write : OUT STD_LOGIC;
    resstream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    resstream_TVALID : IN STD_LOGIC;
    resstream_TREADY : OUT STD_LOGIC;
    resstream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    resstream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    total_capturesize : IN STD_LOGIC_VECTOR (63 downto 0);
    keep : IN STD_LOGIC_VECTOR (255 downto 0);
    capturesize : IN STD_LOGIC_VECTOR (31 downto 0);
    iqout : IN STD_LOGIC_VECTOR (63 downto 0);
    total_capturesize_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    total_capturesize_out_full_n : IN STD_LOGIC;
    total_capturesize_out_write : OUT STD_LOGIC;
    capturesize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    capturesize_out_full_n : IN STD_LOGIC;
    capturesize_out_write : OUT STD_LOGIC;
    iqout_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_out_full_n : IN STD_LOGIC;
    iqout_out_write : OUT STD_LOGIC );
end;


architecture behav of iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal total_capturesize_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal total_capturesize_0_vld_reg : STD_LOGIC := '0';
    signal total_capturesize_0_ack_out : STD_LOGIC;
    signal keep_0_data_reg : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal keep_0_vld_reg : STD_LOGIC := '0';
    signal keep_0_ack_out : STD_LOGIC;
    signal capturesize_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal capturesize_0_vld_reg : STD_LOGIC := '0';
    signal capturesize_0_ack_out : STD_LOGIC;
    signal iqout_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal iqout_0_vld_reg : STD_LOGIC := '0';
    signal iqout_0_ack_out : STD_LOGIC;
    signal fetched_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln30_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal fetched_keep_blk_n : STD_LOGIC;
    signal resstream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln30_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_capturesize_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal capturesize_out_blk_n : STD_LOGIC;
    signal iqout_out_blk_n : STD_LOGIC;
    signal i_reg_150 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln882_fu_170_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_capturesize_V_fu_161_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_capturesize_V_reg_196 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal p_Result_s_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_201 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_210 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_resstream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal resstream_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal resstream_TVALID_int_regslice : STD_LOGIC;
    signal resstream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_resstream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_resstream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal resstream_TUSER_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_resstream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_resstream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_resstream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal resstream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_resstream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_resstream_V_last_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_resstream_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => resstream_TDATA,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_resstream_V_data_V_U_ack_in,
        data_out => resstream_TDATA_int_regslice,
        vld_out => resstream_TVALID_int_regslice,
        ack_out => resstream_TREADY_int_regslice,
        apdone_blk => regslice_both_resstream_V_data_V_U_apdone_blk);

    regslice_both_resstream_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => resstream_TUSER,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_resstream_V_user_V_U_ack_in,
        data_out => resstream_TUSER_int_regslice,
        vld_out => regslice_both_resstream_V_user_V_U_vld_out,
        ack_out => resstream_TREADY_int_regslice,
        apdone_blk => regslice_both_resstream_V_user_V_U_apdone_blk);

    regslice_both_resstream_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => resstream_TLAST,
        vld_in => resstream_TVALID,
        ack_in => regslice_both_resstream_V_last_V_U_ack_in,
        data_out => resstream_TLAST_int_regslice,
        vld_out => regslice_both_resstream_V_last_V_U_vld_out,
        ack_out => resstream_TREADY_int_regslice,
        apdone_blk => regslice_both_resstream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    capturesize_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_150 <= add_ln882_fu_170_p2;
            elsif ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_150 <= ap_const_lv35_0;
            end if; 
        end if;
    end process;

    iqout_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    keep_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    total_capturesize_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (capturesize_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (capturesize_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (capturesize_0_vld_reg = ap_const_logic_0)))) then
                capturesize_0_data_reg <= capturesize;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln30_reg_215 <= icmp_ln30_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (iqout_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (iqout_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (iqout_0_vld_reg = ap_const_logic_0)))) then
                iqout_0_data_reg <= iqout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (keep_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (keep_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (keep_0_vld_reg = ap_const_logic_0)))) then
                keep_0_data_reg <= keep;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_201 <= p_Result_s_fu_184_p3;
                tmp_data_V_reg_210 <= resstream_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_capturesize_V_reg_196 <= p_capturesize_V_fu_161_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (total_capturesize_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (total_capturesize_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (total_capturesize_0_vld_reg = ap_const_logic_0)))) then
                total_capturesize_0_data_reg <= total_capturesize;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, ap_CS_fsm_state2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln30_fu_165_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln30_fu_165_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln882_fu_170_p2 <= std_logic_vector(unsigned(i_reg_150) + unsigned(ap_const_lv35_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fetched_full_n, fetched_keep_full_n, ap_enable_reg_pp0_iter1, icmp_ln30_reg_215, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, resstream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((resstream_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fetched_keep_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)) or ((fetched_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fetched_full_n, fetched_keep_full_n, ap_enable_reg_pp0_iter1, icmp_ln30_reg_215, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, resstream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((resstream_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fetched_keep_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)) or ((fetched_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fetched_full_n, fetched_keep_full_n, ap_enable_reg_pp0_iter1, icmp_ln30_reg_215, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, resstream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((resstream_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fetched_keep_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)) or ((fetched_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n)
    begin
                ap_block_state2 <= ((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(icmp_ln30_fu_165_p2, resstream_TVALID_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((resstream_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fetched_full_n, fetched_keep_full_n, icmp_ln30_reg_215)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((fetched_keep_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)) or ((fetched_full_n = ap_const_logic_0) and (icmp_ln30_reg_215 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln30_fu_165_p2)
    begin
        if ((icmp_ln30_fu_165_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    capturesize_0_ack_out_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            capturesize_0_ack_out <= ap_const_logic_1;
        else 
            capturesize_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    capturesize_out_blk_n_assign_proc : process(capturesize_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            capturesize_out_blk_n <= capturesize_out_full_n;
        else 
            capturesize_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    capturesize_out_din <= capturesize_0_data_reg;

    capturesize_out_write_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            capturesize_out_write <= ap_const_logic_1;
        else 
            capturesize_out_write <= ap_const_logic_0;
        end if; 
    end process;


    fetched_blk_n_assign_proc : process(fetched_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln30_reg_215)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_215 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            fetched_blk_n <= fetched_full_n;
        else 
            fetched_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fetched_din <= tmp_data_V_reg_210;

    fetched_keep_blk_n_assign_proc : process(fetched_keep_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln30_reg_215)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_215 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            fetched_keep_blk_n <= fetched_keep_full_n;
        else 
            fetched_keep_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fetched_keep_din <= p_Result_s_reg_201;

    fetched_keep_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln30_reg_215, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_215 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            fetched_keep_write <= ap_const_logic_1;
        else 
            fetched_keep_write <= ap_const_logic_0;
        end if; 
    end process;


    fetched_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln30_reg_215, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_215 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            fetched_write <= ap_const_logic_1;
        else 
            fetched_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln30_fu_165_p2 <= "1" when (i_reg_150 = p_capturesize_V_reg_196) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    iqout_0_ack_out_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            iqout_0_ack_out <= ap_const_logic_1;
        else 
            iqout_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    iqout_out_blk_n_assign_proc : process(iqout_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            iqout_out_blk_n <= iqout_out_full_n;
        else 
            iqout_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_out_din <= iqout_0_data_reg;

    iqout_out_write_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            iqout_out_write <= ap_const_logic_1;
        else 
            iqout_out_write <= ap_const_logic_0;
        end if; 
    end process;


    keep_0_ack_out_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            keep_0_ack_out <= ap_const_logic_1;
        else 
            keep_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_184_p3 <= keep_0_data_reg(to_integer(unsigned(resstream_TUSER_int_regslice)) downto to_integer(unsigned(resstream_TUSER_int_regslice))) when (to_integer(unsigned(resstream_TUSER_int_regslice))>= 0 and to_integer(unsigned(resstream_TUSER_int_regslice))<=255) else "-";
    p_capturesize_V_fu_161_p1 <= total_capturesize_0_data_reg(35 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    resstream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, resstream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            resstream_TDATA_blk_n <= resstream_TVALID_int_regslice;
        else 
            resstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    resstream_TREADY <= regslice_both_resstream_V_data_V_U_ack_in;

    resstream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln30_fu_165_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            resstream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            resstream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    total_capturesize_0_ack_out_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            total_capturesize_0_ack_out <= ap_const_logic_1;
        else 
            total_capturesize_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    total_capturesize_out_blk_n_assign_proc : process(total_capturesize_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            total_capturesize_out_blk_n <= total_capturesize_out_full_n;
        else 
            total_capturesize_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    total_capturesize_out_din <= total_capturesize_0_data_reg;

    total_capturesize_out_write_assign_proc : process(total_capturesize_out_full_n, capturesize_out_full_n, iqout_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (total_capturesize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            total_capturesize_out_write <= ap_const_logic_1;
        else 
            total_capturesize_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
