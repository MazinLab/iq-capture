-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_capture_pair_iq_df10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    istream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    istream_V_TVALID : IN STD_LOGIC;
    istream_V_TREADY : OUT STD_LOGIC;
    qstream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qstream_V_TVALID : IN STD_LOGIC;
    qstream_V_TREADY : OUT STD_LOGIC;
    iq_in_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    iq_in_full_n : IN STD_LOGIC;
    iq_in_write : OUT STD_LOGIC;
    capturesize : IN STD_LOGIC_VECTOR (31 downto 0);
    iqout : IN STD_LOGIC_VECTOR (63 downto 0);
    capturesize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    capturesize_out_full_n : IN STD_LOGIC;
    capturesize_out_write : OUT STD_LOGIC;
    iqout_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    iqout_out_full_n : IN STD_LOGIC;
    iqout_out_write : OUT STD_LOGIC );
end;


architecture behav of adc_capture_pair_iq_df10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal istream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln882_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qstream_V_TDATA_blk_n : STD_LOGIC;
    signal iq_in_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln882_reg_149 : STD_LOGIC_VECTOR (0 downto 0);
    signal capturesize_out_blk_n : STD_LOGIC;
    signal iqout_out_blk_n : STD_LOGIC;
    signal i_reg_111 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_capturesize_V_fu_129_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_capturesize_V_reg_144 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_138_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_reg_158 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1_reg_163 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal din_i_i_i_pair_iq_fu_122_ap_ready : STD_LOGIC;
    signal din_i_i_i_pair_iq_fu_122_ap_return : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_istream_V_U_apdone_blk : STD_LOGIC;
    signal istream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal istream_V_TVALID_int_regslice : STD_LOGIC;
    signal istream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_istream_V_U_ack_in : STD_LOGIC;
    signal regslice_both_qstream_V_U_apdone_blk : STD_LOGIC;
    signal qstream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal qstream_V_TVALID_int_regslice : STD_LOGIC;
    signal qstream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_qstream_V_U_ack_in : STD_LOGIC;

    component adc_capture_pair_iq IS
    port (
        ap_ready : OUT STD_LOGIC;
        i_in : IN STD_LOGIC_VECTOR (127 downto 0);
        q_in : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    din_i_i_i_pair_iq_fu_122 : component adc_capture_pair_iq
    port map (
        ap_ready => din_i_i_i_pair_iq_fu_122_ap_ready,
        i_in => tmp_reg_158,
        q_in => tmp_1_reg_163,
        ap_return => din_i_i_i_pair_iq_fu_122_ap_return);

    regslice_both_istream_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istream_V_TDATA,
        vld_in => istream_V_TVALID,
        ack_in => regslice_both_istream_V_U_ack_in,
        data_out => istream_V_TDATA_int_regslice,
        vld_out => istream_V_TVALID_int_regslice,
        ack_out => istream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_istream_V_U_apdone_blk);

    regslice_both_qstream_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => qstream_V_TDATA,
        vld_in => qstream_V_TVALID,
        ack_in => regslice_both_qstream_V_U_ack_in,
        data_out => qstream_V_TDATA_int_regslice,
        vld_out => qstream_V_TVALID_int_regslice,
        ack_out => qstream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_qstream_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_111 <= i_1_fu_138_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_111 <= ap_const_lv27_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln882_reg_149 <= icmp_ln882_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_capturesize_V_reg_144 <= p_capturesize_V_fu_129_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_163 <= qstream_V_TDATA_int_regslice;
                tmp_reg_158 <= istream_V_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, capturesize_out_full_n, iqout_out_full_n, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln882_fu_133_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln882_fu_133_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(iq_in_full_n, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_enable_reg_pp0_iter1, icmp_ln882_reg_149, istream_V_TVALID_int_regslice, qstream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln882_reg_149 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (iq_in_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (qstream_V_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (istream_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(iq_in_full_n, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_enable_reg_pp0_iter1, icmp_ln882_reg_149, istream_V_TVALID_int_regslice, qstream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln882_reg_149 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (iq_in_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (qstream_V_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (istream_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(iq_in_full_n, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_enable_reg_pp0_iter1, icmp_ln882_reg_149, istream_V_TVALID_int_regslice, qstream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln882_reg_149 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (iq_in_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (qstream_V_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (istream_V_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, capturesize_out_full_n, iqout_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln882_fu_133_p2, istream_V_TVALID_int_regslice, qstream_V_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (qstream_V_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (istream_V_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(iq_in_full_n, icmp_ln882_reg_149)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln882_reg_149 = ap_const_lv1_0) and (iq_in_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln882_fu_133_p2)
    begin
        if ((icmp_ln882_fu_133_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    capturesize_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, capturesize_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_out_blk_n <= capturesize_out_full_n;
        else 
            capturesize_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    capturesize_out_din <= capturesize;

    capturesize_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, capturesize_out_full_n, iqout_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_out_write <= ap_const_logic_1;
        else 
            capturesize_out_write <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_138_p2 <= std_logic_vector(unsigned(i_reg_111) + unsigned(ap_const_lv27_1));
    icmp_ln882_fu_133_p2 <= "1" when (i_reg_111 = p_capturesize_V_reg_144) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    iq_in_blk_n_assign_proc : process(iq_in_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln882_reg_149)
    begin
        if (((icmp_ln882_reg_149 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iq_in_blk_n <= iq_in_full_n;
        else 
            iq_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_in_din <= din_i_i_i_pair_iq_fu_122_ap_return;

    iq_in_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln882_reg_149, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln882_reg_149 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iq_in_write <= ap_const_logic_1;
        else 
            iq_in_write <= ap_const_logic_0;
        end if; 
    end process;


    iqout_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, iqout_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iqout_out_blk_n <= iqout_out_full_n;
        else 
            iqout_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iqout_out_din <= iqout;

    iqout_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, capturesize_out_full_n, iqout_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (iqout_out_full_n = ap_const_logic_0) or (capturesize_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iqout_out_write <= ap_const_logic_1;
        else 
            iqout_out_write <= ap_const_logic_0;
        end if; 
    end process;


    istream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln882_fu_133_p2, istream_V_TVALID_int_regslice)
    begin
        if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istream_V_TDATA_blk_n <= istream_V_TVALID_int_regslice;
        else 
            istream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    istream_V_TREADY <= regslice_both_istream_V_U_ack_in;

    istream_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istream_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            istream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_capturesize_V_fu_129_p1 <= capturesize(27 - 1 downto 0);

    qstream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln882_fu_133_p2, qstream_V_TVALID_int_regslice)
    begin
        if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qstream_V_TDATA_blk_n <= qstream_V_TVALID_int_regslice;
        else 
            qstream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qstream_V_TREADY <= regslice_both_qstream_V_U_ack_in;

    qstream_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln882_fu_133_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln882_fu_133_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qstream_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            qstream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
