// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iq_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.121000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=575,HLS_SYN_LUT=384,HLS_VERSION=2019_2_1}" *)

module iq_capture (
        ap_clk,
        ap_rst_n,
        resstream_TDATA,
        resstream_TVALID,
        resstream_TREADY,
        resstream_TUSER,
        resstream_TLAST,
        iqout_TDATA,
        iqout_TVALID,
        iqout_TREADY,
        iqout_TKEEP,
        iqout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ctrl_clk,
        ap_rst_n_ctrl_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst_n;
input  [255:0] resstream_TDATA;
input   resstream_TVALID;
output   resstream_TREADY;
input  [7:0] resstream_TUSER;
input   resstream_TLAST;
output  [255:0] iqout_TDATA;
output   iqout_TVALID;
input   iqout_TREADY;
output  [31:0] iqout_TKEEP;
output   iqout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ctrl_clk;
input   ap_rst_n_ctrl_clk;

reg resstream_TREADY;

 reg    ap_rst_n_inv;
wire   [7:0] keep_V_address0;
reg    keep_V_ce0;
wire   [7:0] keep_V_q0;
wire   [31:0] capturesize_V;
reg   [31:0] capturesize_V_0_data_reg;
reg    capturesize_V_0_vld_reg;
reg    capturesize_V_0_ack_out;
reg   [31:0] tocapture_V;
reg    resstream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    iqout_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln60_reg_460;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] and_ln60_reg_460_pp0_iter3_reg;
reg    ap_rst_n_ctrl_clk_inv;
reg   [255:0] iqout_data_V_tmp_reg_429;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
wire    regslice_both_iqout_data_V_U_apdone_blk;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [255:0] iqout_data_V_tmp_reg_429_pp0_iter1_reg;
reg   [255:0] iqout_data_V_tmp_reg_429_pp0_iter2_reg;
wire   [0:0] icmp_ln879_fu_149_p2;
reg   [0:0] icmp_ln879_reg_439;
reg   [0:0] icmp_ln879_reg_439_pp0_iter1_reg;
reg   [31:0] capturesize_V_read_reg_444;
reg   [7:0] keep_V_load_reg_449;
reg   [7:0] keep_V_load_reg_449_pp0_iter2_reg;
wire   [31:0] zext_ln58_fu_162_p1;
reg   [31:0] zext_ln58_reg_455;
wire   [0:0] and_ln60_fu_176_p2;
wire   [31:0] select_ln62_fu_198_p3;
reg   [31:0] select_ln62_reg_464;
wire   [7:0] trunc_ln209_fu_212_p1;
reg   [7:0] trunc_ln209_reg_470;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln544_fu_144_p1;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] n_bytes_keep_fu_155_p3;
wire   [0:0] icmp_ln60_fu_170_p2;
wire   [0:0] icmp_ln895_fu_186_p2;
wire   [31:0] sub_ln214_fu_192_p2;
wire   [0:0] icmp_ln895_1_fu_216_p2;
wire   [7:0] select_ln63_fu_220_p3;
wire   [31:0] keepval_V_fu_226_p1;
wire   [0:0] p_Result_s_fu_230_p3;
wire   [4:0] zext_ln248_fu_238_p1;
wire   [0:0] p_Result_1_fu_254_p3;
reg   [31:0] p_Result_2_fu_242_p5;
wire   [4:0] zext_ln248_1_fu_262_p1;
wire   [0:0] p_Result_s_6_fu_278_p3;
reg   [31:0] p_Result_2_1_fu_266_p5;
wire   [4:0] zext_ln248_2_fu_286_p1;
wire   [0:0] p_Result_3_fu_302_p3;
reg   [31:0] p_Result_2_2_fu_290_p5;
wire   [4:0] zext_ln248_3_fu_310_p1;
wire   [0:0] p_Result_4_fu_326_p3;
reg   [31:0] p_Result_2_3_fu_314_p5;
wire   [4:0] zext_ln248_4_fu_334_p1;
wire   [0:0] p_Result_5_fu_350_p3;
reg   [31:0] p_Result_2_4_fu_338_p5;
wire   [4:0] zext_ln248_5_fu_358_p1;
wire   [0:0] p_Result_6_fu_374_p3;
reg   [31:0] p_Result_2_5_fu_362_p5;
wire   [4:0] zext_ln248_6_fu_382_p1;
wire   [0:0] p_Result_7_fu_398_p3;
reg   [31:0] p_Result_2_6_fu_386_p5;
wire   [4:0] zext_ln248_7_fu_406_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_resstream_data_V_U_apdone_blk;
wire   [255:0] resstream_TDATA_int;
wire    resstream_TVALID_int;
reg    resstream_TREADY_int;
wire    regslice_both_resstream_data_V_U_ack_in;
wire    regslice_both_resstream_user_V_U_apdone_blk;
wire   [7:0] resstream_TUSER_int;
wire    regslice_both_resstream_user_V_U_vld_out;
wire    regslice_both_resstream_user_V_U_ack_in;
wire    regslice_both_w1_resstream_last_U_apdone_blk;
wire    resstream_TLAST_int;
wire    regslice_both_w1_resstream_last_U_vld_out;
wire    regslice_both_w1_resstream_last_U_ack_in;
reg    iqout_TVALID_int;
wire    iqout_TREADY_int;
wire    regslice_both_iqout_data_V_U_vld_out;
wire    regslice_both_iqout_keep_V_U_apdone_blk;
reg   [31:0] iqout_TKEEP_int;
wire    regslice_both_iqout_keep_V_U_ack_in_dummy;
wire    regslice_both_iqout_keep_V_U_vld_out;
wire    regslice_both_w1_iqout_last_U_apdone_blk;
wire    iqout_TLAST_int;
wire    regslice_both_w1_iqout_last_U_ack_in_dummy;
wire    regslice_both_w1_iqout_last_U_vld_out;

// power-on initialization
initial begin
#0 capturesize_V_0_data_reg = 32'd0;
#0 capturesize_V_0_vld_reg = 1'b0;
#0 tocapture_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

iq_capture_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
iq_capture_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ctrl_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .keep_V_address0(keep_V_address0),
    .keep_V_ce0(keep_V_ce0),
    .keep_V_q0(keep_V_q0),
    .capturesize_V(capturesize_V),
    .clk(ap_clk),
    .rst(ap_rst_n_ctrl_clk_inv)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_resstream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TDATA),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_data_V_U_ack_in),
    .data_out(resstream_TDATA_int),
    .vld_out(resstream_TVALID_int),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_resstream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_resstream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TUSER),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_user_V_U_ack_in),
    .data_out(resstream_TUSER_int),
    .vld_out(regslice_both_resstream_user_V_U_vld_out),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_resstream_user_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_resstream_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resstream_TLAST),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_w1_resstream_last_U_ack_in),
    .data_out(resstream_TLAST_int),
    .vld_out(regslice_both_w1_resstream_last_U_vld_out),
    .ack_out(resstream_TREADY_int),
    .apdone_blk(regslice_both_w1_resstream_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_iqout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_data_V_tmp_reg_429_pp0_iter2_reg),
    .vld_in(iqout_TVALID_int),
    .ack_in(iqout_TREADY_int),
    .data_out(iqout_TDATA),
    .vld_out(regslice_both_iqout_data_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_iqout_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TKEEP_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_iqout_keep_V_U_ack_in_dummy),
    .data_out(iqout_TKEEP),
    .vld_out(regslice_both_iqout_keep_V_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_iqout_keep_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_iqout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iqout_TLAST_int),
    .vld_in(iqout_TVALID_int),
    .ack_in(regslice_both_w1_iqout_last_U_ack_in_dummy),
    .data_out(iqout_TLAST),
    .vld_out(regslice_both_w1_iqout_last_U_vld_out),
    .ack_out(iqout_TREADY),
    .apdone_blk(regslice_both_w1_iqout_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'd1 == and_ln60_fu_176_p2)) begin
            tocapture_V <= select_ln62_fu_198_p3;
        end else if ((1'd0 == and_ln60_fu_176_p2)) begin
            tocapture_V <= capturesize_V_read_reg_444;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln60_reg_460 <= and_ln60_fu_176_p2;
        and_ln60_reg_460_pp0_iter3_reg <= and_ln60_reg_460;
        iqout_data_V_tmp_reg_429_pp0_iter2_reg <= iqout_data_V_tmp_reg_429_pp0_iter1_reg;
        keep_V_load_reg_449_pp0_iter2_reg <= keep_V_load_reg_449;
        zext_ln58_reg_455[9 : 2] <= zext_ln58_fu_162_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((((capturesize_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((capturesize_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (capturesize_V_0_vld_reg == 1'b1)))) begin
        capturesize_V_0_data_reg <= capturesize_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        capturesize_V_read_reg_444 <= capturesize_V_0_data_reg;
        icmp_ln879_reg_439 <= icmp_ln879_fu_149_p2;
        icmp_ln879_reg_439_pp0_iter1_reg <= icmp_ln879_reg_439;
        iqout_data_V_tmp_reg_429 <= resstream_TDATA_int;
        iqout_data_V_tmp_reg_429_pp0_iter1_reg <= iqout_data_V_tmp_reg_429;
        keep_V_load_reg_449 <= keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln60_fu_176_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln62_reg_464 <= select_ln62_fu_198_p3;
        trunc_ln209_reg_470 <= trunc_ln209_fu_212_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        capturesize_V_0_ack_out = 1'b1;
    end else begin
        capturesize_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln60_reg_460_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'd1 == and_ln60_reg_460) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        iqout_TDATA_blk_n = iqout_TREADY_int;
    end else begin
        iqout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln60_reg_460) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iqout_TVALID_int = 1'b1;
    end else begin
        iqout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keep_V_ce0 = 1'b1;
    end else begin
        keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TDATA_blk_n = resstream_TVALID_int;
    end else begin
        resstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((resstream_TVALID == 1'b1) & (regslice_both_resstream_data_V_U_ack_in == 1'b1))) begin
        resstream_TREADY = 1'b1;
    end else begin
        resstream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        resstream_TREADY_int = 1'b1;
    end else begin
        resstream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln60_fu_176_p2 = (icmp_ln879_reg_439_pp0_iter1_reg & icmp_ln60_fu_170_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (regslice_both_iqout_data_V_U_apdone_blk == 1'b1)) | ((resstream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (regslice_both_iqout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((resstream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (regslice_both_iqout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((resstream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (resstream_TVALID_int == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd1 == and_ln60_reg_460) & (iqout_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == and_ln60_reg_460_pp0_iter3_reg) & (iqout_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (regslice_both_iqout_data_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_ctrl_clk_inv = ~ap_rst_n_ctrl_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln60_fu_170_p2 = ((tocapture_V != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_149_p2 = ((resstream_TUSER_int == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_216_p2 = ((zext_ln58_reg_455 > select_ln62_reg_464) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_186_p2 = ((zext_ln58_fu_162_p1 > tocapture_V) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (p_Result_2_6_fu_386_p5 or zext_ln248_7_fu_406_p1) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 | ap_tvar_int_0 < 7) begin
            iqout_TKEEP_int[ap_tvar_int_0] = p_Result_2_6_fu_386_p5[ap_tvar_int_0];
        end else if (11 - ap_tvar_int_0 >= 5) begin
            iqout_TKEEP_int[ap_tvar_int_0] = 1'b0;
        end else begin
            iqout_TKEEP_int[ap_tvar_int_0] = zext_ln248_7_fu_406_p1[11 - ap_tvar_int_0];
        end
    end
end

assign iqout_TLAST_int = ((select_ln62_reg_464 == 32'd0) ? 1'b1 : 1'b0);

assign iqout_TVALID = regslice_both_iqout_data_V_U_vld_out;

assign keep_V_address0 = zext_ln544_fu_144_p1;

assign keepval_V_fu_226_p1 = select_ln63_fu_220_p3;

assign n_bytes_keep_fu_155_p3 = {{keep_V_load_reg_449}, {2'd0}};

assign p_Result_1_fu_254_p3 = keepval_V_fu_226_p1[32'd1];

integer ap_tvar_int_1;

always @ (p_Result_2_fu_242_p5 or zext_ln248_1_fu_262_p1) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 5 | ap_tvar_int_1 < 1) begin
            p_Result_2_1_fu_266_p5[ap_tvar_int_1] = p_Result_2_fu_242_p5[ap_tvar_int_1];
        end else if (5 - ap_tvar_int_1 >= 5) begin
            p_Result_2_1_fu_266_p5[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_2_1_fu_266_p5[ap_tvar_int_1] = zext_ln248_1_fu_262_p1[5 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Result_2_1_fu_266_p5 or zext_ln248_2_fu_286_p1) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 6 | ap_tvar_int_2 < 2) begin
            p_Result_2_2_fu_290_p5[ap_tvar_int_2] = p_Result_2_1_fu_266_p5[ap_tvar_int_2];
        end else if (6 - ap_tvar_int_2 >= 5) begin
            p_Result_2_2_fu_290_p5[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_2_2_fu_290_p5[ap_tvar_int_2] = zext_ln248_2_fu_286_p1[6 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_Result_2_2_fu_290_p5 or zext_ln248_3_fu_310_p1) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 7 | ap_tvar_int_3 < 3) begin
            p_Result_2_3_fu_314_p5[ap_tvar_int_3] = p_Result_2_2_fu_290_p5[ap_tvar_int_3];
        end else if (7 - ap_tvar_int_3 >= 5) begin
            p_Result_2_3_fu_314_p5[ap_tvar_int_3] = 1'b0;
        end else begin
            p_Result_2_3_fu_314_p5[ap_tvar_int_3] = zext_ln248_3_fu_310_p1[7 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (p_Result_2_3_fu_314_p5 or zext_ln248_4_fu_334_p1) begin
    for (ap_tvar_int_4 = 32 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 8 | ap_tvar_int_4 < 4) begin
            p_Result_2_4_fu_338_p5[ap_tvar_int_4] = p_Result_2_3_fu_314_p5[ap_tvar_int_4];
        end else if (8 - ap_tvar_int_4 >= 5) begin
            p_Result_2_4_fu_338_p5[ap_tvar_int_4] = 1'b0;
        end else begin
            p_Result_2_4_fu_338_p5[ap_tvar_int_4] = zext_ln248_4_fu_334_p1[8 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (p_Result_2_4_fu_338_p5 or zext_ln248_5_fu_358_p1) begin
    for (ap_tvar_int_5 = 32 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 9 | ap_tvar_int_5 < 5) begin
            p_Result_2_5_fu_362_p5[ap_tvar_int_5] = p_Result_2_4_fu_338_p5[ap_tvar_int_5];
        end else if (9 - ap_tvar_int_5 >= 5) begin
            p_Result_2_5_fu_362_p5[ap_tvar_int_5] = 1'b0;
        end else begin
            p_Result_2_5_fu_362_p5[ap_tvar_int_5] = zext_ln248_5_fu_358_p1[9 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (p_Result_2_5_fu_362_p5 or zext_ln248_6_fu_382_p1) begin
    for (ap_tvar_int_6 = 32 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 10 | ap_tvar_int_6 < 6) begin
            p_Result_2_6_fu_386_p5[ap_tvar_int_6] = p_Result_2_5_fu_362_p5[ap_tvar_int_6];
        end else if (10 - ap_tvar_int_6 >= 5) begin
            p_Result_2_6_fu_386_p5[ap_tvar_int_6] = 1'b0;
        end else begin
            p_Result_2_6_fu_386_p5[ap_tvar_int_6] = zext_ln248_6_fu_382_p1[10 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (zext_ln248_fu_238_p1) begin
    for (ap_tvar_int_7 = 32 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 4 | ap_tvar_int_7 < 0) begin
            p_Result_2_fu_242_p5[ap_tvar_int_7] = ap_const_lv32_0[ap_tvar_int_7];
        end else if (4 - ap_tvar_int_7 >= 5) begin
            p_Result_2_fu_242_p5[ap_tvar_int_7] = 1'b0;
        end else begin
            p_Result_2_fu_242_p5[ap_tvar_int_7] = zext_ln248_fu_238_p1[4 - ap_tvar_int_7];
        end
    end
end

assign p_Result_3_fu_302_p3 = keepval_V_fu_226_p1[32'd3];

assign p_Result_4_fu_326_p3 = keepval_V_fu_226_p1[32'd4];

assign p_Result_5_fu_350_p3 = keepval_V_fu_226_p1[32'd5];

assign p_Result_6_fu_374_p3 = keepval_V_fu_226_p1[32'd6];

assign p_Result_7_fu_398_p3 = keepval_V_fu_226_p1[32'd7];

assign p_Result_s_6_fu_278_p3 = keepval_V_fu_226_p1[32'd2];

assign p_Result_s_fu_230_p3 = keepval_V_fu_226_p1[32'd0];

assign select_ln62_fu_198_p3 = ((icmp_ln895_fu_186_p2[0:0] === 1'b1) ? 32'd0 : sub_ln214_fu_192_p2);

assign select_ln63_fu_220_p3 = ((icmp_ln895_1_fu_216_p2[0:0] === 1'b1) ? trunc_ln209_reg_470 : keep_V_load_reg_449_pp0_iter2_reg);

assign sub_ln214_fu_192_p2 = (tocapture_V - zext_ln58_fu_162_p1);

assign trunc_ln209_fu_212_p1 = select_ln62_fu_198_p3[7:0];

assign zext_ln248_1_fu_262_p1 = p_Result_1_fu_254_p3;

assign zext_ln248_2_fu_286_p1 = p_Result_s_6_fu_278_p3;

assign zext_ln248_3_fu_310_p1 = p_Result_3_fu_302_p3;

assign zext_ln248_4_fu_334_p1 = p_Result_4_fu_326_p3;

assign zext_ln248_5_fu_358_p1 = p_Result_5_fu_350_p3;

assign zext_ln248_6_fu_382_p1 = p_Result_6_fu_374_p3;

assign zext_ln248_7_fu_406_p1 = p_Result_7_fu_398_p3;

assign zext_ln248_fu_238_p1 = p_Result_s_fu_230_p3;

assign zext_ln544_fu_144_p1 = resstream_TUSER_int;

assign zext_ln58_fu_162_p1 = n_bytes_keep_fu_155_p3;

always @ (posedge ap_clk) begin
    zext_ln58_reg_455[1:0] <= 2'b00;
    zext_ln58_reg_455[31:10] <= 22'b0000000000000000000000;
end

endmodule //iq_capture
