// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module phase_capture_phase_fetch_data_axis_ap_uint_64_16ul_0ul_0ul_ap_uint_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        phasestream_TDATA,
        phasestream_TVALID,
        phasestream_TREADY,
        phasestream_TKEEP,
        phasestream_TSTRB,
        phasestream_TUSER,
        phasestream_TLAST,
        capturesize,
        keep,
        fetched16_din,
        fetched16_full_n,
        fetched16_write,
        fetched_keep18_din,
        fetched_keep18_full_n,
        fetched_keep18_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] phasestream_TDATA;
input   phasestream_TVALID;
output   phasestream_TREADY;
input  [7:0] phasestream_TKEEP;
input  [7:0] phasestream_TSTRB;
input  [15:0] phasestream_TUSER;
input  [0:0] phasestream_TLAST;
input  [34:0] capturesize;
input  [511:0] keep;
output  [63:0] fetched16_din;
input   fetched16_full_n;
output   fetched16_write;
output  [0:0] fetched_keep18_din;
input   fetched_keep18_full_n;
output   fetched_keep18_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fetched16_write;
reg[0:0] fetched_keep18_din;
reg fetched_keep18_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    phasestream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln1057_fu_139_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln1057_reg_202;
reg    fetched16_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    fetched_keep18_blk_n;
reg   [63:0] reg_112;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [35:0] sub_i_i_fu_121_p2;
wire   [0:0] p_Result_1_fu_152_p3;
reg   [0:0] p_Result_1_reg_206;
wire   [31:0] i_3_fu_159_p2;
reg   [31:0] i_3_reg_211;
wire   [0:0] p_Result_3_fu_173_p3;
reg   [0:0] p_Result_3_reg_216;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] i_fu_60;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [35:0] capturesize_cast_fu_117_p1;
wire  signed [31:0] sext_ln1057_fu_135_p0;
wire  signed [35:0] sext_ln1057_fu_135_p1;
wire   [8:0] p_Result_s_fu_144_p1;
wire   [15:0] zext_ln708_fu_148_p1;
wire  signed [31:0] i_3_fu_159_p0;
wire   [8:0] p_Result_2_fu_165_p1;
wire   [15:0] zext_ln708_1_fu_169_p1;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_phasestream_V_data_V_U_apdone_blk;
wire   [63:0] phasestream_TDATA_int_regslice;
wire    phasestream_TVALID_int_regslice;
reg    phasestream_TREADY_int_regslice;
wire    regslice_both_phasestream_V_data_V_U_ack_in;
wire    regslice_both_phasestream_V_keep_V_U_apdone_blk;
wire   [7:0] phasestream_TKEEP_int_regslice;
wire    regslice_both_phasestream_V_keep_V_U_vld_out;
wire    regslice_both_phasestream_V_keep_V_U_ack_in;
wire    regslice_both_phasestream_V_strb_V_U_apdone_blk;
wire   [7:0] phasestream_TSTRB_int_regslice;
wire    regslice_both_phasestream_V_strb_V_U_vld_out;
wire    regslice_both_phasestream_V_strb_V_U_ack_in;
wire    regslice_both_phasestream_V_user_V_U_apdone_blk;
wire   [15:0] phasestream_TUSER_int_regslice;
wire    regslice_both_phasestream_V_user_V_U_vld_out;
wire    regslice_both_phasestream_V_user_V_U_ack_in;
wire    regslice_both_phasestream_V_last_V_U_apdone_blk;
wire   [0:0] phasestream_TLAST_int_regslice;
wire    regslice_both_phasestream_V_last_V_U_vld_out;
wire    regslice_both_phasestream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

phase_capture_regslice_both #(
    .DataWidth( 64 ))
regslice_both_phasestream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(phasestream_TDATA),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_V_data_V_U_ack_in),
    .data_out(phasestream_TDATA_int_regslice),
    .vld_out(phasestream_TVALID_int_regslice),
    .ack_out(phasestream_TREADY_int_regslice),
    .apdone_blk(regslice_both_phasestream_V_data_V_U_apdone_blk)
);

phase_capture_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phasestream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(phasestream_TKEEP),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_V_keep_V_U_ack_in),
    .data_out(phasestream_TKEEP_int_regslice),
    .vld_out(regslice_both_phasestream_V_keep_V_U_vld_out),
    .ack_out(phasestream_TREADY_int_regslice),
    .apdone_blk(regslice_both_phasestream_V_keep_V_U_apdone_blk)
);

phase_capture_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phasestream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(phasestream_TSTRB),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_V_strb_V_U_ack_in),
    .data_out(phasestream_TSTRB_int_regslice),
    .vld_out(regslice_both_phasestream_V_strb_V_U_vld_out),
    .ack_out(phasestream_TREADY_int_regslice),
    .apdone_blk(regslice_both_phasestream_V_strb_V_U_apdone_blk)
);

phase_capture_regslice_both #(
    .DataWidth( 16 ))
regslice_both_phasestream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(phasestream_TUSER),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_V_user_V_U_ack_in),
    .data_out(phasestream_TUSER_int_regslice),
    .vld_out(regslice_both_phasestream_V_user_V_U_vld_out),
    .ack_out(phasestream_TREADY_int_regslice),
    .apdone_blk(regslice_both_phasestream_V_user_V_U_apdone_blk)
);

phase_capture_regslice_both #(
    .DataWidth( 1 ))
regslice_both_phasestream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(phasestream_TLAST),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_V_last_V_U_ack_in),
    .data_out(phasestream_TLAST_int_regslice),
    .vld_out(regslice_both_phasestream_V_last_V_U_vld_out),
    .ack_out(phasestream_TREADY_int_regslice),
    .apdone_blk(regslice_both_phasestream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_60 <= 32'd0;
    end else if (((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_60 <= i_3_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_211 <= i_3_fu_159_p2;
        p_Result_1_reg_206 <= p_Result_1_fu_152_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_reg_202 <= icmp_ln1057_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_3_reg_216 <= p_Result_3_fu_173_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_112 <= phasestream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln1057_fu_139_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        fetched16_blk_n = fetched16_full_n;
    end else begin
        fetched16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        fetched16_write = 1'b1;
    end else begin
        fetched16_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        fetched_keep18_blk_n = fetched_keep18_full_n;
    end else begin
        fetched_keep18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_keep18_din = p_Result_3_reg_216;
    end else if (((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fetched_keep18_din = p_Result_1_reg_206;
    end else begin
        fetched_keep18_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        fetched_keep18_write = 1'b1;
    end else begin
        fetched_keep18_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phasestream_TDATA_blk_n = phasestream_TVALID_int_regslice;
    end else begin
        phasestream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln1057_reg_202 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phasestream_TREADY_int_regslice = 1'b1;
    end else begin
        phasestream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln1057_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln1057_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (phasestream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (phasestream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln1057_fu_139_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (phasestream_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_reg_202 == 1'd1) & (phasestream_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched_keep18_full_n == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched16_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_reg_202 == 1'd1) & (phasestream_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched_keep18_full_n == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched16_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_reg_202 == 1'd1) & (phasestream_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched_keep18_full_n == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched16_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln1057_fu_139_p2 == 1'd1) & (phasestream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((icmp_ln1057_reg_202 == 1'd1) & (phasestream_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched_keep18_full_n == 1'b0)) | ((icmp_ln1057_reg_202 == 1'd1) & (fetched16_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign capturesize_cast_fu_117_p1 = capturesize;

assign fetched16_din = reg_112;

assign i_3_fu_159_p0 = i_fu_60;

assign i_3_fu_159_p2 = ($signed(i_3_fu_159_p0) + $signed(32'd2));

assign icmp_ln1057_fu_139_p2 = (($signed(sext_ln1057_fu_135_p1) < $signed(sub_i_i_fu_121_p2)) ? 1'b1 : 1'b0);

assign p_Result_1_fu_152_p3 = keep[zext_ln708_fu_148_p1];

assign p_Result_2_fu_165_p1 = phasestream_TUSER_int_regslice[8:0];

assign p_Result_3_fu_173_p3 = keep[zext_ln708_1_fu_169_p1];

assign p_Result_s_fu_144_p1 = phasestream_TUSER_int_regslice[8:0];

assign phasestream_TREADY = regslice_both_phasestream_V_data_V_U_ack_in;

assign sext_ln1057_fu_135_p0 = i_fu_60;

assign sext_ln1057_fu_135_p1 = sext_ln1057_fu_135_p0;

assign start_out = real_start;

assign sub_i_i_fu_121_p2 = ($signed(capturesize_cast_fu_117_p1) + $signed(36'd68719476735));

assign zext_ln708_1_fu_169_p1 = p_Result_2_fu_165_p1;

assign zext_ln708_fu_148_p1 = p_Result_s_fu_144_p1;

endmodule //phase_capture_phase_fetch_data_axis_ap_uint_64_16ul_0ul_0ul_ap_uint_64_s
