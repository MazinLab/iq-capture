// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_capture_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        capturesize,
        resstream_TDATA,
        resstream_TVALID,
        resstream_TREADY,
        resstream_TKEEP,
        resstream_TSTRB,
        resstream_TUSER,
        resstream_TLAST,
        fetched16_din,
        fetched16_full_n,
        fetched16_write,
        keep,
        fetched_keep18_din,
        fetched_keep18_full_n,
        fetched_keep18_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [34:0] capturesize;
input  [255:0] resstream_TDATA;
input   resstream_TVALID;
output   resstream_TREADY;
input  [31:0] resstream_TKEEP;
input  [31:0] resstream_TSTRB;
input  [7:0] resstream_TUSER;
input  [0:0] resstream_TLAST;
output  [255:0] fetched16_din;
input   fetched16_full_n;
output   fetched16_write;
input  [255:0] keep;
output  [0:0] fetched_keep18_din;
input   fetched_keep18_full_n;
output   fetched_keep18_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fetched16_write;
reg fetched_keep18_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [255:0] keep_0_data_reg;
reg    keep_0_vld_reg;
reg    keep_0_ack_out;
reg    resstream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln30_fu_108_p2;
reg    fetched16_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    fetched_keep18_blk_n;
wire    ap_CS_fsm_state2;
reg   [255:0] resin_reg_159;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] p_Result_s_fu_127_p3;
reg   [0:0] p_Result_s_reg_164;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [34:0] i_fu_56;
wire   [34:0] add_ln1057_fu_113_p2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_resstream_V_data_V_U_apdone_blk;
wire   [255:0] resstream_TDATA_int_regslice;
wire    resstream_TVALID_int_regslice;
reg    resstream_TREADY_int_regslice;
wire    regslice_both_resstream_V_data_V_U_ack_in;
wire    regslice_both_resstream_V_keep_V_U_apdone_blk;
wire   [31:0] resstream_TKEEP_int_regslice;
wire    regslice_both_resstream_V_keep_V_U_vld_out;
wire    regslice_both_resstream_V_keep_V_U_ack_in;
wire    regslice_both_resstream_V_strb_V_U_apdone_blk;
wire   [31:0] resstream_TSTRB_int_regslice;
wire    regslice_both_resstream_V_strb_V_U_vld_out;
wire    regslice_both_resstream_V_strb_V_U_ack_in;
wire    regslice_both_resstream_V_user_V_U_apdone_blk;
wire   [7:0] resstream_TUSER_int_regslice;
wire    regslice_both_resstream_V_user_V_U_vld_out;
wire    regslice_both_resstream_V_user_V_U_ack_in;
wire    regslice_both_resstream_V_last_V_U_apdone_blk;
wire   [0:0] resstream_TLAST_int_regslice;
wire    regslice_both_resstream_V_last_V_U_vld_out;
wire    regslice_both_resstream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 keep_0_data_reg = 256'd0;
#0 keep_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

iq_capture_regslice_both #(
    .DataWidth( 256 ))
regslice_both_resstream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TDATA),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_data_V_U_ack_in),
    .data_out(resstream_TDATA_int_regslice),
    .vld_out(resstream_TVALID_int_regslice),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_data_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 32 ))
regslice_both_resstream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TKEEP),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_keep_V_U_ack_in),
    .data_out(resstream_TKEEP_int_regslice),
    .vld_out(regslice_both_resstream_V_keep_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_keep_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 32 ))
regslice_both_resstream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TSTRB),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_strb_V_U_ack_in),
    .data_out(resstream_TSTRB_int_regslice),
    .vld_out(regslice_both_resstream_V_strb_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_strb_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 8 ))
regslice_both_resstream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TUSER),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_user_V_U_ack_in),
    .data_out(resstream_TUSER_int_regslice),
    .vld_out(regslice_both_resstream_V_user_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_user_V_U_apdone_blk)
);

iq_capture_regslice_both #(
    .DataWidth( 1 ))
regslice_both_resstream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TLAST),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_last_V_U_ack_in),
    .data_out(resstream_TLAST_int_regslice),
    .vld_out(regslice_both_resstream_V_last_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_56 <= 35'd0;
    end else if (((icmp_ln30_fu_108_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_56 <= add_ln1057_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (keep_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (keep_0_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (keep_0_vld_reg == 1'b0)))) begin
        keep_0_data_reg <= keep;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_108_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_s_reg_164 <= p_Result_s_fu_127_p3;
        resin_reg_159 <= resstream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln30_fu_108_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched16_blk_n = fetched16_full_n;
    end else begin
        fetched16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched16_write = 1'b1;
    end else begin
        fetched16_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_keep18_blk_n = fetched_keep18_full_n;
    end else begin
        fetched_keep18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_keep18_write = 1'b1;
    end else begin
        fetched_keep18_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        keep_0_ack_out = 1'b1;
    end else begin
        keep_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_108_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TDATA_blk_n = resstream_TVALID_int_regslice;
    end else begin
        resstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_108_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TREADY_int_regslice = 1'b1;
    end else begin
        resstream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln30_fu_108_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln30_fu_108_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_113_p2 = (i_fu_56 + 35'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln30_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln30_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0))) | ((icmp_ln30_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln30_fu_108_p2 == 1'd0) & (resstream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((fetched_keep18_full_n == 1'b0) | (fetched16_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign fetched16_din = resin_reg_159;

assign fetched_keep18_din = p_Result_s_reg_164;

assign icmp_ln30_fu_108_p2 = ((i_fu_56 == capturesize) ? 1'b1 : 1'b0);

assign p_Result_s_fu_127_p3 = keep_0_data_reg[resstream_TUSER_int_regslice];

assign resstream_TREADY = regslice_both_resstream_V_data_V_U_ack_in;

endmodule //iq_capture_fetch_data_axis_ap_uint_256_8ul_0ul_0ul_ap_uint_256_Pipeline_read
