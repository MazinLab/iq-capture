// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_axi256_readinput (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_TVALID,
        iq_in8_din,
        iq_in8_full_n,
        iq_in8_write,
        stream_TDATA,
        stream_TREADY,
        stream_TKEEP,
        stream_TSTRB,
        stream_TLAST,
        capturesize
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   stream_TVALID;
output  [255:0] iq_in8_din;
input   iq_in8_full_n;
output   iq_in8_write;
input  [255:0] stream_TDATA;
output   stream_TREADY;
input  [31:0] stream_TKEEP;
input  [31:0] stream_TSTRB;
input  [0:0] stream_TLAST;
input  [26:0] capturesize;

reg ap_idle;
reg iq_in8_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln311_fu_118_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln311_reg_141;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg    iq_in8_blk_n;
reg   [255:0] reg_95;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage1_11001;
wire   [25:0] i_2_fu_124_p2;
reg   [25:0] i_2_reg_145;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [25:0] i_fu_62;
wire    ap_loop_init;
reg   [25:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [25:0] trunc_ln_fu_100_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_stream_V_data_V_U_apdone_blk;
wire   [255:0] stream_TDATA_int_regslice;
wire    stream_TVALID_int_regslice;
reg    stream_TREADY_int_regslice;
wire    regslice_both_stream_V_data_V_U_ack_in;
wire    regslice_both_stream_V_keep_V_U_apdone_blk;
wire   [31:0] stream_TKEEP_int_regslice;
wire    regslice_both_stream_V_keep_V_U_vld_out;
wire    regslice_both_stream_V_keep_V_U_ack_in;
wire    regslice_both_stream_V_strb_V_U_apdone_blk;
wire   [31:0] stream_TSTRB_int_regslice;
wire    regslice_both_stream_V_strb_V_U_vld_out;
wire    regslice_both_stream_V_strb_V_U_ack_in;
wire    regslice_both_stream_V_last_V_U_apdone_blk;
wire   [0:0] stream_TLAST_int_regslice;
wire    regslice_both_stream_V_last_V_U_vld_out;
wire    regslice_both_stream_V_last_V_U_ack_in;
reg    ap_condition_245;
reg    ap_condition_248;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

write_axi256_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

write_axi256_regslice_both #(
    .DataWidth( 256 ))
regslice_both_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TDATA),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_data_V_U_ack_in),
    .data_out(stream_TDATA_int_regslice),
    .vld_out(stream_TVALID_int_regslice),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_data_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TKEEP),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_keep_V_U_ack_in),
    .data_out(stream_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_V_keep_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_keep_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TSTRB),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_strb_V_U_ack_in),
    .data_out(stream_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_V_strb_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_strb_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TLAST),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_last_V_U_ack_in),
    .data_out(stream_TLAST_int_regslice),
    .vld_out(regslice_both_stream_V_last_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_248)) begin
            i_fu_62 <= 26'd0;
        end else if ((1'b1 == ap_condition_245)) begin
            i_fu_62 <= i_2_reg_145;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_145 <= i_2_fu_124_p2;
        icmp_ln311_reg_141 <= icmp_ln311_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln311_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_95 <= stream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln311_fu_118_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 26'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_62;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        iq_in8_blk_n = iq_in8_full_n;
    end else begin
        iq_in8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        iq_in8_write = 1'b1;
    end else begin
        iq_in8_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln311_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        stream_TDATA_blk_n = stream_TVALID_int_regslice;
    end else begin
        stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln311_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_TREADY_int_regslice = 1'b1;
    end else begin
        stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((iq_in8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln311_fu_118_p2 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((iq_in8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln311_fu_118_p2 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((iq_in8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln311_fu_118_p2 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln311_reg_141 == 1'd0) & (iq_in8_full_n == 1'b0)) | ((icmp_ln311_reg_141 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln311_reg_141 == 1'd0) & (iq_in8_full_n == 1'b0)) | ((icmp_ln311_reg_141 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln311_reg_141 == 1'd0) & (iq_in8_full_n == 1'b0)) | ((icmp_ln311_reg_141 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln311_fu_118_p2 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((icmp_ln311_reg_141 == 1'd0) & (iq_in8_full_n == 1'b0)) | ((icmp_ln311_reg_141 == 1'd0) & (stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (iq_in8_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_245 = ((icmp_ln311_reg_141 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_248 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_fu_124_p2 = (ap_sig_allocacmp_i_1 + 26'd1);

assign icmp_ln311_fu_118_p2 = ((ap_sig_allocacmp_i_1 == trunc_ln_fu_100_p4) ? 1'b1 : 1'b0);

assign iq_in8_din = reg_95;

assign stream_TREADY = regslice_both_stream_V_data_V_U_ack_in;

assign trunc_ln_fu_100_p4 = {{capturesize[26:1]}};

endmodule //write_axi256_readinput
