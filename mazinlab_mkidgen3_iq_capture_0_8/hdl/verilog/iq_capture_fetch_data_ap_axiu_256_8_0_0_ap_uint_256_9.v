// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fetched_din,
        fetched_full_n,
        fetched_write,
        fetched_keep_din,
        fetched_keep_full_n,
        fetched_keep_write,
        resstream_TDATA,
        resstream_TVALID,
        resstream_TREADY,
        resstream_TUSER,
        resstream_TLAST,
        total_capturesize,
        keep,
        capturesize,
        iqout,
        total_capturesize_out_din,
        total_capturesize_out_full_n,
        total_capturesize_out_write,
        capturesize_out_din,
        capturesize_out_full_n,
        capturesize_out_write,
        iqout_out_din,
        iqout_out_full_n,
        iqout_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [255:0] fetched_din;
input   fetched_full_n;
output   fetched_write;
output  [0:0] fetched_keep_din;
input   fetched_keep_full_n;
output   fetched_keep_write;
input  [255:0] resstream_TDATA;
input   resstream_TVALID;
output   resstream_TREADY;
input  [7:0] resstream_TUSER;
input  [0:0] resstream_TLAST;
input  [63:0] total_capturesize;
input  [255:0] keep;
input  [31:0] capturesize;
input  [63:0] iqout;
output  [63:0] total_capturesize_out_din;
input   total_capturesize_out_full_n;
output   total_capturesize_out_write;
output  [31:0] capturesize_out_din;
input   capturesize_out_full_n;
output   capturesize_out_write;
output  [63:0] iqout_out_din;
input   iqout_out_full_n;
output   iqout_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fetched_write;
reg fetched_keep_write;
reg total_capturesize_out_write;
reg capturesize_out_write;
reg iqout_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fetched_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln29_reg_201;
reg    fetched_keep_blk_n;
reg    resstream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln29_fu_165_p2;
reg    total_capturesize_out_blk_n;
reg    capturesize_out_blk_n;
reg    iqout_out_blk_n;
reg   [34:0] i_reg_150;
reg    ap_block_state1;
wire   [34:0] p_capturesize_V_fu_161_p1;
reg   [34:0] p_capturesize_V_reg_196;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [34:0] add_ln882_fu_170_p2;
reg   [255:0] tmp_data_V_reg_210;
wire   [0:0] p_Result_s_fu_184_p3;
reg   [0:0] p_Result_s_reg_215;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_resstream_V_data_V_U_apdone_blk;
wire   [255:0] resstream_TDATA_int_regslice;
wire    resstream_TVALID_int_regslice;
reg    resstream_TREADY_int_regslice;
wire    regslice_both_resstream_V_data_V_U_ack_in;
wire    regslice_both_resstream_V_user_V_U_apdone_blk;
wire   [7:0] resstream_TUSER_int_regslice;
wire    regslice_both_resstream_V_user_V_U_vld_out;
wire    regslice_both_resstream_V_user_V_U_ack_in;
wire    regslice_both_resstream_V_last_V_U_apdone_blk;
wire   [0:0] resstream_TLAST_int_regslice;
wire    regslice_both_resstream_V_last_V_U_vld_out;
wire    regslice_both_resstream_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 256 ))
regslice_both_resstream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TDATA),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_data_V_U_ack_in),
    .data_out(resstream_TDATA_int_regslice),
    .vld_out(resstream_TVALID_int_regslice),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_resstream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TUSER),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_user_V_U_ack_in),
    .data_out(resstream_TUSER_int_regslice),
    .vld_out(regslice_both_resstream_V_user_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_resstream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(resstream_TLAST),
    .vld_in(resstream_TVALID),
    .ack_in(regslice_both_resstream_V_last_V_U_ack_in),
    .data_out(resstream_TLAST_int_regslice),
    .vld_out(regslice_both_resstream_V_last_V_U_vld_out),
    .ack_out(resstream_TREADY_int_regslice),
    .apdone_blk(regslice_both_resstream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_150 <= add_ln882_fu_170_p2;
    end else if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_150 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln29_reg_201 <= icmp_ln29_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_165_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_s_reg_215 <= p_Result_s_fu_184_p3;
        tmp_data_V_reg_210 <= resstream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_capturesize_V_reg_196 <= p_capturesize_V_fu_161_p1;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_165_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        capturesize_out_blk_n = capturesize_out_full_n;
    end else begin
        capturesize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        capturesize_out_write = 1'b1;
    end else begin
        capturesize_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_blk_n = fetched_full_n;
    end else begin
        fetched_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_keep_blk_n = fetched_keep_full_n;
    end else begin
        fetched_keep_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_keep_write = 1'b1;
    end else begin
        fetched_keep_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fetched_write = 1'b1;
    end else begin
        fetched_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iqout_out_blk_n = iqout_out_full_n;
    end else begin
        iqout_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        iqout_out_write = 1'b1;
    end else begin
        iqout_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TDATA_blk_n = resstream_TVALID_int_regslice;
    end else begin
        resstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resstream_TREADY_int_regslice = 1'b1;
    end else begin
        resstream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_capturesize_out_blk_n = total_capturesize_out_full_n;
    end else begin
        total_capturesize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_capturesize_out_write = 1'b1;
    end else begin
        total_capturesize_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln29_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln29_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln882_fu_170_p2 = (i_reg_150 + 35'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln29_reg_201 == 1'd0) & (fetched_keep_full_n == 1'b0)) | ((icmp_ln29_reg_201 == 1'd0) & (fetched_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln29_reg_201 == 1'd0) & (fetched_keep_full_n == 1'b0)) | ((icmp_ln29_reg_201 == 1'd0) & (fetched_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln29_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (resstream_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln29_reg_201 == 1'd0) & (fetched_keep_full_n == 1'b0)) | ((icmp_ln29_reg_201 == 1'd0) & (fetched_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (iqout_out_full_n == 1'b0) | (capturesize_out_full_n == 1'b0) | (total_capturesize_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln29_fu_165_p2 == 1'd0) & (resstream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln29_reg_201 == 1'd0) & (fetched_keep_full_n == 1'b0)) | ((icmp_ln29_reg_201 == 1'd0) & (fetched_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign capturesize_out_din = capturesize;

assign fetched_din = tmp_data_V_reg_210;

assign fetched_keep_din = p_Result_s_reg_215;

assign icmp_ln29_fu_165_p2 = ((i_reg_150 == p_capturesize_V_reg_196) ? 1'b1 : 1'b0);

assign iqout_out_din = iqout;

assign p_Result_s_fu_184_p3 = keep[resstream_TUSER_int_regslice];

assign p_capturesize_V_fu_161_p1 = total_capturesize[34:0];

assign resstream_TREADY = regslice_both_resstream_V_data_V_U_ack_in;

assign start_out = real_start;

assign total_capturesize_out_din = total_capturesize;

endmodule //iq_capture_fetch_data_ap_axiu_256_8_0_0_ap_uint_256_9
