-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_capture_pair_iq_df_flat_Pipeline_read is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    istream_V_TVALID : IN STD_LOGIC;
    qstream_V_TVALID : IN STD_LOGIC;
    iq_in8_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    iq_in8_full_n : IN STD_LOGIC;
    iq_in8_write : OUT STD_LOGIC;
    capturesize : IN STD_LOGIC_VECTOR (26 downto 0);
    istream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    istream_V_TREADY : OUT STD_LOGIC;
    qstream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qstream_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of adc_capture_pair_iq_df_flat_Pipeline_read is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1057_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal istream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal qstream_V_TDATA_blk_n : STD_LOGIC;
    signal iq_in8_blk_n : STD_LOGIC;
    signal trunc_ln674_fu_121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_reg_305 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln674_1_fu_125_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_1_reg_310 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_1_reg_315 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_1_reg_320 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_2_reg_325 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_2_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_3_reg_335 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_3_reg_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_4_reg_345 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_4_reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_5_reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_5_reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_6_reg_365 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_6_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_7_reg_375 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_7_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_3_fu_115_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adc_capture_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component adc_capture_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_72 <= i_3_fu_115_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv27_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_4_1_reg_315 <= istream_V_TDATA(31 downto 16);
                p_Result_4_2_reg_325 <= istream_V_TDATA(47 downto 32);
                p_Result_4_3_reg_335 <= istream_V_TDATA(63 downto 48);
                p_Result_4_4_reg_345 <= istream_V_TDATA(79 downto 64);
                p_Result_4_5_reg_355 <= istream_V_TDATA(95 downto 80);
                p_Result_4_6_reg_365 <= istream_V_TDATA(111 downto 96);
                p_Result_4_7_reg_375 <= istream_V_TDATA(127 downto 112);
                p_Result_6_1_reg_320 <= qstream_V_TDATA(31 downto 16);
                p_Result_6_2_reg_330 <= qstream_V_TDATA(47 downto 32);
                p_Result_6_3_reg_340 <= qstream_V_TDATA(63 downto 48);
                p_Result_6_4_reg_350 <= qstream_V_TDATA(79 downto 64);
                p_Result_6_5_reg_360 <= qstream_V_TDATA(95 downto 80);
                p_Result_6_6_reg_370 <= qstream_V_TDATA(111 downto 96);
                p_Result_6_7_reg_380 <= qstream_V_TDATA(127 downto 112);
                trunc_ln674_1_reg_310 <= trunc_ln674_1_fu_125_p1;
                trunc_ln674_reg_305 <= trunc_ln674_fu_121_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, istream_V_TVALID, icmp_ln1057_fu_109_p2, qstream_V_TVALID, iq_in8_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((iq_in8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (((qstream_V_TVALID = ap_const_logic_0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0)) or ((icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (istream_V_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, istream_V_TVALID, icmp_ln1057_fu_109_p2, qstream_V_TVALID, iq_in8_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((iq_in8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (((qstream_V_TVALID = ap_const_logic_0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0)) or ((icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (istream_V_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, istream_V_TVALID, icmp_ln1057_fu_109_p2, qstream_V_TVALID, iq_in8_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((iq_in8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (((qstream_V_TVALID = ap_const_logic_0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0)) or ((icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (istream_V_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(istream_V_TVALID, icmp_ln1057_fu_109_p2, qstream_V_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((qstream_V_TVALID = ap_const_logic_0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0)) or ((icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (istream_V_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(iq_in8_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (iq_in8_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1057_fu_109_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv27_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_72;
        end if; 
    end process;

    i_3_fu_115_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv27_1));
    icmp_ln1057_fu_109_p2 <= "1" when (ap_sig_allocacmp_i_2 = capturesize) else "0";

    iq_in8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, iq_in8_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iq_in8_blk_n <= iq_in8_full_n;
        else 
            iq_in8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_in8_din <= (((((((((((((((p_Result_6_7_reg_380 & p_Result_4_7_reg_375) & p_Result_6_6_reg_370) & p_Result_4_6_reg_365) & p_Result_6_5_reg_360) & p_Result_4_5_reg_355) & p_Result_6_4_reg_350) & p_Result_4_4_reg_345) & p_Result_6_3_reg_340) & p_Result_4_3_reg_335) & p_Result_6_2_reg_330) & p_Result_4_2_reg_325) & p_Result_6_1_reg_320) & p_Result_4_1_reg_315) & trunc_ln674_1_reg_310) & trunc_ln674_reg_305);

    iq_in8_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iq_in8_write <= ap_const_logic_1;
        else 
            iq_in8_write <= ap_const_logic_0;
        end if; 
    end process;


    istream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, istream_V_TVALID, icmp_ln1057_fu_109_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istream_V_TDATA_blk_n <= istream_V_TVALID;
        else 
            istream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    istream_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1057_fu_109_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istream_V_TREADY <= ap_const_logic_1;
        else 
            istream_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    qstream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1057_fu_109_p2, qstream_V_TVALID, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qstream_V_TDATA_blk_n <= qstream_V_TVALID;
        else 
            qstream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    qstream_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1057_fu_109_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_fu_109_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qstream_V_TREADY <= ap_const_logic_1;
        else 
            qstream_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln674_1_fu_125_p1 <= qstream_V_TDATA(16 - 1 downto 0);
    trunc_ln674_fu_121_p1 <= istream_V_TDATA(16 - 1 downto 0);
end behav;
