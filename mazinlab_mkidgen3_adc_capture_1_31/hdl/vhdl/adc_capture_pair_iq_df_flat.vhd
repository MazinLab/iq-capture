-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_capture_pair_iq_df_flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    istream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    istream_V_TVALID : IN STD_LOGIC;
    istream_V_TREADY : OUT STD_LOGIC;
    qstream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qstream_V_TVALID : IN STD_LOGIC;
    qstream_V_TREADY : OUT STD_LOGIC;
    capturesize : IN STD_LOGIC_VECTOR (26 downto 0);
    iq_in8_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    iq_in8_full_n : IN STD_LOGIC;
    iq_in8_write : OUT STD_LOGIC;
    capturesize_c_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    capturesize_c_full_n : IN STD_LOGIC;
    capturesize_c_write : OUT STD_LOGIC );
end;


architecture behav of adc_capture_pair_iq_df_flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal capturesize_c_blk_n : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_idle : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_ready : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_write : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_istream_V_TREADY : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_qstream_V_TREADY : STD_LOGIC;
    signal grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_istream_V_U_apdone_blk : STD_LOGIC;
    signal istream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal istream_V_TVALID_int_regslice : STD_LOGIC;
    signal istream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_istream_V_U_ack_in : STD_LOGIC;
    signal regslice_both_qstream_V_U_apdone_blk : STD_LOGIC;
    signal qstream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal qstream_V_TVALID_int_regslice : STD_LOGIC;
    signal qstream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_qstream_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adc_capture_pair_iq_df_flat_Pipeline_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        istream_V_TVALID : IN STD_LOGIC;
        qstream_V_TVALID : IN STD_LOGIC;
        iq_in8_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        iq_in8_full_n : IN STD_LOGIC;
        iq_in8_write : OUT STD_LOGIC;
        capturesize : IN STD_LOGIC_VECTOR (26 downto 0);
        istream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        istream_V_TREADY : OUT STD_LOGIC;
        qstream_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        qstream_V_TREADY : OUT STD_LOGIC );
    end component;


    component adc_capture_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_pair_iq_df_flat_Pipeline_read_fu_58 : component adc_capture_pair_iq_df_flat_Pipeline_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start,
        ap_done => grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done,
        ap_idle => grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_idle,
        ap_ready => grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_ready,
        istream_V_TVALID => istream_V_TVALID_int_regslice,
        qstream_V_TVALID => qstream_V_TVALID_int_regslice,
        iq_in8_din => grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_din,
        iq_in8_full_n => iq_in8_full_n,
        iq_in8_write => grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_write,
        capturesize => capturesize,
        istream_V_TDATA => istream_V_TDATA_int_regslice,
        istream_V_TREADY => grp_pair_iq_df_flat_Pipeline_read_fu_58_istream_V_TREADY,
        qstream_V_TDATA => qstream_V_TDATA_int_regslice,
        qstream_V_TREADY => grp_pair_iq_df_flat_Pipeline_read_fu_58_qstream_V_TREADY);

    regslice_both_istream_V_U : component adc_capture_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istream_V_TDATA,
        vld_in => istream_V_TVALID,
        ack_in => regslice_both_istream_V_U_ack_in,
        data_out => istream_V_TDATA_int_regslice,
        vld_out => istream_V_TVALID_int_regslice,
        ack_out => istream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_istream_V_U_apdone_blk);

    regslice_both_qstream_V_U : component adc_capture_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => qstream_V_TDATA,
        vld_in => qstream_V_TVALID,
        ack_in => regslice_both_qstream_V_U_ack_in,
        data_out => qstream_V_TDATA_int_regslice,
        vld_out => qstream_V_TVALID_int_regslice,
        ack_out => qstream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_qstream_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, capturesize_c_full_n, grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (capturesize_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, capturesize_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (capturesize_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done)
    begin
        if ((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, capturesize_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (capturesize_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    capturesize_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, capturesize_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_c_blk_n <= capturesize_c_full_n;
        else 
            capturesize_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    capturesize_c_din <= capturesize;

    capturesize_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, capturesize_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (capturesize_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            capturesize_c_write <= ap_const_logic_1;
        else 
            capturesize_c_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start <= grp_pair_iq_df_flat_Pipeline_read_fu_58_ap_start_reg;
    iq_in8_din <= grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_din;

    iq_in8_write_assign_proc : process(grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            iq_in8_write <= grp_pair_iq_df_flat_Pipeline_read_fu_58_iq_in8_write;
        else 
            iq_in8_write <= ap_const_logic_0;
        end if; 
    end process;

    istream_V_TREADY <= regslice_both_istream_V_U_ack_in;

    istream_V_TREADY_int_regslice_assign_proc : process(grp_pair_iq_df_flat_Pipeline_read_fu_58_istream_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            istream_V_TREADY_int_regslice <= grp_pair_iq_df_flat_Pipeline_read_fu_58_istream_V_TREADY;
        else 
            istream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    qstream_V_TREADY <= regslice_both_qstream_V_U_ack_in;

    qstream_V_TREADY_int_regslice_assign_proc : process(grp_pair_iq_df_flat_Pipeline_read_fu_58_qstream_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qstream_V_TREADY_int_regslice <= grp_pair_iq_df_flat_Pipeline_read_fu_58_qstream_V_TREADY;
        else 
            qstream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
