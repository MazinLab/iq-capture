// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter_phase_filter_phase,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu21dr-ffvd1156-1-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.190000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=330,HLS_SYN_LUT=1015,HLS_VERSION=2021_1}" *)

module filter_phase (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TKEEP,
        instream_TSTRB,
        instream_TUSER,
        instream_TLAST,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TREADY,
        outstream_TKEEP,
        outstream_TSTRB,
        outstream_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter    ap_const_lv256_lc_1 = 256'd0;




// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [63:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [7:0] instream_TKEEP;
input  [7:0] instream_TSTRB;
input  [15:0] instream_TUSER;
input  [0:0] instream_TLAST;
output  [255:0] outstream_TDATA;
output   outstream_TVALID;
input   outstream_TREADY;
output  [31:0] outstream_TKEEP;
output  [31:0] outstream_TSTRB;
output  [0:0] outstream_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg instream_TREADY;
reg outstream_TVALID;

 reg    ap_rst_n_inv;
wire   [127:0] keep;
wire   [6:0] lastgrp;
reg    instream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    outstream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln222_reg_316;
reg   [6:0] lastgrp_read_reg_275;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] tmp_3_reg_280;
reg   [63:0] tmp_3_reg_280_pp0_iter1_reg;
wire   [1:0] tmp_5_fu_157_p1;
reg   [1:0] tmp_5_reg_288;
reg   [1:0] tmp_5_reg_288_pp0_iter1_reg;
reg   [6:0] tmp_6_reg_296;
wire   [0:0] p_keep_fetch_keep_fu_142_ap_return;
reg   [0:0] p_keep_reg_301;
wire   [0:0] icmp_ln208_fu_172_p2;
reg   [0:0] icmp_ln208_reg_306;
wire   [0:0] tmp_last_V_fu_177_p2;
reg   [0:0] tmp_last_V_reg_311;
wire   [0:0] and_ln222_fu_186_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire    p_keep_fetch_keep_fu_142_ap_ready;
wire   [6:0] p_keep_fetch_keep_fu_142_grp;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1049_fu_181_p2;
wire   [0:0] icmp_ln208_2_fu_240_p2;
wire   [255:0] p_Result_6_fu_224_p5;
wire   [255:0] p_Result_5_fu_213_p5;
wire   [0:0] icmp_ln208_1_fu_235_p2;
wire   [255:0] p_Result_4_fu_202_p5;
wire   [255:0] p_Result_s_fu_191_p5;
wire   [0:0] or_ln208_fu_253_p2;
wire   [255:0] select_ln208_fu_245_p3;
wire   [255:0] select_ln208_1_fu_259_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

filter_phase_fetch_keep p_keep_fetch_keep_fu_142(
    .ap_ready(p_keep_fetch_keep_fu_142_ap_ready),
    .keep(keep),
    .grp(p_keep_fetch_keep_fu_142_grp),
    .ap_return(p_keep_fetch_keep_fu_142_ap_return)
);

filter_phase_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .keep(keep),
    .lastgrp(lastgrp)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln222_reg_316 <= and_ln222_fu_186_p2;
        icmp_ln208_reg_306 <= icmp_ln208_fu_172_p2;
        lastgrp_read_reg_275 <= lastgrp;
        p_keep_reg_301 <= p_keep_fetch_keep_fu_142_ap_return;
        tmp_3_reg_280 <= instream_TDATA;
        tmp_3_reg_280_pp0_iter1_reg <= tmp_3_reg_280;
        tmp_5_reg_288 <= tmp_5_fu_157_p1;
        tmp_5_reg_288_pp0_iter1_reg <= tmp_5_reg_288;
        tmp_6_reg_296 <= {{instream_TUSER[8:2]}};
        tmp_last_V_reg_311 <= tmp_last_V_fu_177_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TDATA_blk_n = instream_TVALID;
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TREADY = 1'b1;
    end else begin
        instream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln222_reg_316) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        outstream_TDATA_blk_n = outstream_TREADY;
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln222_reg_316) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outstream_TVALID = 1'b1;
    end else begin
        outstream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln222_fu_186_p2 = (p_keep_reg_301 & icmp_ln1049_fu_181_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((instream_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((1'd1 == and_ln222_reg_316) & (ap_enable_reg_pp0_iter2 == 1'b1) & (outstream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((instream_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'd1 == and_ln222_reg_316) & (outstream_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((instream_TVALID == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'd1 == and_ln222_reg_316) & (outstream_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (instream_TVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'd1 == and_ln222_reg_316) & (outstream_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'd1 == and_ln222_reg_316) & (outstream_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln1049_fu_181_p2 = ((tmp_5_reg_288 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln208_1_fu_235_p2 = ((tmp_5_reg_288_pp0_iter1_reg == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln208_2_fu_240_p2 = ((tmp_5_reg_288_pp0_iter1_reg == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_172_p2 = ((tmp_5_reg_288 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln208_fu_253_p2 = (icmp_ln208_2_fu_240_p2 | icmp_ln208_1_fu_235_p2);

assign outstream_TDATA = ((or_ln208_fu_253_p2[0:0] == 1'b1) ? select_ln208_fu_245_p3 : select_ln208_1_fu_259_p3);

assign outstream_TKEEP = 32'd4294967295;

assign outstream_TLAST = tmp_last_V_reg_311;

assign outstream_TSTRB = 32'd0;

assign p_Result_4_fu_202_p5 = {{ap_const_lv256_lc_1[255:64]}, {tmp_3_reg_280_pp0_iter1_reg}};

assign p_Result_5_fu_213_p5 = {{ap_const_lv256_lc_1[255:128]}, {tmp_3_reg_280_pp0_iter1_reg}, {ap_const_lv256_lc_1[63:0]}};

assign p_Result_6_fu_224_p5 = {{ap_const_lv256_lc_1[255:192]}, {tmp_3_reg_280_pp0_iter1_reg}, {ap_const_lv256_lc_1[127:0]}};

assign p_Result_s_fu_191_p5 = {{tmp_3_reg_280_pp0_iter1_reg}, {ap_const_lv256_lc_1[191:0]}};

assign p_keep_fetch_keep_fu_142_grp = {{instream_TUSER[8:2]}};

assign select_ln208_1_fu_259_p3 = ((icmp_ln208_reg_306[0:0] == 1'b1) ? p_Result_4_fu_202_p5 : p_Result_s_fu_191_p5);

assign select_ln208_fu_245_p3 = ((icmp_ln208_2_fu_240_p2[0:0] == 1'b1) ? p_Result_6_fu_224_p5 : p_Result_5_fu_213_p5);

assign tmp_5_fu_157_p1 = instream_TUSER[1:0];

assign tmp_last_V_fu_177_p2 = ((tmp_6_reg_296 == lastgrp_read_reg_275) ? 1'b1 : 1'b0);


// synthesis translate_off
`include "filter_phase_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //filter_phase

