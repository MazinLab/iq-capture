// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="write_axi256_write_axi256,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu21dr-ffvd1156-1-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.327140,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=1434,HLS_SYN_LUT=1680,HLS_VERSION=2021_1}" *)

module write_axi256 (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        filtered_TDATA,
        filtered_TVALID,
        filtered_TREADY,
        filtered_TKEEP,
        filtered_TSTRB,
        filtered_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 256;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [255:0] filtered_TDATA;
input   filtered_TVALID;
output   filtered_TREADY;
input  [31:0] filtered_TKEEP;
input  [31:0] filtered_TSTRB;
input  [0:0] filtered_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [26:0] capturesize;
wire   [63:0] out_r;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state11;
reg   [25:0] trunc_ln_reg_175;
reg   [58:0] trunc_ln1_reg_181;
wire    grp_write_axi256_Pipeline_sync_fu_105_ap_start;
wire    grp_write_axi256_Pipeline_sync_fu_105_ap_done;
wire    grp_write_axi256_Pipeline_sync_fu_105_ap_idle;
wire    grp_write_axi256_Pipeline_sync_fu_105_ap_ready;
wire    grp_write_axi256_Pipeline_sync_fu_105_filtered_TREADY;
wire    grp_write_axi256_Pipeline_write_fu_117_ap_start;
wire    grp_write_axi256_Pipeline_write_fu_117_ap_done;
wire    grp_write_axi256_Pipeline_write_fu_117_ap_idle;
wire    grp_write_axi256_Pipeline_write_fu_117_ap_ready;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWVALID;
wire   [63:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWADDR;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWID;
wire   [31:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLEN;
wire   [2:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWSIZE;
wire   [1:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWBURST;
wire   [1:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLOCK;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWCACHE;
wire   [2:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWPROT;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWQOS;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWREGION;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWUSER;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WVALID;
wire   [255:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WDATA;
wire   [31:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WSTRB;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WLAST;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WID;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WUSER;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARVALID;
wire   [63:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARADDR;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARID;
wire   [31:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARLEN;
wire   [2:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARSIZE;
wire   [1:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARBURST;
wire   [1:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARLOCK;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARCACHE;
wire   [2:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARPROT;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARQOS;
wire   [3:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARREGION;
wire   [0:0] grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARUSER;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_RREADY;
wire    grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_BREADY;
wire    grp_write_axi256_Pipeline_write_fu_117_filtered_TREADY;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [0:0] gmem_AWID;
reg   [31:0] gmem_AWLEN;
reg   [2:0] gmem_AWSIZE;
reg   [1:0] gmem_AWBURST;
reg   [1:0] gmem_AWLOCK;
reg   [3:0] gmem_AWCACHE;
reg   [2:0] gmem_AWPROT;
reg   [3:0] gmem_AWQOS;
reg   [3:0] gmem_AWREGION;
reg   [0:0] gmem_AWUSER;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [255:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_write_axi256_Pipeline_write_fu_117_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire  signed [63:0] sext_ln125_fu_153_p1;
wire   [31:0] zext_ln125_fu_170_p1;
wire   [26:0] and_ln_fu_163_p3;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    regslice_both_filtered_V_data_V_U_apdone_blk;
wire   [255:0] filtered_TDATA_int_regslice;
wire    filtered_TVALID_int_regslice;
reg    filtered_TREADY_int_regslice;
wire    regslice_both_filtered_V_data_V_U_ack_in;
wire    regslice_both_filtered_V_keep_V_U_apdone_blk;
wire   [31:0] filtered_TKEEP_int_regslice;
wire    regslice_both_filtered_V_keep_V_U_vld_out;
wire    regslice_both_filtered_V_keep_V_U_ack_in;
wire    regslice_both_filtered_V_strb_V_U_apdone_blk;
wire   [31:0] filtered_TSTRB_int_regslice;
wire    regslice_both_filtered_V_strb_V_U_vld_out;
wire    regslice_both_filtered_V_strb_V_U_ack_in;
wire    regslice_both_filtered_V_last_V_U_apdone_blk;
wire   [0:0] filtered_TLAST_int_regslice;
wire    regslice_both_filtered_V_last_V_U_vld_out;
wire    regslice_both_filtered_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg = 1'b0;
#0 grp_write_axi256_Pipeline_write_fu_117_ap_start_reg = 1'b0;
end

write_axi256_write_axi256_Pipeline_sync grp_write_axi256_Pipeline_sync_fu_105(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_axi256_Pipeline_sync_fu_105_ap_start),
    .ap_done(grp_write_axi256_Pipeline_sync_fu_105_ap_done),
    .ap_idle(grp_write_axi256_Pipeline_sync_fu_105_ap_idle),
    .ap_ready(grp_write_axi256_Pipeline_sync_fu_105_ap_ready),
    .filtered_TVALID(filtered_TVALID_int_regslice),
    .filtered_TDATA(filtered_TDATA_int_regslice),
    .filtered_TREADY(grp_write_axi256_Pipeline_sync_fu_105_filtered_TREADY),
    .filtered_TKEEP(filtered_TKEEP_int_regslice),
    .filtered_TSTRB(filtered_TSTRB_int_regslice),
    .filtered_TLAST(filtered_TLAST_int_regslice)
);

write_axi256_write_axi256_Pipeline_write grp_write_axi256_Pipeline_write_fu_117(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_axi256_Pipeline_write_fu_117_ap_start),
    .ap_done(grp_write_axi256_Pipeline_write_fu_117_ap_done),
    .ap_idle(grp_write_axi256_Pipeline_write_fu_117_ap_idle),
    .ap_ready(grp_write_axi256_Pipeline_write_fu_117_ap_ready),
    .filtered_TVALID(filtered_TVALID_int_regslice),
    .m_axi_gmem_AWVALID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(256'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(gmem_BRESP),
    .m_axi_gmem_BID(gmem_BID),
    .m_axi_gmem_BUSER(gmem_BUSER),
    .sext_ln125(trunc_ln1_reg_181),
    .trunc_ln(trunc_ln_reg_175),
    .filtered_TDATA(filtered_TDATA_int_regslice),
    .filtered_TREADY(grp_write_axi256_Pipeline_write_fu_117_filtered_TREADY),
    .filtered_TKEEP(filtered_TKEEP_int_regslice),
    .filtered_TSTRB(filtered_TSTRB_int_regslice),
    .filtered_TLAST(filtered_TLAST_int_regslice)
);

write_axi256_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .capturesize(capturesize),
    .out_r(out_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

write_axi256_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 1 ),
    .NUM_WRITE_OUTSTANDING( 1 ),
    .MAX_READ_BURST_LENGTH( 1 ),
    .MAX_WRITE_BURST_LENGTH( 128 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(gmem_AWID),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(gmem_AWSIZE),
    .I_AWLOCK(gmem_AWLOCK),
    .I_AWCACHE(gmem_AWCACHE),
    .I_AWQOS(gmem_AWQOS),
    .I_AWPROT(gmem_AWPROT),
    .I_AWUSER(gmem_AWUSER),
    .I_AWBURST(gmem_AWBURST),
    .I_AWREGION(gmem_AWREGION),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WDATA),
    .I_WID(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WID),
    .I_WUSER(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WUSER),
    .I_WLAST(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WLAST),
    .I_WSTRB(grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

write_axi256_regslice_both #(
    .DataWidth( 256 ))
regslice_both_filtered_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(filtered_TDATA),
    .vld_in(filtered_TVALID),
    .ack_in(regslice_both_filtered_V_data_V_U_ack_in),
    .data_out(filtered_TDATA_int_regslice),
    .vld_out(filtered_TVALID_int_regslice),
    .ack_out(filtered_TREADY_int_regslice),
    .apdone_blk(regslice_both_filtered_V_data_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_filtered_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(filtered_TKEEP),
    .vld_in(filtered_TVALID),
    .ack_in(regslice_both_filtered_V_keep_V_U_ack_in),
    .data_out(filtered_TKEEP_int_regslice),
    .vld_out(regslice_both_filtered_V_keep_V_U_vld_out),
    .ack_out(filtered_TREADY_int_regslice),
    .apdone_blk(regslice_both_filtered_V_keep_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_filtered_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(filtered_TSTRB),
    .vld_in(filtered_TVALID),
    .ack_in(regslice_both_filtered_V_strb_V_U_ack_in),
    .data_out(filtered_TSTRB_int_regslice),
    .vld_out(regslice_both_filtered_V_strb_V_U_vld_out),
    .ack_out(filtered_TREADY_int_regslice),
    .apdone_blk(regslice_both_filtered_V_strb_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 1 ))
regslice_both_filtered_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(filtered_TLAST),
    .vld_in(filtered_TVALID),
    .ack_in(regslice_both_filtered_V_last_V_U_ack_in),
    .data_out(filtered_TLAST_int_regslice),
    .vld_out(regslice_both_filtered_V_last_V_U_vld_out),
    .ack_out(filtered_TREADY_int_regslice),
    .apdone_blk(regslice_both_filtered_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg <= 1'b1;
        end else if ((grp_write_axi256_Pipeline_sync_fu_105_ap_ready == 1'b1)) begin
            grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_axi256_Pipeline_write_fu_117_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_write_axi256_Pipeline_write_fu_117_ap_start_reg <= 1'b1;
        end else if ((grp_write_axi256_Pipeline_write_fu_117_ap_ready == 1'b1)) begin
            grp_write_axi256_Pipeline_write_fu_117_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln1_reg_181 <= {{out_r[63:5]}};
        trunc_ln_reg_175 <= {{capturesize[26:1]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_write_axi256_Pipeline_sync_fu_105_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_write_axi256_Pipeline_write_fu_117_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        filtered_TREADY_int_regslice = grp_write_axi256_Pipeline_write_fu_117_filtered_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filtered_TREADY_int_regslice = grp_write_axi256_Pipeline_sync_fu_105_filtered_TREADY;
    end else begin
        filtered_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_AWADDR = sext_ln125_fu_153_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWADDR = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWADDR;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWBURST = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWBURST;
    end else begin
        gmem_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWCACHE = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWCACHE;
    end else begin
        gmem_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWID = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWID;
    end else begin
        gmem_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_AWLEN = zext_ln125_fu_170_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWLEN = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLEN;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWLOCK = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWLOCK;
    end else begin
        gmem_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWPROT = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWPROT;
    end else begin
        gmem_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWQOS = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWQOS;
    end else begin
        gmem_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWREGION = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWREGION;
    end else begin
        gmem_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWSIZE = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWSIZE;
    end else begin
        gmem_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWUSER = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWUSER;
    end else begin
        gmem_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWVALID = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_BREADY = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_WVALID = grp_write_axi256_Pipeline_write_fu_117_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_write_axi256_Pipeline_sync_fu_105_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_write_axi256_Pipeline_write_fu_117_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln_fu_163_p3 = {{trunc_ln_reg_175}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign filtered_TREADY = regslice_both_filtered_V_data_V_U_ack_in;

assign grp_write_axi256_Pipeline_sync_fu_105_ap_start = grp_write_axi256_Pipeline_sync_fu_105_ap_start_reg;

assign grp_write_axi256_Pipeline_write_fu_117_ap_start = grp_write_axi256_Pipeline_write_fu_117_ap_start_reg;

assign sext_ln125_fu_153_p1 = $signed(trunc_ln1_reg_181);

assign zext_ln125_fu_170_p1 = and_ln_fu_163_p3;


// synthesis translate_off
`include "write_axi256_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //write_axi256

