// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module adc_capture_pair_iq_df_flat_Pipeline_read (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        capturesize,
        istream_V_TDATA,
        istream_V_TVALID,
        istream_V_TREADY,
        qstream_V_TDATA,
        qstream_V_TVALID,
        qstream_V_TREADY,
        iq_in8_din,
        iq_in8_full_n,
        iq_in8_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [26:0] capturesize;
input  [127:0] istream_V_TDATA;
input   istream_V_TVALID;
output   istream_V_TREADY;
input  [127:0] qstream_V_TDATA;
input   qstream_V_TVALID;
output   qstream_V_TREADY;
output  [255:0] iq_in8_din;
input   iq_in8_full_n;
output   iq_in8_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg iq_in8_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    istream_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln1057_fu_109_p2;
reg    qstream_V_TDATA_blk_n;
reg    iq_in8_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] trunc_ln674_fu_120_p1;
reg   [15:0] trunc_ln674_reg_309;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] trunc_ln674_1_fu_124_p1;
reg   [15:0] trunc_ln674_1_reg_314;
reg   [15:0] p_Result_4_1_reg_319;
reg   [15:0] p_Result_6_1_reg_324;
reg   [15:0] p_Result_4_2_reg_329;
reg   [15:0] p_Result_6_2_reg_334;
reg   [15:0] p_Result_4_3_reg_339;
reg   [15:0] p_Result_6_3_reg_344;
reg   [15:0] p_Result_4_4_reg_349;
reg   [15:0] p_Result_6_4_reg_354;
reg   [15:0] p_Result_4_5_reg_359;
reg   [15:0] p_Result_6_5_reg_364;
reg   [15:0] p_Result_4_6_reg_369;
reg   [15:0] p_Result_6_6_reg_374;
reg   [15:0] p_Result_4_7_reg_379;
reg   [15:0] p_Result_6_7_reg_384;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [26:0] i_fu_72;
wire   [26:0] i_3_fu_114_p2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_istream_V_U_apdone_blk;
wire   [127:0] istream_V_TDATA_int_regslice;
wire    istream_V_TVALID_int_regslice;
reg    istream_V_TREADY_int_regslice;
wire    regslice_both_istream_V_U_ack_in;
wire    regslice_both_qstream_V_U_apdone_blk;
wire   [127:0] qstream_V_TDATA_int_regslice;
wire    qstream_V_TVALID_int_regslice;
reg    qstream_V_TREADY_int_regslice;
wire    regslice_both_qstream_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

adc_capture_regslice_both #(
    .DataWidth( 128 ))
regslice_both_istream_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istream_V_TDATA),
    .vld_in(istream_V_TVALID),
    .ack_in(regslice_both_istream_V_U_ack_in),
    .data_out(istream_V_TDATA_int_regslice),
    .vld_out(istream_V_TVALID_int_regslice),
    .ack_out(istream_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_istream_V_U_apdone_blk)
);

adc_capture_regslice_both #(
    .DataWidth( 128 ))
regslice_both_qstream_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(qstream_V_TDATA),
    .vld_in(qstream_V_TVALID),
    .ack_in(regslice_both_qstream_V_U_ack_in),
    .data_out(qstream_V_TDATA_int_regslice),
    .vld_out(qstream_V_TVALID_int_regslice),
    .ack_out(qstream_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_qstream_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_72 <= 27'd0;
    end else if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_72 <= i_3_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_4_1_reg_319 <= {{istream_V_TDATA_int_regslice[31:16]}};
        p_Result_4_2_reg_329 <= {{istream_V_TDATA_int_regslice[47:32]}};
        p_Result_4_3_reg_339 <= {{istream_V_TDATA_int_regslice[63:48]}};
        p_Result_4_4_reg_349 <= {{istream_V_TDATA_int_regslice[79:64]}};
        p_Result_4_5_reg_359 <= {{istream_V_TDATA_int_regslice[95:80]}};
        p_Result_4_6_reg_369 <= {{istream_V_TDATA_int_regslice[111:96]}};
        p_Result_4_7_reg_379 <= {{istream_V_TDATA_int_regslice[127:112]}};
        p_Result_6_1_reg_324 <= {{qstream_V_TDATA_int_regslice[31:16]}};
        p_Result_6_2_reg_334 <= {{qstream_V_TDATA_int_regslice[47:32]}};
        p_Result_6_3_reg_344 <= {{qstream_V_TDATA_int_regslice[63:48]}};
        p_Result_6_4_reg_354 <= {{qstream_V_TDATA_int_regslice[79:64]}};
        p_Result_6_5_reg_364 <= {{qstream_V_TDATA_int_regslice[95:80]}};
        p_Result_6_6_reg_374 <= {{qstream_V_TDATA_int_regslice[111:96]}};
        p_Result_6_7_reg_384 <= {{qstream_V_TDATA_int_regslice[127:112]}};
        trunc_ln674_1_reg_314 <= trunc_ln674_1_fu_124_p1;
        trunc_ln674_reg_309 <= trunc_ln674_fu_120_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln1057_fu_109_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq_in8_blk_n = iq_in8_full_n;
    end else begin
        iq_in8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq_in8_write = 1'b1;
    end else begin
        iq_in8_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        istream_V_TDATA_blk_n = istream_V_TVALID_int_regslice;
    end else begin
        istream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        istream_V_TREADY_int_regslice = 1'b1;
    end else begin
        istream_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qstream_V_TDATA_blk_n = qstream_V_TVALID_int_regslice;
    end else begin
        qstream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qstream_V_TREADY_int_regslice = 1'b1;
    end else begin
        qstream_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln1057_fu_109_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (iq_in8_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_fu_109_p2 == 1'd0) & (qstream_V_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_fu_109_p2 == 1'd0) & (istream_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (iq_in8_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_fu_109_p2 == 1'd0) & (qstream_V_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_fu_109_p2 == 1'd0) & (istream_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (iq_in8_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1057_fu_109_p2 == 1'd0) & (qstream_V_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_fu_109_p2 == 1'd0) & (istream_V_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((icmp_ln1057_fu_109_p2 == 1'd0) & (qstream_V_TVALID_int_regslice == 1'b0)) | ((icmp_ln1057_fu_109_p2 == 1'd0) & (istream_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (iq_in8_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_3_fu_114_p2 = (i_fu_72 + 27'd1);

assign icmp_ln1057_fu_109_p2 = ((i_fu_72 == capturesize) ? 1'b1 : 1'b0);

assign iq_in8_din = {{{{{{{{{{{{{{{{p_Result_6_7_reg_384}, {p_Result_4_7_reg_379}}, {p_Result_6_6_reg_374}}, {p_Result_4_6_reg_369}}, {p_Result_6_5_reg_364}}, {p_Result_4_5_reg_359}}, {p_Result_6_4_reg_354}}, {p_Result_4_4_reg_349}}, {p_Result_6_3_reg_344}}, {p_Result_4_3_reg_339}}, {p_Result_6_2_reg_334}}, {p_Result_4_2_reg_329}}, {p_Result_6_1_reg_324}}, {p_Result_4_1_reg_319}}, {trunc_ln674_1_reg_314}}, {trunc_ln674_reg_309}};

assign istream_V_TREADY = regslice_both_istream_V_U_ack_in;

assign qstream_V_TREADY = regslice_both_qstream_V_U_ack_in;

assign trunc_ln674_1_fu_124_p1 = qstream_V_TDATA_int_regslice[15:0];

assign trunc_ln674_fu_120_p1 = istream_V_TDATA_int_regslice[15:0];

endmodule //adc_capture_pair_iq_df_flat_Pipeline_read
