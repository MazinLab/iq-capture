-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_capture is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    istream_data_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    istream_data_V_TVALID : IN STD_LOGIC;
    istream_data_V_TREADY : OUT STD_LOGIC;
    qstream_data_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    qstream_data_V_TVALID : IN STD_LOGIC;
    qstream_data_V_TREADY : OUT STD_LOGIC;
    adcout_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    adcout_TVALID : OUT STD_LOGIC;
    adcout_TREADY : IN STD_LOGIC;
    adcout_TID : OUT STD_LOGIC_VECTOR (2 downto 0);
    adcout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of adc_capture is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adc_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.672000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=371,HLS_SYN_LUT=239,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_2F : STD_LOGIC_VECTOR (8 downto 0) := "000101111";
    constant ap_const_lv9_30 : STD_LOGIC_VECTOR (8 downto 0) := "000110000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_4F : STD_LOGIC_VECTOR (8 downto 0) := "001001111";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv9_5F : STD_LOGIC_VECTOR (8 downto 0) := "001011111";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";
    constant ap_const_lv9_6F : STD_LOGIC_VECTOR (8 downto 0) := "001101111";
    constant ap_const_lv9_70 : STD_LOGIC_VECTOR (8 downto 0) := "001110000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal capturesize_V : STD_LOGIC_VECTOR (31 downto 0);
    signal configure : STD_LOGIC;
    signal p_remaining_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal istream_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal qstream_data_V_TDATA_blk_n : STD_LOGIC;
    signal adcout_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal configure_read_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal configure_read_reg_327_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_416_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal configure_read_read_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op33_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_adcout_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op49_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln321_fu_124_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_reg_331 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_336 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_341 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_346 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_351 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_361 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_1_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_1_reg_371 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_376 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_381 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_386 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_391 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_401 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_406 : STD_LOGIC_VECTOR (15 downto 0);
    signal iqtmp_last_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iqtmp_last_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln701_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_istream_data_V_U_apdone_blk : STD_LOGIC;
    signal istream_data_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal istream_data_V_TVALID_int : STD_LOGIC;
    signal istream_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_istream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_qstream_data_V_U_apdone_blk : STD_LOGIC;
    signal qstream_data_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal qstream_data_V_TVALID_int : STD_LOGIC;
    signal qstream_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_qstream_data_V_U_ack_in : STD_LOGIC;
    signal adcout_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal adcout_TVALID_int : STD_LOGIC;
    signal adcout_TREADY_int : STD_LOGIC;
    signal regslice_both_adcout_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_adcout_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_adcout_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_adcout_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_adcout_last_U_apdone_blk : STD_LOGIC;
    signal adcout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_adcout_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_adcout_last_U_vld_out : STD_LOGIC;
    signal ap_condition_176 : BOOLEAN;

    component adc_capture_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        capturesize_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        configure : OUT STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    adc_capture_control_s_axi_U : component adc_capture_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        capturesize_V => capturesize_V,
        configure => configure);

    regslice_both_istream_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => istream_data_V_TDATA,
        vld_in => istream_data_V_TVALID,
        ack_in => regslice_both_istream_data_V_U_ack_in,
        data_out => istream_data_V_TDATA_int,
        vld_out => istream_data_V_TVALID_int,
        ack_out => istream_data_V_TREADY_int,
        apdone_blk => regslice_both_istream_data_V_U_apdone_blk);

    regslice_both_qstream_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => qstream_data_V_TDATA,
        vld_in => qstream_data_V_TVALID,
        ack_in => regslice_both_qstream_data_V_U_ack_in,
        data_out => qstream_data_V_TDATA_int,
        vld_out => qstream_data_V_TVALID_int,
        ack_out => qstream_data_V_TREADY_int,
        apdone_blk => regslice_both_qstream_data_V_U_apdone_blk);

    regslice_both_adcout_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => adcout_TDATA_int,
        vld_in => adcout_TVALID_int,
        ack_in => adcout_TREADY_int,
        data_out => adcout_TDATA,
        vld_out => regslice_both_adcout_data_V_U_vld_out,
        ack_out => adcout_TREADY,
        apdone_blk => regslice_both_adcout_data_V_U_apdone_blk);

    regslice_both_adcout_id_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv3_0,
        vld_in => adcout_TVALID_int,
        ack_in => regslice_both_adcout_id_V_U_ack_in_dummy,
        data_out => adcout_TID,
        vld_out => regslice_both_adcout_id_V_U_vld_out,
        ack_out => adcout_TREADY,
        apdone_blk => regslice_both_adcout_id_V_U_apdone_blk);

    regslice_both_w1_adcout_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => adcout_TLAST_int,
        vld_in => adcout_TVALID_int,
        ack_in => regslice_both_w1_adcout_last_U_ack_in_dummy,
        data_out => adcout_TLAST,
        vld_out => regslice_both_w1_adcout_last_U_vld_out,
        ack_out => adcout_TREADY,
        apdone_blk => regslice_both_w1_adcout_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    p_remaining_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_176)) then
                if ((configure_read_read_fu_86_p2 = ap_const_lv1_1)) then 
                    p_remaining_V <= capturesize_V;
                elsif (((configure_read_read_fu_86_p2 = ap_const_lv1_0) and (icmp_ln895_fu_282_p2 = ap_const_lv1_0))) then 
                    p_remaining_V <= add_ln701_fu_288_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                configure_read_reg_327 <= (0=>configure, others=>'-');
                configure_read_reg_327_pp0_iter1_reg <= configure_read_reg_327;
                icmp_ln895_reg_416_pp0_iter1_reg <= icmp_ln895_reg_416;
                iqtmp_last_reg_411 <= iqtmp_last_fu_276_p2;
                tmp_10_reg_391 <= qstream_data_V_TDATA_int(79 downto 64);
                tmp_11_reg_396 <= qstream_data_V_TDATA_int(95 downto 80);
                tmp_12_reg_401 <= qstream_data_V_TDATA_int(111 downto 96);
                tmp_13_reg_406 <= qstream_data_V_TDATA_int(127 downto 112);
                tmp_1_reg_336 <= istream_data_V_TDATA_int(31 downto 16);
                tmp_2_reg_341 <= istream_data_V_TDATA_int(47 downto 32);
                tmp_3_reg_346 <= istream_data_V_TDATA_int(63 downto 48);
                tmp_4_reg_351 <= istream_data_V_TDATA_int(79 downto 64);
                tmp_5_reg_356 <= istream_data_V_TDATA_int(95 downto 80);
                tmp_6_reg_361 <= istream_data_V_TDATA_int(111 downto 96);
                tmp_7_reg_366 <= istream_data_V_TDATA_int(127 downto 112);
                tmp_8_reg_386 <= qstream_data_V_TDATA_int(63 downto 48);
                tmp_9_reg_376 <= qstream_data_V_TDATA_int(31 downto 16);
                tmp_s_reg_381 <= qstream_data_V_TDATA_int(47 downto 32);
                trunc_ln321_1_reg_371 <= trunc_ln321_1_fu_198_p1;
                trunc_ln321_reg_331 <= trunc_ln321_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((configure_read_read_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln895_reg_416 <= icmp_ln895_fu_282_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    adcout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, configure_read_reg_327, icmp_ln895_reg_416, ap_enable_reg_pp0_iter2, configure_read_reg_327_pp0_iter1_reg, icmp_ln895_reg_416_pp0_iter1_reg, adcout_TREADY_int)
    begin
        if ((((icmp_ln895_reg_416_pp0_iter1_reg = ap_const_lv1_0) and (configure_read_reg_327_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln895_reg_416 = ap_const_lv1_0) and (configure_read_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            adcout_TDATA_blk_n <= adcout_TREADY_int;
        else 
            adcout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    adcout_TDATA_int <= (((((((((((((((tmp_13_reg_406 & tmp_7_reg_366) & tmp_12_reg_401) & tmp_6_reg_361) & tmp_11_reg_396) & tmp_5_reg_356) & tmp_10_reg_391) & tmp_4_reg_351) & tmp_8_reg_386) & tmp_3_reg_346) & tmp_s_reg_381) & tmp_2_reg_341) & tmp_9_reg_376) & tmp_1_reg_336) & trunc_ln321_1_reg_371) & trunc_ln321_reg_331);
    adcout_TLAST_int <= iqtmp_last_reg_411(0);
    adcout_TVALID <= regslice_both_adcout_data_V_U_vld_out;

    adcout_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op33_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            adcout_TVALID_int <= ap_const_logic_1;
        else 
            adcout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln701_fu_288_p2 <= std_logic_vector(unsigned(p_remaining_V) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, regslice_both_adcout_data_V_U_apdone_blk, istream_data_V_TVALID_int, qstream_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (regslice_both_adcout_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((qstream_data_V_TVALID_int = ap_const_logic_0) or (istream_data_V_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_io, regslice_both_adcout_data_V_U_apdone_blk, ap_block_state3_io, istream_data_V_TVALID_int, qstream_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_adcout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((qstream_data_V_TVALID_int = ap_const_logic_0) or (istream_data_V_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_io, regslice_both_adcout_data_V_U_apdone_blk, ap_block_state3_io, istream_data_V_TVALID_int, qstream_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_adcout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((qstream_data_V_TVALID_int = ap_const_logic_0) or (istream_data_V_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(istream_data_V_TVALID_int, qstream_data_V_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((qstream_data_V_TVALID_int = ap_const_logic_0) or (istream_data_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op33_write_state2, adcout_TREADY_int)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = adcout_TREADY_int) and (ap_predicate_op33_write_state2 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(ap_predicate_op49_write_state3, adcout_TREADY_int)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = adcout_TREADY_int) and (ap_predicate_op49_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_adcout_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_adcout_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_176_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_176 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op33_write_state2_assign_proc : process(configure_read_reg_327, icmp_ln895_reg_416)
    begin
                ap_predicate_op33_write_state2 <= ((icmp_ln895_reg_416 = ap_const_lv1_0) and (configure_read_reg_327 = ap_const_lv1_0));
    end process;


    ap_predicate_op49_write_state3_assign_proc : process(configure_read_reg_327_pp0_iter1_reg, icmp_ln895_reg_416_pp0_iter1_reg)
    begin
                ap_predicate_op49_write_state3 <= ((icmp_ln895_reg_416_pp0_iter1_reg = ap_const_lv1_0) and (configure_read_reg_327_pp0_iter1_reg = ap_const_lv1_0));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    configure_read_read_fu_86_p2 <= (0=>configure, others=>'-');
    icmp_ln895_fu_282_p2 <= "1" when (p_remaining_V = ap_const_lv32_0) else "0";
    iqtmp_last_fu_276_p2 <= "1" when (p_remaining_V = ap_const_lv32_1) else "0";

    istream_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, istream_data_V_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istream_data_V_TDATA_blk_n <= istream_data_V_TVALID_int;
        else 
            istream_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    istream_data_V_TREADY_assign_proc : process(istream_data_V_TVALID, regslice_both_istream_data_V_U_ack_in)
    begin
        if (((istream_data_V_TVALID = ap_const_logic_1) and (regslice_both_istream_data_V_U_ack_in = ap_const_logic_1))) then 
            istream_data_V_TREADY <= ap_const_logic_1;
        else 
            istream_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    istream_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            istream_data_V_TREADY_int <= ap_const_logic_1;
        else 
            istream_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    qstream_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, qstream_data_V_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            qstream_data_V_TDATA_blk_n <= qstream_data_V_TVALID_int;
        else 
            qstream_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    qstream_data_V_TREADY_assign_proc : process(qstream_data_V_TVALID, regslice_both_qstream_data_V_U_ack_in)
    begin
        if (((regslice_both_qstream_data_V_U_ack_in = ap_const_logic_1) and (qstream_data_V_TVALID = ap_const_logic_1))) then 
            qstream_data_V_TREADY <= ap_const_logic_1;
        else 
            qstream_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    qstream_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            qstream_data_V_TREADY_int <= ap_const_logic_1;
        else 
            qstream_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln321_1_fu_198_p1 <= qstream_data_V_TDATA_int(16 - 1 downto 0);
    trunc_ln321_fu_124_p1 <= istream_data_V_TDATA_int(16 - 1 downto 0);
end behav;
