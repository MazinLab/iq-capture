// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="phase_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.121000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=372,HLS_SYN_LUT=401,HLS_VERSION=2019_2_1}" *)

module phase_capture (
        ap_clk,
        ap_rst_n,
        phasestream_TDATA,
        phasestream_TVALID,
        phasestream_TREADY,
        phasestream_TUSER,
        phasestream_TLAST,
        phaseout_TDATA,
        phaseout_TVALID,
        phaseout_TREADY,
        phaseout_TKEEP,
        phaseout_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ctrl_clk,
        ap_rst_n_ctrl_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] phasestream_TDATA;
input   phasestream_TVALID;
output   phasestream_TREADY;
input  [8:0] phasestream_TUSER;
input   phasestream_TLAST;
output  [63:0] phaseout_TDATA;
output   phaseout_TVALID;
input   phaseout_TREADY;
output  [7:0] phaseout_TKEEP;
output   phaseout_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ctrl_clk;
input   ap_rst_n_ctrl_clk;

reg phasestream_TREADY;

 reg    ap_rst_n_inv;
wire   [7:0] keep_V_address0;
reg    keep_V_ce0;
wire   [7:0] keep_V_q0;
wire   [31:0] capturesize_V;
reg   [31:0] capturesize_V_0_data_reg;
reg    capturesize_V_0_vld_reg;
reg    capturesize_V_0_ack_out;
reg   [31:0] tocapture_V;
reg    phasestream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    phaseout_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln30_reg_276;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] and_ln30_reg_276_pp0_iter3_reg;
reg    ap_rst_n_ctrl_clk_inv;
reg   [63:0] phaseout_data_V_tmp_reg_240;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
wire    regslice_both_phaseout_data_V_U_apdone_blk;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] phaseout_data_V_tmp_reg_240_pp0_iter1_reg;
reg   [63:0] phaseout_data_V_tmp_reg_240_pp0_iter2_reg;
wire   [0:0] ret_V_1_fu_120_p1;
reg   [0:0] ret_V_1_reg_245;
wire   [0:0] icmp_ln879_fu_139_p2;
reg   [0:0] icmp_ln879_reg_255;
reg   [0:0] icmp_ln879_reg_255_pp0_iter1_reg;
reg   [31:0] capturesize_V_read_reg_260;
wire   [3:0] select_ln28_fu_159_p3;
reg   [3:0] select_ln28_reg_265;
reg   [3:0] select_ln28_reg_265_pp0_iter2_reg;
wire   [31:0] keepval_V_fu_166_p1;
reg   [31:0] keepval_V_reg_271;
wire   [0:0] and_ln30_fu_179_p2;
wire   [31:0] select_ln33_fu_201_p3;
reg   [31:0] select_ln33_reg_280;
wire   [7:0] trunc_ln209_fu_215_p1;
reg   [7:0] trunc_ln209_reg_286;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln544_fu_134_p1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] ret_V_fu_124_p4;
wire   [0:0] icmp_ln895_2_fu_149_p2;
wire   [3:0] zext_ln28_fu_155_p1;
wire   [3:0] trunc_ln1372_fu_145_p1;
wire   [0:0] icmp_ln30_fu_173_p2;
wire   [0:0] icmp_ln895_fu_189_p2;
wire   [31:0] sub_ln214_fu_195_p2;
wire   [0:0] icmp_ln895_1_fu_222_p2;
wire   [7:0] zext_ln28_1_fu_219_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_phasestream_data_V_U_apdone_blk;
wire   [63:0] phasestream_TDATA_int;
wire    phasestream_TVALID_int;
reg    phasestream_TREADY_int;
wire    regslice_both_phasestream_data_V_U_ack_in;
wire    regslice_both_phasestream_user_V_U_apdone_blk;
wire   [8:0] phasestream_TUSER_int;
wire    regslice_both_phasestream_user_V_U_vld_out;
wire    regslice_both_phasestream_user_V_U_ack_in;
wire    regslice_both_w1_phasestream_last_U_apdone_blk;
wire    phasestream_TLAST_int;
wire    regslice_both_w1_phasestream_last_U_vld_out;
wire    regslice_both_w1_phasestream_last_U_ack_in;
reg    phaseout_TVALID_int;
wire    phaseout_TREADY_int;
wire    regslice_both_phaseout_data_V_U_vld_out;
wire    regslice_both_phaseout_keep_V_U_apdone_blk;
wire   [7:0] phaseout_TKEEP_int;
wire    regslice_both_phaseout_keep_V_U_ack_in_dummy;
wire    regslice_both_phaseout_keep_V_U_vld_out;
wire    regslice_both_w1_phaseout_last_U_apdone_blk;
wire    phaseout_TLAST_int;
wire    regslice_both_w1_phaseout_last_U_ack_in_dummy;
wire    regslice_both_w1_phaseout_last_U_vld_out;

// power-on initialization
initial begin
#0 capturesize_V_0_data_reg = 32'd0;
#0 capturesize_V_0_vld_reg = 1'b0;
#0 tocapture_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

phase_capture_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
phase_capture_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ctrl_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .keep_V_address0(keep_V_address0),
    .keep_V_ce0(keep_V_ce0),
    .keep_V_q0(keep_V_q0),
    .capturesize_V(capturesize_V),
    .clk(ap_clk),
    .rst(ap_rst_n_ctrl_clk_inv)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_phasestream_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phasestream_TDATA),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_data_V_U_ack_in),
    .data_out(phasestream_TDATA_int),
    .vld_out(phasestream_TVALID_int),
    .ack_out(phasestream_TREADY_int),
    .apdone_blk(regslice_both_phasestream_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 9 ))
regslice_both_phasestream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phasestream_TUSER),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_phasestream_user_V_U_ack_in),
    .data_out(phasestream_TUSER_int),
    .vld_out(regslice_both_phasestream_user_V_U_vld_out),
    .ack_out(phasestream_TREADY_int),
    .apdone_blk(regslice_both_phasestream_user_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_phasestream_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phasestream_TLAST),
    .vld_in(phasestream_TVALID),
    .ack_in(regslice_both_w1_phasestream_last_U_ack_in),
    .data_out(phasestream_TLAST_int),
    .vld_out(regslice_both_w1_phasestream_last_U_vld_out),
    .ack_out(phasestream_TREADY_int),
    .apdone_blk(regslice_both_w1_phasestream_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_phaseout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phaseout_data_V_tmp_reg_240_pp0_iter2_reg),
    .vld_in(phaseout_TVALID_int),
    .ack_in(phaseout_TREADY_int),
    .data_out(phaseout_TDATA),
    .vld_out(regslice_both_phaseout_data_V_U_vld_out),
    .ack_out(phaseout_TREADY),
    .apdone_blk(regslice_both_phaseout_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_phaseout_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phaseout_TKEEP_int),
    .vld_in(phaseout_TVALID_int),
    .ack_in(regslice_both_phaseout_keep_V_U_ack_in_dummy),
    .data_out(phaseout_TKEEP),
    .vld_out(regslice_both_phaseout_keep_V_U_vld_out),
    .ack_out(phaseout_TREADY),
    .apdone_blk(regslice_both_phaseout_keep_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_phaseout_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phaseout_TLAST_int),
    .vld_in(phaseout_TVALID_int),
    .ack_in(regslice_both_w1_phaseout_last_U_ack_in_dummy),
    .data_out(phaseout_TLAST),
    .vld_out(regslice_both_w1_phaseout_last_U_vld_out),
    .ack_out(phaseout_TREADY),
    .apdone_blk(regslice_both_w1_phaseout_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'd1 == and_ln30_fu_179_p2)) begin
            tocapture_V <= select_ln33_fu_201_p3;
        end else if ((1'd0 == and_ln30_fu_179_p2)) begin
            tocapture_V <= capturesize_V_read_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln30_reg_276 <= and_ln30_fu_179_p2;
        and_ln30_reg_276_pp0_iter3_reg <= and_ln30_reg_276;
        keepval_V_reg_271[3 : 0] <= keepval_V_fu_166_p1[3 : 0];
        phaseout_data_V_tmp_reg_240_pp0_iter2_reg <= phaseout_data_V_tmp_reg_240_pp0_iter1_reg;
        select_ln28_reg_265_pp0_iter2_reg <= select_ln28_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((((capturesize_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((capturesize_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (capturesize_V_0_vld_reg == 1'b1)))) begin
        capturesize_V_0_data_reg <= capturesize_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        capturesize_V_read_reg_260 <= capturesize_V_0_data_reg;
        icmp_ln879_reg_255 <= icmp_ln879_fu_139_p2;
        icmp_ln879_reg_255_pp0_iter1_reg <= icmp_ln879_reg_255;
        phaseout_data_V_tmp_reg_240 <= phasestream_TDATA_int;
        phaseout_data_V_tmp_reg_240_pp0_iter1_reg <= phaseout_data_V_tmp_reg_240;
        ret_V_1_reg_245 <= ret_V_1_fu_120_p1;
        select_ln28_reg_265 <= select_ln28_fu_159_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln30_fu_179_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln33_reg_280 <= select_ln33_fu_201_p3;
        trunc_ln209_reg_286 <= trunc_ln209_fu_215_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        capturesize_V_0_ack_out = 1'b1;
    end else begin
        capturesize_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keep_V_ce0 = 1'b1;
    end else begin
        keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln30_reg_276_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'd1 == and_ln30_reg_276) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        phaseout_TDATA_blk_n = phaseout_TREADY_int;
    end else begin
        phaseout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln30_reg_276) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phaseout_TVALID_int = 1'b1;
    end else begin
        phaseout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phasestream_TDATA_blk_n = phasestream_TVALID_int;
    end else begin
        phasestream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((phasestream_TVALID == 1'b1) & (regslice_both_phasestream_data_V_U_ack_in == 1'b1))) begin
        phasestream_TREADY = 1'b1;
    end else begin
        phasestream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phasestream_TREADY_int = 1'b1;
    end else begin
        phasestream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln30_fu_179_p2 = (icmp_ln879_reg_255_pp0_iter1_reg & icmp_ln30_fu_173_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (regslice_both_phaseout_data_V_U_apdone_blk == 1'b1)) | ((phasestream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (regslice_both_phaseout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((phasestream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (regslice_both_phaseout_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((phasestream_TVALID_int == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (phasestream_TVALID_int == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd1 == and_ln30_reg_276) & (phaseout_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == and_ln30_reg_276_pp0_iter3_reg) & (phaseout_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (regslice_both_phaseout_data_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_ctrl_clk_inv = ~ap_rst_n_ctrl_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln30_fu_173_p2 = ((tocapture_V != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_139_p2 = ((phasestream_TUSER_int == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_222_p2 = ((keepval_V_reg_271 > select_ln33_reg_280) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_149_p2 = ((keep_V_q0 > 8'd4) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_189_p2 = ((keepval_V_fu_166_p1 > tocapture_V) ? 1'b1 : 1'b0);

assign keep_V_address0 = zext_ln544_fu_134_p1;

assign keepval_V_fu_166_p1 = select_ln28_reg_265;

assign phaseout_TKEEP_int = ((icmp_ln895_1_fu_222_p2[0:0] === 1'b1) ? trunc_ln209_reg_286 : zext_ln28_1_fu_219_p1);

assign phaseout_TLAST_int = ((select_ln33_reg_280 == 32'd0) ? 1'b1 : 1'b0);

assign phaseout_TVALID = regslice_both_phaseout_data_V_U_vld_out;

assign ret_V_1_fu_120_p1 = phasestream_TUSER_int[0:0];

assign ret_V_fu_124_p4 = {{phasestream_TUSER_int[8:1]}};

assign select_ln28_fu_159_p3 = ((ret_V_1_reg_245[0:0] === 1'b1) ? zext_ln28_fu_155_p1 : trunc_ln1372_fu_145_p1);

assign select_ln33_fu_201_p3 = ((icmp_ln895_fu_189_p2[0:0] === 1'b1) ? 32'd0 : sub_ln214_fu_195_p2);

assign sub_ln214_fu_195_p2 = (tocapture_V - keepval_V_fu_166_p1);

assign trunc_ln1372_fu_145_p1 = keep_V_q0[3:0];

assign trunc_ln209_fu_215_p1 = select_ln33_fu_201_p3[7:0];

assign zext_ln28_1_fu_219_p1 = select_ln28_reg_265_pp0_iter2_reg;

assign zext_ln28_fu_155_p1 = icmp_ln895_2_fu_149_p2;

assign zext_ln544_fu_134_p1 = ret_V_fu_124_p4;

always @ (posedge ap_clk) begin
    keepval_V_reg_271[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //phase_capture
