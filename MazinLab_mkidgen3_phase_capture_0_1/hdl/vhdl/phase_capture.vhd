-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity phase_capture is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    phasestream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    phasestream_TVALID : IN STD_LOGIC;
    phasestream_TREADY : OUT STD_LOGIC;
    phasestream_TUSER : IN STD_LOGIC_VECTOR (8 downto 0);
    phasestream_TLAST : IN STD_LOGIC;
    phaseout_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    phaseout_TVALID : OUT STD_LOGIC;
    phaseout_TREADY : IN STD_LOGIC;
    phaseout_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    phaseout_TLAST : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ctrl_clk : IN STD_LOGIC;
    ap_rst_n_ctrl_clk : IN STD_LOGIC );
end;


architecture behav of phase_capture is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "phase_capture,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.121000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=372,HLS_SYN_LUT=401,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal keep_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal keep_V_ce0 : STD_LOGIC;
    signal keep_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal capturesize_V : STD_LOGIC_VECTOR (31 downto 0);
    signal capturesize_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal capturesize_V_0_vld_reg : STD_LOGIC := '0';
    signal capturesize_V_0_ack_out : STD_LOGIC;
    signal tocapture_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal phasestream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal phaseout_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln30_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal and_ln30_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_ctrl_clk_inv : STD_LOGIC;
    signal phaseout_data_V_tmp_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal regslice_both_phaseout_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phaseout_data_V_tmp_reg_240_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal phaseout_data_V_tmp_reg_240_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_1_fu_120_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_reg_245 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_255_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal capturesize_V_read_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_159_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_265 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_265_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal keepval_V_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal keepval_V_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln30_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln209_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln209_reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln544_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ret_V_fu_124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln895_2_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_fu_155_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1372_fu_145_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln30_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln214_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln895_1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_1_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_phasestream_data_V_U_apdone_blk : STD_LOGIC;
    signal phasestream_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal phasestream_TVALID_int : STD_LOGIC;
    signal phasestream_TREADY_int : STD_LOGIC;
    signal regslice_both_phasestream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_phasestream_user_V_U_apdone_blk : STD_LOGIC;
    signal phasestream_TUSER_int : STD_LOGIC_VECTOR (8 downto 0);
    signal regslice_both_phasestream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phasestream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_phasestream_last_U_apdone_blk : STD_LOGIC;
    signal phasestream_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phasestream_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phasestream_last_U_ack_in : STD_LOGIC;
    signal phaseout_TVALID_int : STD_LOGIC;
    signal phaseout_TREADY_int : STD_LOGIC;
    signal regslice_both_phaseout_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phaseout_keep_V_U_apdone_blk : STD_LOGIC;
    signal phaseout_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_phaseout_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phaseout_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phaseout_last_U_apdone_blk : STD_LOGIC;
    signal phaseout_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phaseout_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phaseout_last_U_vld_out : STD_LOGIC;

    component phase_capture_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        keep_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        keep_V_ce0 : IN STD_LOGIC;
        keep_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        capturesize_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    phase_capture_control_s_axi_U : component phase_capture_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ctrl_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        keep_V_address0 => keep_V_address0,
        keep_V_ce0 => keep_V_ce0,
        keep_V_q0 => keep_V_q0,
        capturesize_V => capturesize_V,
        clk => ap_clk,
        rst => ap_rst_n_ctrl_clk_inv);

    regslice_both_phasestream_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phasestream_TDATA,
        vld_in => phasestream_TVALID,
        ack_in => regslice_both_phasestream_data_V_U_ack_in,
        data_out => phasestream_TDATA_int,
        vld_out => phasestream_TVALID_int,
        ack_out => phasestream_TREADY_int,
        apdone_blk => regslice_both_phasestream_data_V_U_apdone_blk);

    regslice_both_phasestream_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phasestream_TUSER,
        vld_in => phasestream_TVALID,
        ack_in => regslice_both_phasestream_user_V_U_ack_in,
        data_out => phasestream_TUSER_int,
        vld_out => regslice_both_phasestream_user_V_U_vld_out,
        ack_out => phasestream_TREADY_int,
        apdone_blk => regslice_both_phasestream_user_V_U_apdone_blk);

    regslice_both_w1_phasestream_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phasestream_TLAST,
        vld_in => phasestream_TVALID,
        ack_in => regslice_both_w1_phasestream_last_U_ack_in,
        data_out => phasestream_TLAST_int,
        vld_out => regslice_both_w1_phasestream_last_U_vld_out,
        ack_out => phasestream_TREADY_int,
        apdone_blk => regslice_both_w1_phasestream_last_U_apdone_blk);

    regslice_both_phaseout_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phaseout_data_V_tmp_reg_240_pp0_iter2_reg,
        vld_in => phaseout_TVALID_int,
        ack_in => phaseout_TREADY_int,
        data_out => phaseout_TDATA,
        vld_out => regslice_both_phaseout_data_V_U_vld_out,
        ack_out => phaseout_TREADY,
        apdone_blk => regslice_both_phaseout_data_V_U_apdone_blk);

    regslice_both_phaseout_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phaseout_TKEEP_int,
        vld_in => phaseout_TVALID_int,
        ack_in => regslice_both_phaseout_keep_V_U_ack_in_dummy,
        data_out => phaseout_TKEEP,
        vld_out => regslice_both_phaseout_keep_V_U_vld_out,
        ack_out => phaseout_TREADY,
        apdone_blk => regslice_both_phaseout_keep_V_U_apdone_blk);

    regslice_both_w1_phaseout_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phaseout_TLAST_int,
        vld_in => phaseout_TVALID_int,
        ack_in => regslice_both_w1_phaseout_last_U_ack_in_dummy,
        data_out => phaseout_TLAST,
        vld_out => regslice_both_w1_phaseout_last_U_vld_out,
        ack_out => phaseout_TREADY,
        apdone_blk => regslice_both_w1_phaseout_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    capturesize_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    tocapture_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_lv1_1 = and_ln30_fu_179_p2)) then 
                    tocapture_V <= select_ln33_fu_201_p3;
                elsif ((ap_const_lv1_0 = and_ln30_fu_179_p2)) then 
                    tocapture_V <= capturesize_V_read_reg_260;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln30_reg_276 <= and_ln30_fu_179_p2;
                and_ln30_reg_276_pp0_iter3_reg <= and_ln30_reg_276;
                    keepval_V_reg_271(3 downto 0) <= keepval_V_fu_166_p1(3 downto 0);
                phaseout_data_V_tmp_reg_240_pp0_iter2_reg <= phaseout_data_V_tmp_reg_240_pp0_iter1_reg;
                select_ln28_reg_265_pp0_iter2_reg <= select_ln28_reg_265;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((capturesize_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((capturesize_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (capturesize_V_0_vld_reg = ap_const_logic_1)))) then
                capturesize_V_0_data_reg <= capturesize_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                capturesize_V_read_reg_260 <= capturesize_V_0_data_reg;
                icmp_ln879_reg_255 <= icmp_ln879_fu_139_p2;
                icmp_ln879_reg_255_pp0_iter1_reg <= icmp_ln879_reg_255;
                phaseout_data_V_tmp_reg_240 <= phasestream_TDATA_int;
                phaseout_data_V_tmp_reg_240_pp0_iter1_reg <= phaseout_data_V_tmp_reg_240;
                ret_V_1_reg_245 <= ret_V_1_fu_120_p1;
                select_ln28_reg_265 <= select_ln28_fu_159_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln30_fu_179_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln33_reg_280 <= select_ln33_fu_201_p3;
                trunc_ln209_reg_286 <= trunc_ln209_fu_215_p1;
            end if;
        end if;
    end process;
    keepval_V_reg_271(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln30_fu_179_p2 <= (icmp_ln879_reg_255_pp0_iter1_reg and icmp_ln30_fu_173_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, regslice_both_phaseout_data_V_U_apdone_blk, phasestream_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (regslice_both_phaseout_data_V_U_apdone_blk = ap_const_logic_1)) or ((phasestream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_state4_io, regslice_both_phaseout_data_V_U_apdone_blk, ap_block_state5_io, phasestream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (regslice_both_phaseout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((phasestream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_state4_io, regslice_both_phaseout_data_V_U_apdone_blk, ap_block_state5_io, phasestream_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (regslice_both_phaseout_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((phasestream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(phasestream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (phasestream_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(and_ln30_reg_276, phaseout_TREADY_int)
    begin
                ap_block_state4_io <= ((ap_const_lv1_1 = and_ln30_reg_276) and (phaseout_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(and_ln30_reg_276_pp0_iter3_reg, phaseout_TREADY_int)
    begin
                ap_block_state5_io <= ((ap_const_lv1_1 = and_ln30_reg_276_pp0_iter3_reg) and (phaseout_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(regslice_both_phaseout_data_V_U_apdone_blk)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (regslice_both_phaseout_data_V_U_apdone_blk = ap_const_logic_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_ctrl_clk_inv_assign_proc : process(ap_rst_n_ctrl_clk)
    begin
                ap_rst_n_ctrl_clk_inv <= not(ap_rst_n_ctrl_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    capturesize_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            capturesize_V_0_ack_out <= ap_const_logic_1;
        else 
            capturesize_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln30_fu_173_p2 <= "0" when (tocapture_V = ap_const_lv32_0) else "1";
    icmp_ln879_fu_139_p2 <= "1" when (phasestream_TUSER_int = ap_const_lv9_0) else "0";
    icmp_ln895_1_fu_222_p2 <= "1" when (unsigned(keepval_V_reg_271) > unsigned(select_ln33_reg_280)) else "0";
    icmp_ln895_2_fu_149_p2 <= "1" when (unsigned(keep_V_q0) > unsigned(ap_const_lv8_4)) else "0";
    icmp_ln895_fu_189_p2 <= "1" when (unsigned(keepval_V_fu_166_p1) > unsigned(tocapture_V)) else "0";
    keep_V_address0 <= zext_ln544_fu_134_p1(8 - 1 downto 0);

    keep_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            keep_V_ce0 <= ap_const_logic_1;
        else 
            keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    keepval_V_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_265),32));

    phaseout_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln30_reg_276, ap_enable_reg_pp0_iter4, and_ln30_reg_276_pp0_iter3_reg, phaseout_TREADY_int)
    begin
        if ((((ap_const_lv1_1 = and_ln30_reg_276_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln30_reg_276) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            phaseout_TDATA_blk_n <= phaseout_TREADY_int;
        else 
            phaseout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phaseout_TKEEP_int <= 
        trunc_ln209_reg_286 when (icmp_ln895_1_fu_222_p2(0) = '1') else 
        zext_ln28_1_fu_219_p1;
    phaseout_TLAST_int <= '1' when (select_ln33_reg_280 = ap_const_lv32_0) else '0';
    phaseout_TVALID <= regslice_both_phaseout_data_V_U_vld_out;

    phaseout_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln30_reg_276, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln30_reg_276) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phaseout_TVALID_int <= ap_const_logic_1;
        else 
            phaseout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    phasestream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phasestream_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phasestream_TDATA_blk_n <= phasestream_TVALID_int;
        else 
            phasestream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    phasestream_TREADY_assign_proc : process(phasestream_TVALID, regslice_both_phasestream_data_V_U_ack_in)
    begin
        if (((phasestream_TVALID = ap_const_logic_1) and (regslice_both_phasestream_data_V_U_ack_in = ap_const_logic_1))) then 
            phasestream_TREADY <= ap_const_logic_1;
        else 
            phasestream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    phasestream_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phasestream_TREADY_int <= ap_const_logic_1;
        else 
            phasestream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_120_p1 <= phasestream_TUSER_int(1 - 1 downto 0);
    ret_V_fu_124_p4 <= phasestream_TUSER_int(8 downto 1);
    select_ln28_fu_159_p3 <= 
        zext_ln28_fu_155_p1 when (ret_V_1_reg_245(0) = '1') else 
        trunc_ln1372_fu_145_p1;
    select_ln33_fu_201_p3 <= 
        ap_const_lv32_0 when (icmp_ln895_fu_189_p2(0) = '1') else 
        sub_ln214_fu_195_p2;
    sub_ln214_fu_195_p2 <= std_logic_vector(unsigned(tocapture_V) - unsigned(keepval_V_fu_166_p1));
    trunc_ln1372_fu_145_p1 <= keep_V_q0(4 - 1 downto 0);
    trunc_ln209_fu_215_p1 <= select_ln33_fu_201_p3(8 - 1 downto 0);
    zext_ln28_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_265_pp0_iter2_reg),8));
    zext_ln28_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln895_2_fu_149_p2),4));
    zext_ln544_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_124_p4),64));
end behav;
