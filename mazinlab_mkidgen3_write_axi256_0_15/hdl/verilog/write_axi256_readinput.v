// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_axi256_readinput (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_TDATA,
        stream_TVALID,
        stream_TREADY,
        stream_TKEEP,
        stream_TSTRB,
        stream_TLAST,
        capturesize,
        iq_in8_din,
        iq_in8_full_n,
        iq_in8_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] stream_TDATA;
input   stream_TVALID;
output   stream_TREADY;
input  [31:0] stream_TKEEP;
input  [31:0] stream_TSTRB;
input  [0:0] stream_TLAST;
input  [26:0] capturesize;
output  [255:0] iq_in8_din;
input   iq_in8_full_n;
output   iq_in8_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg iq_in8_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    iq_in8_blk_n;
reg   [27:0] indvar_flatten3_reg_97;
wire   [27:0] bound_fu_126_p1;
wire   [0:0] icmp_ln398_1_fu_130_p2;
wire   [27:0] add_ln398_fu_136_p2;
reg   [27:0] add_ln398_reg_160;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln398_fu_147_p2;
reg    ap_condition_pp0_flush_enable;
reg   [27:0] ap_phi_mux_indvar_flatten3_phi_fu_101_p4;
reg    ap_block_pp0_stage0_01001;
wire   [19:0] tmp_4_fu_108_p4;
wire   [26:0] tmp_5_fu_118_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_V_data_V_U_apdone_blk;
wire   [255:0] stream_TDATA_int_regslice;
wire    stream_TVALID_int_regslice;
reg    stream_TREADY_int_regslice;
wire    regslice_both_stream_V_data_V_U_ack_in;
wire    regslice_both_stream_V_keep_V_U_apdone_blk;
wire   [31:0] stream_TKEEP_int_regslice;
wire    regslice_both_stream_V_keep_V_U_vld_out;
wire    regslice_both_stream_V_keep_V_U_ack_in;
wire    regslice_both_stream_V_strb_V_U_apdone_blk;
wire   [31:0] stream_TSTRB_int_regslice;
wire    regslice_both_stream_V_strb_V_U_vld_out;
wire    regslice_both_stream_V_strb_V_U_ack_in;
wire    regslice_both_stream_V_last_V_U_apdone_blk;
wire   [0:0] stream_TLAST_int_regslice;
wire    regslice_both_stream_V_last_V_U_vld_out;
wire    regslice_both_stream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

write_axi256_regslice_both #(
    .DataWidth( 256 ))
regslice_both_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TDATA),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_data_V_U_ack_in),
    .data_out(stream_TDATA_int_regslice),
    .vld_out(stream_TVALID_int_regslice),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_data_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TKEEP),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_keep_V_U_ack_in),
    .data_out(stream_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_V_keep_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_keep_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TSTRB),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_strb_V_U_ack_in),
    .data_out(stream_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_V_strb_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_strb_V_U_apdone_blk)
);

write_axi256_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_TLAST),
    .vld_in(stream_TVALID),
    .ack_in(regslice_both_stream_V_last_V_U_ack_in),
    .data_out(stream_TLAST_int_regslice),
    .vld_out(regslice_both_stream_V_last_V_U_vld_out),
    .ack_out(stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln398_1_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln398_1_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_97 <= 28'd0;
    end else if (((icmp_ln398_fu_147_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten3_reg_97 <= add_ln398_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln398_reg_160 <= add_ln398_fu_136_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln398_fu_147_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln398_fu_147_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten3_phi_fu_101_p4 = add_ln398_reg_160;
    end else begin
        ap_phi_mux_indvar_flatten3_phi_fu_101_p4 = indvar_flatten3_reg_97;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq_in8_blk_n = iq_in8_full_n;
    end else begin
        iq_in8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iq_in8_write = 1'b1;
    end else begin
        iq_in8_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_TDATA_blk_n = stream_TVALID_int_regslice;
    end else begin
        stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_TREADY_int_regslice = 1'b1;
    end else begin
        stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln398_1_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln398_1_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_condition_pp0_flush_enable) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_condition_pp0_flush_enable) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln398_fu_136_p2 = (ap_phi_mux_indvar_flatten3_phi_fu_101_p4 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((iq_in8_full_n == 1'b0) | (stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((iq_in8_full_n == 1'b0) | (stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((iq_in8_full_n == 1'b0) | (stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((iq_in8_full_n == 1'b0) | (stream_TVALID_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_126_p1 = tmp_5_fu_118_p3;

assign icmp_ln398_1_fu_130_p2 = ((tmp_5_fu_118_p3 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln398_fu_147_p2 = ((add_ln398_reg_160 == bound_fu_126_p1) ? 1'b1 : 1'b0);

assign iq_in8_din = stream_TDATA_int_regslice;

assign stream_TREADY = regslice_both_stream_V_data_V_U_ack_in;

assign tmp_4_fu_108_p4 = {{capturesize[26:7]}};

assign tmp_5_fu_118_p3 = {{tmp_4_fu_108_p4}, {7'd0}};

endmodule //write_axi256_readinput
